From 17be0e45e88d1b194a14bb6e32402183a61aa1ba Mon Sep 17 00:00:00 2001
From: "Nikumbh, Mayur NimbaX" <mayur.nimbax.nikumbh@intel.com>
Date: Thu, 28 Nov 2019 18:35:35 +0530
Subject: [PATCH] Add advance features in MultiCamera app

-Full Screen view for each camera
-Settings screen for each camera
-Limited resolution settings to QVGA, VGA, HD, FHD, 4K
-Thumbnail for both video & picture capture for Quick Preview
-Recording duration countdown while recording video
-UI modifications
-New Activity to handle Camera Intents
-Duration & size info  in file details
-New Multicamera App Icon
-Video resolution list based on camera capabilities
-Audio source set to external mic

Tracked-on: OAM-88682
Signed-off-by: Nikumbh, Mayur NimbaX <mayur.nimbax.nikumbh@intel.com>
Signed-off-by: Muhammad Aksar <muhammad.aksar@intel.com>
---
 .../AndroidManifest.xml                       |  53 +-
 .../ic_launcher-web.png                       | Bin 16659 -> 0 bytes
 .../intel/multicamera/AutoFitTextureView.java |   4 +
 .../com/intel/multicamera/BotmRightCam.java   | 646 --------------
 .../{BotmLeftCam.java => CameraBase.java}     | 557 +++++++++---
 .../{TopLeftCam.java => CtsCamIntents.java}   | 408 +++++----
 .../multicamera/CtsCameraIntentsActivity.java | 127 +++
 .../com/intel/multicamera/MainActivity.java   | 396 ---------
 .../intel/multicamera/MultiViewActivity.java  | 792 ++++++++++++++++++
 .../multicamera/PermissionsActivity.java      |  34 +-
 .../com/intel/multicamera/QuickActivity.java  |  20 +-
 .../multicamera/RoundedThumbnailView.java     | 767 +++++++++++++++++
 .../intel/multicamera/SettingsActivity.java   | 427 +---------
 .../intel/multicamera/SettingsPrefUtil.java   | 482 +++++++++++
 .../com/intel/multicamera/SurfaceUtil.java    |  55 ++
 .../java/com/intel/multicamera/Thumbnail.java |  67 ++
 .../com/intel/multicamera/TopRightCam.java    | 649 --------------
 .../java/com/intel/multicamera/Utils.java     | 380 ++++++++-
 .../drawable-v24/ic_launcher_foreground.xml   |  34 -
 .../res/drawable/bg_text_on_preview.xml       |  21 +
 .../res/drawable/ic_back_normal.png           | Bin 0 -> 918 bytes
 .../drawable/ic_capture_camera_disabled.png   | Bin 0 -> 343 bytes
 .../res/drawable/ic_capture_camera_normal.png | Bin 0 -> 374 bytes
 .../res/drawable/ic_capture_video.png         | Bin 0 -> 298 bytes
 .../drawable/ic_capture_video_disabled.png    | Bin 0 -> 240 bytes
 .../res/drawable/ic_confirm.png               | Bin 0 -> 1666 bytes
 .../res/drawable/ic_control_play.png          | Bin 0 -> 6627 bytes
 .../res/drawable/ic_exitscreeen.png           | Bin 0 -> 1190 bytes
 .../res/drawable/ic_full_screen.png           | Bin 0 -> 671 bytes
 .../res/drawable/ic_launcher_foreground.xml   |  13 -
 .../drawable/ic_menu_cancel_holo_light.png    | Bin 0 -> 1181 bytes
 .../res/drawable/ic_menu_trash.xml            |  22 +
 .../res/drawable/ic_record.png                | Bin 0 -> 1701 bytes
 .../res/drawable/ic_recording_indicator.png   | Bin 0 -> 700 bytes
 .../res/drawable/ic_settings_black_24dp.xml   |   2 +-
 .../res/drawable/ic_settings_normal.png       | Bin 0 -> 1074 bytes
 .../drawable/ic_settings_normal_disabled.png  | Bin 0 -> 827 bytes
 .../res/drawable/ic_stop_normal.png           | Bin 0 -> 1256 bytes
 .../res/drawable/ic_trash_disabled.png        | Bin 0 -> 210 bytes
 .../res/drawable/ic_trash_normal.png          | Bin 0 -> 201 bytes
 .../res/drawable/photo_selector.xml           |  29 +
 .../transparent_button_background.xml         |   8 +
 .../res/drawable/video_selector.xml           |  29 +
 .../res/layout/activity_itscameraintents.xml  |  84 ++
 ...tivity_main.xml => activity_multiview.xml} |  19 +-
 .../res/layout/botmleftcam.xml                | 110 +++
 .../res/layout/botmrightcam.xml               | 111 +++
 .../res/layout/content_main.xml               | 145 +---
 .../res/layout/intentpreview.xml              |  31 +
 .../res/layout/permissions.xml                |   2 +-
 .../res/layout/photopreview.xml               |  47 ++
 .../res/layout/topleftcam.xml                 | 116 +++
 .../res/layout/toprightcam.xml                | 108 +++
 .../res/menu/menu_main.xml                    |  12 -
 .../res/mipmap-anydpi-v26/ic_launcher.xml     |   2 +-
 .../mipmap-anydpi-v26/ic_launcher_round.xml   |   2 +-
 .../res/mipmap-hdpi/ic_launcher.png           | Bin 1490 -> 1433 bytes
 .../mipmap-hdpi/ic_launcher_foreground.png    | Bin 0 -> 2621 bytes
 .../res/mipmap-hdpi/ic_launcher_round.png     | Bin 3377 -> 3265 bytes
 .../res/mipmap-mdpi/ic_launcher.png           | Bin 1378 -> 979 bytes
 .../mipmap-mdpi/ic_launcher_foreground.png    | Bin 0 -> 1705 bytes
 .../res/mipmap-mdpi/ic_launcher_round.png     | Bin 2134 -> 2018 bytes
 .../res/mipmap-xhdpi/ic_launcher.png          | Bin 2789 -> 2064 bytes
 .../mipmap-xhdpi/ic_launcher_foreground.png   | Bin 0 -> 4220 bytes
 .../res/mipmap-xhdpi/ic_launcher_round.png    | Bin 5250 -> 4688 bytes
 .../res/mipmap-xxhdpi/ic_launcher.png         | Bin 3755 -> 3282 bytes
 .../mipmap-xxhdpi/ic_launcher_foreground.png  | Bin 0 -> 7893 bytes
 .../res/mipmap-xxhdpi/ic_launcher_round.png   | Bin 7642 -> 7545 bytes
 .../res/mipmap-xxxhdpi/ic_launcher.png        | Bin 5778 -> 4713 bytes
 .../mipmap-xxxhdpi/ic_launcher_foreground.png | Bin 0 -> 13190 bytes
 .../res/mipmap-xxxhdpi/ic_launcher_round.png  | Bin 11835 -> 11021 bytes
 .../res/values/arrays.xml                     |  89 +-
 .../res/values/colors.xml                     |  63 ++
 .../res/values/dimens.xml                     |  15 +
 .../res/values/ic_launcher_background.xml     |   4 +
 .../res/values/strings.xml                    |  37 +-
 .../res/values/styles.xml                     |  28 +-
 .../res/xml/root_preferences.xml              |  41 +-
 .../res/xml/root_preferences_1.xml            |  45 +
 .../res/xml/root_preferences_2.xml            |  45 +
 .../res/xml/root_preferences_3.xml            |  48 ++
 .../xml/settings.xml}                         |  32 +-
 82 files changed, 4555 insertions(+), 2703 deletions(-)
 delete mode 100644 camera/MultiCameraApplication/ic_launcher-web.png
 delete mode 100644 camera/MultiCameraApplication/java/com/intel/multicamera/BotmRightCam.java
 rename camera/MultiCameraApplication/java/com/intel/multicamera/{BotmLeftCam.java => CameraBase.java} (56%)
 rename camera/MultiCameraApplication/java/com/intel/multicamera/{TopLeftCam.java => CtsCamIntents.java} (71%)
 create mode 100644 camera/MultiCameraApplication/java/com/intel/multicamera/CtsCameraIntentsActivity.java
 delete mode 100644 camera/MultiCameraApplication/java/com/intel/multicamera/MainActivity.java
 create mode 100644 camera/MultiCameraApplication/java/com/intel/multicamera/MultiViewActivity.java
 create mode 100644 camera/MultiCameraApplication/java/com/intel/multicamera/RoundedThumbnailView.java
 create mode 100644 camera/MultiCameraApplication/java/com/intel/multicamera/SettingsPrefUtil.java
 create mode 100644 camera/MultiCameraApplication/java/com/intel/multicamera/SurfaceUtil.java
 create mode 100644 camera/MultiCameraApplication/java/com/intel/multicamera/Thumbnail.java
 delete mode 100644 camera/MultiCameraApplication/java/com/intel/multicamera/TopRightCam.java
 delete mode 100644 camera/MultiCameraApplication/res/drawable-v24/ic_launcher_foreground.xml
 create mode 100644 camera/MultiCameraApplication/res/drawable/bg_text_on_preview.xml
 create mode 100644 camera/MultiCameraApplication/res/drawable/ic_back_normal.png
 create mode 100644 camera/MultiCameraApplication/res/drawable/ic_capture_camera_disabled.png
 create mode 100644 camera/MultiCameraApplication/res/drawable/ic_capture_camera_normal.png
 create mode 100644 camera/MultiCameraApplication/res/drawable/ic_capture_video.png
 create mode 100644 camera/MultiCameraApplication/res/drawable/ic_capture_video_disabled.png
 create mode 100644 camera/MultiCameraApplication/res/drawable/ic_confirm.png
 create mode 100644 camera/MultiCameraApplication/res/drawable/ic_control_play.png
 create mode 100644 camera/MultiCameraApplication/res/drawable/ic_exitscreeen.png
 create mode 100644 camera/MultiCameraApplication/res/drawable/ic_full_screen.png
 delete mode 100644 camera/MultiCameraApplication/res/drawable/ic_launcher_foreground.xml
 create mode 100644 camera/MultiCameraApplication/res/drawable/ic_menu_cancel_holo_light.png
 create mode 100644 camera/MultiCameraApplication/res/drawable/ic_menu_trash.xml
 create mode 100644 camera/MultiCameraApplication/res/drawable/ic_record.png
 create mode 100755 camera/MultiCameraApplication/res/drawable/ic_recording_indicator.png
 create mode 100644 camera/MultiCameraApplication/res/drawable/ic_settings_normal.png
 create mode 100644 camera/MultiCameraApplication/res/drawable/ic_settings_normal_disabled.png
 create mode 100644 camera/MultiCameraApplication/res/drawable/ic_stop_normal.png
 create mode 100644 camera/MultiCameraApplication/res/drawable/ic_trash_disabled.png
 create mode 100644 camera/MultiCameraApplication/res/drawable/ic_trash_normal.png
 create mode 100644 camera/MultiCameraApplication/res/drawable/photo_selector.xml
 create mode 100644 camera/MultiCameraApplication/res/drawable/transparent_button_background.xml
 create mode 100644 camera/MultiCameraApplication/res/drawable/video_selector.xml
 create mode 100644 camera/MultiCameraApplication/res/layout/activity_itscameraintents.xml
 rename camera/MultiCameraApplication/res/layout/{activity_main.xml => activity_multiview.xml} (61%)
 create mode 100644 camera/MultiCameraApplication/res/layout/botmleftcam.xml
 create mode 100644 camera/MultiCameraApplication/res/layout/botmrightcam.xml
 create mode 100644 camera/MultiCameraApplication/res/layout/intentpreview.xml
 create mode 100644 camera/MultiCameraApplication/res/layout/photopreview.xml
 create mode 100644 camera/MultiCameraApplication/res/layout/topleftcam.xml
 create mode 100644 camera/MultiCameraApplication/res/layout/toprightcam.xml
 delete mode 100644 camera/MultiCameraApplication/res/menu/menu_main.xml
 create mode 100644 camera/MultiCameraApplication/res/mipmap-hdpi/ic_launcher_foreground.png
 create mode 100644 camera/MultiCameraApplication/res/mipmap-mdpi/ic_launcher_foreground.png
 create mode 100644 camera/MultiCameraApplication/res/mipmap-xhdpi/ic_launcher_foreground.png
 create mode 100644 camera/MultiCameraApplication/res/mipmap-xxhdpi/ic_launcher_foreground.png
 create mode 100644 camera/MultiCameraApplication/res/mipmap-xxxhdpi/ic_launcher_foreground.png
 create mode 100644 camera/MultiCameraApplication/res/values/ic_launcher_background.xml
 create mode 100644 camera/MultiCameraApplication/res/xml/root_preferences_1.xml
 create mode 100644 camera/MultiCameraApplication/res/xml/root_preferences_2.xml
 create mode 100644 camera/MultiCameraApplication/res/xml/root_preferences_3.xml
 rename camera/MultiCameraApplication/{java/com/intel/multicamera/GlobalVariable.java => res/xml/settings.xml} (50%)

diff --git a/camera/MultiCameraApplication/AndroidManifest.xml b/camera/MultiCameraApplication/AndroidManifest.xml
index 1516ff5..a485119 100644
--- a/camera/MultiCameraApplication/AndroidManifest.xml
+++ b/camera/MultiCameraApplication/AndroidManifest.xml
@@ -9,7 +9,7 @@
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
 
     <uses-feature android:name="android.hardware.camera2.full"/>
-
+    <uses-feature android:name="android.hardware.usb.host" />
 
     <application
         android:allowBackup="true"
@@ -17,44 +17,41 @@
         android:label="@string/app_name"
         android:roundIcon="@mipmap/ic_launcher_round"
         android:supportsRtl="true"
-        android:theme="@style/AppTheme">
+	android:theme="@style/AppTheme" >
 
-        <activity
-                android:name=".PermissionsActivity"
-                android:label="@string/app_name"
-                android:excludeFromRecents="true"
-                android:parentActivityName=".MainActivity">
-            <meta-data android:name="android.support.PARENT_ACTIVITY"
-                       android:value="com.intel.multicamera.MainActivity"/>
+        <activity android:name=".CtsCameraIntentsActivity"
+                  android:excludeFromRecents="true"
+                  android:theme="@style/AppTheme.NoActionBar">
+            <intent-filter>
+                <action android:name="android.media.action.IMAGE_CAPTURE" />
+                <category android:name="android.intent.category.DEFAULT" />
+            </intent-filter>
+            <intent-filter>
+                <action android:name="android.media.action.VIDEO_CAPTURE" />
+                <category android:name="android.intent.category.DEFAULT" />
+            </intent-filter>
         </activity>
 
         <activity
-            android:name=".SettingsActivity"
-            android:label="@string/title_activity_settings"
-            android:theme="@style/AppTheme"
-            android:parentActivityName=".MainActivity">
-            <meta-data
-                android:name="android.support.PARENT_ACTIVITY"
-                android:value="com.intel.multicamera.MainActivity" />
-        </activity>
-        <activity
-            android:name=".MainActivity"
+            android:name=".MultiViewActivity"
             android:label="@string/app_name"
-            android:theme="@style/AppTheme.NoActionBar">
+            android:theme="@style/AppTheme.NoActionBar">">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
 
                 <category android:name="android.intent.category.LAUNCHER" />
             </intent-filter>
-            <intent-filter>
-                <action android:name="android.media.action.IMAGE_CAPTURE" />
-                <category android:name="android.intent.category.DEFAULT" />
-            </intent-filter>
-            <intent-filter>
-                <action android:name="android.media.action.VIDEO_CAPTURE" />
-                <category android:name="android.intent.category.DEFAULT" />
-            </intent-filter>
+
         </activity>
+
+        <activity
+                android:name=".PermissionsActivity"
+                android:label="@string/app_name"
+               >
+
+        </activity>
+
+
     </application>
 
 </manifest>
diff --git a/camera/MultiCameraApplication/ic_launcher-web.png b/camera/MultiCameraApplication/ic_launcher-web.png
deleted file mode 100644
index 0c90ffee5938eff24e8ebac206fac4f524714a2e..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 16659
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%0AD%F
z>0vC26~mTJ(neF<(3A%j+=KQ=^Fj9G-0;4XTNWF<geUdFw%lRS6isO`a&_2s#eTjl
z7U%hz&^=!wK%?%!P<<8f$A-zh<AgA%pzGotw8wGIksWSw!hHpY`{OrnziwgS%)@zX
zYt$|s(Uh6O9mScO)^|;E2*lEngS>c8EJAg}0M(ILhd15TvGiq0{4~TwqPK?dR#xiv
zNcP)DEN+*cEVE$YfTWAT6T4z|=6vOFqV~O_V<AaL;1|+`Vo_phXm7dFV)?{a7>wME
zEM}CB@v+`k8@zezA(Qd5E&B#@0xTQv5gIyYN(^Xyl?3sTOZbIXm^%En-KBm?iJ953
zJ}cOCFxoQ|eg9V9abc-*jf7HIN<{N;R$<<pOuMO5IoZLU+9ylTtgLi0BXQ5ZLbUeM
z?dfl4?2(I!GVpjBhrZEZEt(6?%_g{^w$eaT)IXIyE3M>lU0=^+5r+dcK2UWkf7k%=
zYCUY@Ews0x@OD<gb;q{1wk1GQBRTlnUH812&D}StEP$C4_%M~d;Hr^m#(C%OWs+r5
z=^3V?DG}}6)OJ1BBvkdq`^q~=u9K;R#>dbsp6wOh4llD|I|j*%^YpDRI?Q(=xr~%i
z_$6Py{aXPKX6~fJl07~791o|vweWVfGKItl{jQ@M&1?p5%PsYv#XQCw<6Txzo{#Kh
z!siE<6>j$JD`J<xjdE01YD1;&j*XB$+&RHq6+VKVoy$=Hg!g8i^!2Q>WoUg(+m`%H
z_X1pQY}kPc<Vg#pXiAQ4ccXiBm~|C^FrJI<?uVeh3~~KCe!u@?;0FWNAhm%!<P(;{
QjF&V{>8NF%u(<ty0DL>JzW@LL

diff --git a/camera/MultiCameraApplication/java/com/intel/multicamera/AutoFitTextureView.java b/camera/MultiCameraApplication/java/com/intel/multicamera/AutoFitTextureView.java
index 12ce3b5..e99dac6 100644
--- a/camera/MultiCameraApplication/java/com/intel/multicamera/AutoFitTextureView.java
+++ b/camera/MultiCameraApplication/java/com/intel/multicamera/AutoFitTextureView.java
@@ -26,12 +26,15 @@ import android.view.TextureView;
 public class AutoFitTextureView extends TextureView {
     private int mRatioWidth = 0;
     private int mRatioHeight = 0;
+
     public AutoFitTextureView(Context context) {
         this(context, null);
     }
+
     public AutoFitTextureView(Context context, AttributeSet attrs) {
         this(context, attrs, 0);
     }
+
     public AutoFitTextureView(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs, defStyle);
     }
@@ -41,6 +44,7 @@ public class AutoFitTextureView extends TextureView {
      * on the ratio calculated from the parameters. Note that the actual sizes of parameters
      * don't matter, that is, calling setAspectRatio(2, 3) and setAspectRatio(4, 6) make the
      * same result.
+     *
      * @param width  Relative horizontal size
      * @param height Relative vertical size
      */
diff --git a/camera/MultiCameraApplication/java/com/intel/multicamera/BotmRightCam.java b/camera/MultiCameraApplication/java/com/intel/multicamera/BotmRightCam.java
deleted file mode 100644
index 3772ccd..0000000
--- a/camera/MultiCameraApplication/java/com/intel/multicamera/BotmRightCam.java
+++ /dev/null
@@ -1,646 +0,0 @@
-/*
- * Copyright 2014 The Android Open Source Project
- * Copyright (c) 2019 Intel Corporation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.intel.multicamera;
-
-import android.Manifest;
-import android.annotation.SuppressLint;
-import android.app.Activity;
-import android.content.*;
-import android.content.pm.PackageManager;
-import android.graphics.ImageFormat;
-import android.graphics.Matrix;
-import android.graphics.RectF;
-import android.graphics.SurfaceTexture;
-import android.hardware.camera2.*;
-import android.hardware.camera2.params.StreamConfigurationMap;
-import android.media.CamcorderProfile;
-import android.media.Image;
-import android.media.ImageReader;
-import android.media.MediaRecorder;
-import android.net.Uri;
-import android.os.Environment;
-import android.os.Handler;
-import android.os.HandlerThread;
-import android.provider.MediaStore;
-import android.util.Log;
-import android.util.Size;
-import android.util.SparseIntArray;
-import android.view.Surface;
-import android.view.TextureView;
-import android.view.View;
-import android.widget.Button;
-import android.widget.Toast;
-import androidx.annotation.NonNull;
-import androidx.core.app.ActivityCompat;
-import androidx.preference.PreferenceManager;
-import java.io.*;
-import java.nio.ByteBuffer;
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Date;
-import java.util.List;
-import java.util.concurrent.TimeUnit;
-
-public class BotmRightCam {
-    Activity mActivity;
-    private static final String TAG = "BotmRightCam";
-    private String mNextVideoAbsolutePath;
-    private CamcorderProfile mProfile;
-    /**
-     * An {@link AutoFitTextureView} for camera preview.
-     */
-    private AutoFitTextureView textureView;
-    private Button takePictureButton, TakeVideoButton;
-
-    private MediaRecorder mMediaRecorder;
-    private String cameraId;
-    protected CameraDevice cameraDevice;
-    protected CameraCaptureSession cameraCaptureSessions;
-    protected CaptureRequest captureRequest;
-    protected CaptureRequest.Builder captureRequestBuilder;
-    private Size imageDimension, previewSize;
-    private ImageReader imageReader;
-    private File file;
-    private Handler mBackgroundHandler;
-    private HandlerThread mBackgroundThread;
-    private static final int SENSOR_ORIENTATION_DEFAULT_DEGREES = 90;
-    private static final int SENSOR_ORIENTATION_INVERSE_DEGREES = 270;
-    private static final SparseIntArray DEFAULT_ORIENTATIONS = new SparseIntArray();
-    private static final SparseIntArray INVERSE_ORIENTATIONS = new SparseIntArray();
-    private static final SparseIntArray ORIENTATIONS = new SparseIntArray();
-    private SharedPreferences settings;
-    /**
-     * Whether the app is recording video now
-     */
-    private boolean mIsRecordingVideo;
-
-    // The video file that the hardware camera is about to record into
-    // (or is recording into.
-    private String mVideoFilename, mPictureFilename;
-    private ContentValues mCurrentVideoValues, mCurrentPictureValues;
-    byte[] jpegLength;
-
-    /**
-     * Orientation of the camera sensor
-     */
-    private int mSensorOrientation;
-
-    static {
-        ORIENTATIONS.append(Surface.ROTATION_0, 90);
-        ORIENTATIONS.append(Surface.ROTATION_90, 0);
-        ORIENTATIONS.append(Surface.ROTATION_180, 270);
-        ORIENTATIONS.append(Surface.ROTATION_270, 180);
-    }
-
-    public BotmRightCam(Activity activity, AutoFitTextureView textureView, Button PictureButton,
-                        Button RecordButton) {
-        Log.e(TAG, "constructor called");
-        this.mActivity = activity;
-        this.textureView = textureView;
-        this.textureView.setSurfaceTextureListener(textureListener);
-        this.ClickListeners(PictureButton, RecordButton);
-        this.settings = PreferenceManager.getDefaultSharedPreferences(activity);
-    }
-
-    public void ClickListeners(Button PictureButton, Button RecordButton) {
-        TakePicureOnClicked(PictureButton);
-
-        StartVideoRecording(RecordButton);
-    }
-
-    private void TakePicureOnClicked(Button PictureButton) {
-        takePictureButton = PictureButton;
-        if (takePictureButton == null) return;
-
-        takePictureButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                takePicture();
-                Utils.broadcastNewPicture(mActivity.getApplicationContext(), mCurrentPictureValues);
-            }
-        });
-    }
-
-    private void StartVideoRecording(Button RecordButton) {
-        TakeVideoButton = RecordButton;
-        TakeVideoButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                // Intent i = new Intent(HomeScreenActivity.this, CameraActivity.class);
-                System.out.println(" onCreate Record0");
-                if (mIsRecordingVideo) {
-                    stopRecordingVideo();
-                    Utils.broadcastNewVideo(mActivity.getApplicationContext(), mCurrentVideoValues);
-                    takePictureButton.setVisibility(View.VISIBLE);
-                } else {
-                    startRecordingVideo();
-                    takePictureButton.setVisibility(View.GONE);
-                }
-            }
-        });
-    }
-
-    TextureView.SurfaceTextureListener textureListener = new TextureView.SurfaceTextureListener() {
-        @Override
-        public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {
-            // open your camera here
-            openCamera(width, height);
-        }
-        @Override
-        public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {
-            // Transform you image captured size according to the surface width and height
-            configureTransform(width, height);
-        }
-        @Override
-        public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {
-            return false;
-        }
-        @Override
-        public void onSurfaceTextureUpdated(SurfaceTexture surface) {
-        }
-    };
-
-    public void openCamera(int width, int height) {
-        CameraManager manager = (CameraManager)mActivity.getSystemService(Context.CAMERA_SERVICE);
-        Log.e(TAG, "is camera open");
-        try {
-            if (manager.getCameraIdList().length != 4) {
-                Log.e(TAG, "this camera is not connected ");
-                return;
-            }
-
-            cameraId = manager.getCameraIdList()[3];
-            Log.e(TAG, "is camera open ID" + cameraId);
-            CameraCharacteristics characteristics = manager.getCameraCharacteristics(cameraId);
-            StreamConfigurationMap map =
-                    characteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
-            if (map == null) return;
-            settings = PreferenceManager.getDefaultSharedPreferences(mActivity);
-            String Key = SettingsActivity.SettingsFragment.getchangedPrefKey();
-
-            if (Key.compareTo("video_list") == 0) {
-                String videoQuality = settings.getString("video_list", "medium");
-
-                int quality = SettingsActivity.SettingsFragment.getVideoQuality(0, videoQuality);
-                Log.d(TAG, "Selected video quality for '" + videoQuality + "' is " + quality);
-
-                mProfile = CamcorderProfile.get(0, quality);
-                previewSize = new Size(mProfile.videoFrameWidth, mProfile.videoFrameHeight);
-
-                configureTransform(width, height);
-            } else {
-                previewSize = SettingsActivity.SettingsFragment.sizeFromSettingString(
-                        settings.getString("capture_list", "640x480"));
-                Log.d(TAG,
-                      "Selected imageDimension" + previewSize.getWidth() + previewSize.getHeight());
-                configureTransform(width, height);
-            }
-            mSensorOrientation = characteristics.get(CameraCharacteristics.SENSOR_ORIENTATION);
-            configureTransform(width, height);
-            startBackgroundThread();
-
-            manager.openCamera(cameraId, stateCallback, null);
-
-        } catch (CameraAccessException e) {
-            e.printStackTrace();
-        }
-        Log.e(TAG, "openCamera X");
-    }
-
-    private final CameraDevice.StateCallback stateCallback = new CameraDevice.StateCallback() {
-        @Override
-        public void onOpened(CameraDevice camera) {
-            // This is called when the camera is open
-            Log.e(TAG, "onOpened");
-            cameraDevice = camera;
-            createCameraPreview();
-        }
-        @Override
-        public void onDisconnected(CameraDevice camera) {
-            Log.e(TAG, "onDisconnected");
-            closeCamera();
-        }
-        @Override
-        public void onError(CameraDevice camera, int error) {
-            Log.e(TAG, "onError");
-            closeCamera();
-        }
-    };
-
-    private void configureTransform(int viewWidth, int viewHeight) {
-        if (null == textureView || null == previewSize) {
-            return;
-        }
-        int rotation = mActivity.getWindowManager().getDefaultDisplay().getRotation();
-        Matrix matrix = new Matrix();
-        RectF viewRect = new RectF(0, 0, viewWidth, viewHeight);
-        Log.e(TAG, "configureTransform() viewWidth: " + viewWidth + " viewHeight: " + viewHeight);
-        RectF bufferRect = new RectF(0, 0, previewSize.getHeight(), previewSize.getWidth());
-        float centerX = viewRect.centerX();
-        float centerY = viewRect.centerY();
-        if (Surface.ROTATION_90 == rotation || Surface.ROTATION_270 == rotation) {
-            bufferRect.offset(centerX - bufferRect.centerX(), centerY - bufferRect.centerY());
-            matrix.setRectToRect(viewRect, bufferRect, Matrix.ScaleToFit.FILL);
-            float scale = Math.max((float)viewHeight / previewSize.getHeight(),
-                                   (float)viewWidth / previewSize.getWidth());
-            matrix.postScale(scale, scale, centerX, centerY);
-            matrix.postRotate(90 * (rotation - 2), centerX, centerY);
-        } else if (Surface.ROTATION_180 == rotation) {
-            matrix.postRotate(180, centerX, centerY);
-        }
-        textureView.setTransform(matrix);
-    }
-
-    protected void createCameraPreview() {
-        try {
-            closePreviewSession();
-            SurfaceTexture texture = textureView.getSurfaceTexture();
-            if (texture == null) return;
-            settings = PreferenceManager.getDefaultSharedPreferences(mActivity);
-
-            String Key = SettingsActivity.SettingsFragment.getchangedPrefKey();
-            imageDimension = SettingsActivity.SettingsFragment.sizeFromSettingString(
-                    settings.getString("capture_list", "640x480"));
-
-            String videoQuality = settings.getString("video_list", "medium");
-            int quality = SettingsActivity.SettingsFragment.getVideoQuality(0, videoQuality);
-            Log.d(TAG, "Selected video quality for '" + videoQuality + "' is " + quality);
-
-            mProfile = CamcorderProfile.get(0, quality);
-
-            if (Key.compareTo("video_list") == 0) {
-                texture.setDefaultBufferSize(mProfile.videoFrameWidth, mProfile.videoFrameHeight);
-            } else {
-                texture.setDefaultBufferSize(imageDimension.getWidth(), imageDimension.getHeight());
-            }
-
-            Surface surface = new Surface(texture);
-            captureRequestBuilder =
-                    cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);
-            captureRequestBuilder.addTarget(surface);
-            cameraDevice.createCaptureSession(
-                    Arrays.asList(surface), new CameraCaptureSession.StateCallback() {
-                        @Override
-                        public void onConfigured(CameraCaptureSession cameraCaptureSession) {
-                            // The camera is already closed
-                            if (null == cameraDevice) {
-                                return;
-                            }
-                            // When the session is ready, we start displaying the preview.
-                            cameraCaptureSessions = cameraCaptureSession;
-                            updatePreview();
-                        }
-                        @Override
-                        public void onConfigureFailed(CameraCaptureSession cameraCaptureSession) {
-                            Toast.makeText(mActivity, "Configuration change", Toast.LENGTH_SHORT)
-                                    .show();
-                        }
-                    }, null);
-        } catch (CameraAccessException e) {
-            e.printStackTrace();
-        }
-    }
-
-    public void releaseMedia() {
-        if (null != mMediaRecorder) {
-            try {
-                mMediaRecorder.stop();
-            } catch (IllegalStateException ex) {
-                Log.d(TAG, "Stop called before start");
-            }
-            mMediaRecorder.reset();
-            mMediaRecorder.release();
-            mMediaRecorder = null;
-        }
-    }
-
-    public void closeCamera() {
-        closePreviewSession();
-        if (null != cameraDevice) {
-            cameraDevice.close();
-            cameraDevice = null;
-        }
-        if (null != imageReader) {
-            imageReader.close();
-            imageReader = null;
-        }
-        releaseMedia();
-        stopBackgroundThread();
-    }
-
-    /**
-     * Starts a background thread and its {@link Handler}.
-     */
-    private void startBackgroundThread() {
-        mBackgroundThread = new HandlerThread("Camera-4");
-        mBackgroundThread.start();
-        mBackgroundHandler = new Handler(mBackgroundThread.getLooper());
-    }
-
-    /**
-     * Stops the background thread and its {@link Handler}.
-     */
-    private void stopBackgroundThread() {
-        if (mBackgroundThread != null) {
-            mBackgroundThread.quitSafely();
-            try {
-                mBackgroundThread.join();
-                mBackgroundThread = null;
-                mBackgroundHandler = null;
-            } catch (InterruptedException e) {
-                e.printStackTrace();
-            }
-        }
-    }
-
-    protected void updatePreview() {
-        if (null == cameraDevice) {
-            Log.e(TAG, "updatePreview error, return");
-        }
-        captureRequestBuilder.set(CaptureRequest.CONTROL_MODE, CameraMetadata.CONTROL_MODE_AUTO);
-        HandlerThread thread = new HandlerThread("Camera Preview");
-        thread.start();
-        Handler handler = new Handler(thread.getLooper());
-        try {
-            cameraCaptureSessions.setRepeatingRequest(captureRequestBuilder.build(), null, handler);
-        } catch (CameraAccessException e) {
-            e.printStackTrace();
-        }
-    }
-
-    /**
-     * Retrieves the JPEG orientation from the specified screen rotation.
-     *
-     * @param rotation The screen rotation.
-     * @return The JPEG orientation (one of 0, 90, 270, and 360)
-     */
-    private int getOrientation(int rotation) {
-        // Sensor orientation is 90 for most devices, or 270 for some devices (eg. Nexus 5X)
-        // We have to take that into account and rotate JPEG properly.
-        // For devices with orientation of 90, we simply return our mapping from ORIENTATIONS.
-        // For devices with orientation of 270, we need to rotate the JPEG 180 degrees.
-        return (ORIENTATIONS.get(rotation) + mSensorOrientation + 270) % 360;
-    }
-
-    protected void takePicture() {
-        if (null == cameraDevice) {
-            Log.e(TAG, "cameraDevice is null");
-            return;
-        }
-
-        try {
-            settings = PreferenceManager.getDefaultSharedPreferences(mActivity);
-            imageDimension = SettingsActivity.SettingsFragment.sizeFromSettingString(
-                    settings.getString("capture_list", "640x480"));
-            Log.d(TAG, "Selected imageDimension" + imageDimension.getWidth() +
-                               imageDimension.getHeight());
-            ImageReader reader = ImageReader.newInstance(
-                    imageDimension.getWidth(), imageDimension.getHeight(), ImageFormat.JPEG, 1);
-            List<Surface> outputSurfaces = new ArrayList<Surface>(2);
-            outputSurfaces.add(reader.getSurface());
-            outputSurfaces.add(new Surface(textureView.getSurfaceTexture()));
-            captureRequestBuilder =
-                    cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_STILL_CAPTURE);
-            captureRequestBuilder.addTarget(reader.getSurface());
-            captureRequestBuilder.set(CaptureRequest.CONTROL_MODE,
-                                      CameraMetadata.CONTROL_MODE_AUTO);
-            // Orientation
-            int rotation = mActivity.getWindowManager().getDefaultDisplay().getRotation();
-            captureRequestBuilder.set(CaptureRequest.JPEG_ORIENTATION, getOrientation(rotation));
-
-            String fileDetails[] = Utils.generateFileDetails(Utils.MEDIA_TYPE_IMAGE);
-            if (fileDetails == null || fileDetails.length < 5) {
-                Log.e(TAG, "Invalid file details");
-                return;
-            }
-            mPictureFilename = fileDetails[3];
-            mCurrentPictureValues =
-                    Utils.getContentValues(Utils.MEDIA_TYPE_IMAGE, fileDetails,
-                                           imageDimension.getWidth(), imageDimension.getHeight());
-
-            file = new File(mPictureFilename);
-
-            ImageReader.OnImageAvailableListener readerListener =
-                    new ImageReader.OnImageAvailableListener() {
-                        @Override
-                        public void onImageAvailable(ImageReader reader) {
-                            Image image = null;
-                            try {
-                                image = reader.acquireLatestImage();
-                                ByteBuffer buffer = image.getPlanes()[0].getBuffer();
-                                byte[] bytes = new byte[buffer.capacity()];
-                                buffer.get(bytes);
-                                jpegLength = bytes;
-                                mCurrentPictureValues.put(MediaStore.Images.ImageColumns.SIZE,
-                                                          jpegLength);
-
-                                save(bytes);
-                            } catch (FileNotFoundException e) {
-                                e.printStackTrace();
-                            } catch (IOException e) {
-                                e.printStackTrace();
-                            } finally {
-                                if (image != null) {
-                                    image.close();
-                                }
-                            }
-                        }
-
-                        private void save(byte[] bytes) throws IOException {
-                            OutputStream output = null;
-                            try {
-                                output = new FileOutputStream(file);
-                                output.write(bytes);
-                            } finally {
-                                if (null != output) {
-                                    output.close();
-                                }
-                            }
-                        }
-                    };
-            reader.setOnImageAvailableListener(readerListener, mBackgroundHandler);
-            final CameraCaptureSession.CaptureCallback captureListener =
-                    new CameraCaptureSession.CaptureCallback() {
-                        @Override
-                        public void onCaptureCompleted(CameraCaptureSession session,
-                                                       CaptureRequest request,
-                                                       TotalCaptureResult result) {
-                            super.onCaptureCompleted(session, request, result);
-                            Toast.makeText(mActivity, "Saved:" + file, Toast.LENGTH_SHORT).show();
-
-                            createCameraPreview();
-                        }
-                    };
-            cameraDevice.createCaptureSession(
-                    outputSurfaces, new CameraCaptureSession.StateCallback() {
-                        @Override
-                        public void onConfigured(CameraCaptureSession session) {
-                            try {
-                                session.capture(captureRequestBuilder.build(), captureListener,
-                                                mBackgroundHandler);
-                            } catch (CameraAccessException e) {
-                                e.printStackTrace();
-                            }
-                        }
-
-                        @Override
-                        public void onConfigureFailed(CameraCaptureSession session) {
-                        }
-                    }, mBackgroundHandler);
-        } catch (CameraAccessException e) {
-            e.printStackTrace();
-        }
-    }
-
-    /* Recording Start*/
-    private void startRecordingVideo() {
-        if (null == cameraDevice || !textureView.isAvailable()) {
-            return;
-        }
-        try {
-            closePreviewSession();
-            settings = PreferenceManager.getDefaultSharedPreferences(mActivity);
-            String videoQuality = settings.getString("video_list", "medium");
-
-            int quality = SettingsActivity.SettingsFragment.getVideoQuality(0, videoQuality);
-            Log.d(TAG, "Selected video quality for '" + videoQuality + "' is " + quality);
-
-            mProfile = CamcorderProfile.get(0, quality);
-            setUpMediaRecorder();
-            SurfaceTexture texture = textureView.getSurfaceTexture();
-            if (texture == null) return;
-            texture.setDefaultBufferSize(mProfile.videoFrameWidth, mProfile.videoFrameHeight);
-
-            captureRequestBuilder = cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_RECORD);
-            List<Surface> surfaces = new ArrayList<>();
-
-            // Set up Surface for the camera preview
-            Surface previewSurface = new Surface(texture);
-            surfaces.add(previewSurface);
-            captureRequestBuilder.addTarget(previewSurface);
-
-            // Set up Surface for the MediaRecorder
-            Surface recorderSurface = mMediaRecorder.getSurface();
-            surfaces.add(recorderSurface);
-            captureRequestBuilder.addTarget(recorderSurface);
-
-            // Start a capture session
-            // Once the session starts, we can update the UI and start recording
-            cameraDevice.createCaptureSession(surfaces, new CameraCaptureSession.StateCallback() {
-                @Override
-                public void onConfigured(@NonNull CameraCaptureSession camCaptureSession) {
-                    cameraCaptureSessions = camCaptureSession;
-                    updatePreview();
-                    mActivity.runOnUiThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            // UI
-                            TakeVideoButton.setText(R.string.stop);
-                            mIsRecordingVideo = true;
-
-                            // Start recording
-                            mMediaRecorder.start();
-                        }
-                    });
-                }
-
-                @Override
-                public void onConfigureFailed(@NonNull CameraCaptureSession cameraCaptureSession) {
-                    if (null != mActivity) {
-                        Toast.makeText(mActivity, "Failed", Toast.LENGTH_SHORT).show();
-                    }
-                }
-            }, mBackgroundHandler);
-        } catch (CameraAccessException | IOException e) {
-            e.printStackTrace();
-        }
-    }
-
-    private void setUpMediaRecorder() throws IOException {
-        if (null == mActivity) {
-            return;
-        }
-
-        mMediaRecorder = new MediaRecorder();
-        mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
-        mMediaRecorder.setVideoSource(MediaRecorder.VideoSource.SURFACE);
-
-        String fileDetails[] = Utils.generateFileDetails(Utils.MEDIA_TYPE_VIDEO);
-        if (fileDetails == null || fileDetails.length < 5) {
-            Log.e(TAG, "Invalid file details");
-            return;
-        }
-        mVideoFilename = fileDetails[3];
-        mCurrentVideoValues =
-                Utils.getContentValues(Utils.MEDIA_TYPE_VIDEO, fileDetails,
-                                       mProfile.videoFrameWidth, mProfile.videoFrameHeight);
-
-        mMediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);
-        /**
-         * set output file in media recorder
-         */
-        mMediaRecorder.setOutputFile(mVideoFilename);
-        mMediaRecorder.setVideoEncodingBitRate(10000000);
-        mMediaRecorder.setVideoFrameRate(30);
-        mMediaRecorder.setVideoSize(mProfile.videoFrameWidth, mProfile.videoFrameHeight);
-        mMediaRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264);
-        mMediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);
-
-        int rotation = mActivity.getWindowManager().getDefaultDisplay().getRotation();
-        switch (mSensorOrientation) {
-            case SENSOR_ORIENTATION_DEFAULT_DEGREES:
-                mMediaRecorder.setOrientationHint(DEFAULT_ORIENTATIONS.get(rotation));
-                break;
-            case SENSOR_ORIENTATION_INVERSE_DEGREES:
-                mMediaRecorder.setOrientationHint(INVERSE_ORIENTATIONS.get(rotation));
-                break;
-        }
-        try {
-            mMediaRecorder.prepare();
-        } catch (IOException ex) {
-            Log.e(TAG, "prepare failed for " + mVideoFilename, ex);
-            releaseMedia();
-            throw new RuntimeException(ex);
-        }
-    }
-
-    private void closePreviewSession() {
-        System.out.println(" closePreviewSession");
-        if (cameraCaptureSessions != null) {
-            cameraCaptureSessions.close();
-            cameraCaptureSessions = null;
-        }
-    }
-
-    private void stopRecordingVideo() {
-        mIsRecordingVideo = false;
-        TakeVideoButton.setText(R.string.record);
-
-        // Stop recording
-        releaseMedia();
-
-        if (null != mActivity) {
-            Toast.makeText(mActivity, "Video saved: " + mVideoFilename, Toast.LENGTH_SHORT).show();
-            Log.d(TAG, "Video saved: " + mVideoFilename);
-        }
-        mVideoFilename = null;
-
-        createCameraPreview();
-    }
-}
diff --git a/camera/MultiCameraApplication/java/com/intel/multicamera/BotmLeftCam.java b/camera/MultiCameraApplication/java/com/intel/multicamera/CameraBase.java
similarity index 56%
rename from camera/MultiCameraApplication/java/com/intel/multicamera/BotmLeftCam.java
rename to camera/MultiCameraApplication/java/com/intel/multicamera/CameraBase.java
index 1d7459d..b7f9fdd 100644
--- a/camera/MultiCameraApplication/java/com/intel/multicamera/BotmLeftCam.java
+++ b/camera/MultiCameraApplication/java/com/intel/multicamera/CameraBase.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014 The Android Open Source Project
+ * Copyright (C) 2014 The Android Open Source Project
  * Copyright (c) 2019 Intel Corporation.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -17,25 +17,28 @@
 
 package com.intel.multicamera;
 
-import android.Manifest;
-import android.annotation.SuppressLint;
 import android.app.Activity;
-import android.content.*;
-import android.content.pm.PackageManager;
+import android.content.ContentValues;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.graphics.Bitmap;
 import android.graphics.ImageFormat;
 import android.graphics.Matrix;
 import android.graphics.RectF;
 import android.graphics.SurfaceTexture;
 import android.hardware.camera2.*;
 import android.hardware.camera2.params.StreamConfigurationMap;
+import android.media.AudioDeviceInfo;
+import android.media.AudioManager;
 import android.media.CamcorderProfile;
 import android.media.Image;
 import android.media.ImageReader;
 import android.media.MediaRecorder;
 import android.net.Uri;
-import android.os.Environment;
 import android.os.Handler;
 import android.os.HandlerThread;
+import android.os.Message;
+import android.os.SystemClock;
 import android.provider.MediaStore;
 import android.util.Log;
 import android.util.Size;
@@ -43,36 +46,34 @@ import android.util.SparseIntArray;
 import android.view.Surface;
 import android.view.TextureView;
 import android.view.View;
-import android.widget.Button;
+import android.widget.FrameLayout;
+import android.widget.ImageButton;
+import android.widget.ImageView;
+import android.widget.TextView;
 import android.widget.Toast;
 import androidx.annotation.NonNull;
-import androidx.core.app.ActivityCompat;
 import androidx.preference.PreferenceManager;
 import java.io.*;
 import java.nio.ByteBuffer;
-import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Date;
 import java.util.List;
-import java.util.concurrent.TimeUnit;
+import java.util.Optional;
 
-public class BotmLeftCam {
+public class CameraBase {
     Activity mActivity;
-    private static final String TAG = "BotmLeftCam";
-    private String mNextVideoAbsolutePath;
+    private String TAG;
     private CamcorderProfile mProfile;
     /**
      * An {@link AutoFitTextureView} for camera preview.
      */
     private AutoFitTextureView textureView;
-    private Button takePictureButton, TakeVideoButton;
+    private ImageButton FullScrn, SettingsView, takePictureButton, TakeVideoButton;
 
     private MediaRecorder mMediaRecorder;
     private String cameraId;
     protected CameraDevice cameraDevice;
     protected CameraCaptureSession cameraCaptureSessions;
-    protected CaptureRequest captureRequest;
     protected CaptureRequest.Builder captureRequestBuilder;
     private Size imageDimension, previewSize;
     private ImageReader imageReader;
@@ -85,6 +86,14 @@ public class BotmLeftCam {
     private static final SparseIntArray INVERSE_ORIENTATIONS = new SparseIntArray();
     private static final SparseIntArray ORIENTATIONS = new SparseIntArray();
     private SharedPreferences settings;
+    private FrameLayout frameView0;
+    private SurfaceTexture mSurfaceTexture;
+    private String Capture_Key, Video_key, SettingsKey;
+    private long mRecordingStartTime;
+    private boolean mRecordingTimeCountsDown = false;
+    private static final int MSG_UPDATE_RECORD_TIME = 5;
+    private static final String SIZE_HD = "HD 720p";
+
     /**
      * Whether the app is recording video now
      */
@@ -95,6 +104,8 @@ public class BotmLeftCam {
     private String mVideoFilename, mPictureFilename;
     private ContentValues mCurrentVideoValues, mCurrentPictureValues;
     byte[] jpegLength;
+    private final Handler mHandler;
+    private TextView mRecordingTimeView;
 
     /**
      * Orientation of the camera sensor
@@ -108,23 +119,212 @@ public class BotmLeftCam {
         ORIENTATIONS.append(Surface.ROTATION_270, 180);
     }
 
-    public BotmLeftCam(Activity activity, AutoFitTextureView textureView, Button PictureButton,
-                       Button RecordButton) {
-        Log.e(TAG, "constructor called");
+    private RoundedThumbnailView mRoundedThumbnailView;
+    FrameLayout roundedThumbnailViewControlLayout;
+
+    private Uri mCurrentUri;
+    private String[] VideofileDetails;
+
+    public CameraBase(Activity activity, AutoFitTextureView mtextureView, ImageButton[] Button,
+                      TextView RecordingTimeView, String[] data,
+                      RoundedThumbnailView roundedThumbnailView) {
         this.mActivity = activity;
-        this.textureView = textureView;
-        this.textureView.setSurfaceTextureListener(textureListener);
-        this.ClickListeners(PictureButton, RecordButton);
+        this.textureView = mtextureView;
+        this.ClickListeners(Button[0], Button[1]);
+        SettingsView = Button[2];
+        FullScrn = Button[3];
         this.settings = PreferenceManager.getDefaultSharedPreferences(activity);
+        cameraId = data[1];
+        TAG = data[0];
+        Capture_Key = data[2];
+        Video_key = data[3];
+        SettingsKey = data[4];
+        mHandler = new MainHandler();
+
+        mRecordingTimeView = RecordingTimeView;
+
+        mRoundedThumbnailView = roundedThumbnailView;
+
+        RoundedThumbnail_setOnClickListners();
+
+        roundedThumbnailViewControlLayout = mActivity.findViewById(R.id.control1);
+
+        Log.e(TAG, "constructor called");
     }
 
-    public void ClickListeners(Button PictureButton, Button RecordButton) {
+    private void RoundedThumbnail_setOnClickListners() {
+        mRoundedThumbnailView.setCallback(new RoundedThumbnailView.Callback() {
+            ImageView preView;
+
+            @Override
+            public void onHitStateFinished() {
+                ImageView preView;
+                ImageButton btnDelete, playButton, btnBack;
+                FrameLayout previewLayout;
+
+                String mimeType = Utils.getMimeTypeFromURI(mActivity, mCurrentUri);
+
+                previewLayout = mActivity.findViewById(R.id.previewLayout);
+                previewLayout.setVisibility(View.VISIBLE);
+
+                btnDelete = mActivity.findViewById(R.id.control_delete);
+                playButton = mActivity.findViewById(R.id.play_button);
+                preView = mActivity.findViewById(R.id.preview);
+                btnBack = mActivity.findViewById(R.id.control_back);
+
+                btnBack.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        FrameLayout previewLayout;
+                        previewLayout = mActivity.findViewById(R.id.previewLayout);
+                        previewLayout.setVisibility(View.GONE);
+
+                        mRoundedThumbnailView.hideThumbnail();
+                    }
+                });
+
+                btnDelete.setOnClickListener(new View.OnClickListener() {
+                    ImageView preView;
+
+                    @Override
+                    public void onClick(View v) {
+                        preView = mActivity.findViewById(R.id.preview);
+
+                        Uri uri = mCurrentUri;
+                        File file = new File(Utils.getRealPathFromURI(mActivity, uri));
+                        if (file.exists()) {
+                            Log.e(TAG, " File Deleted ");
+                            file.delete();
+                            preView.setImageResource(android.R.color.background_dark);
+                        }
+                    }
+                });
+
+                if (mimeType.compareTo("video/mp4") == 0) {
+                    VideoPreview(playButton, preView);
+
+                } else {
+                    photoPreview(playButton, preView);
+                }
+            }
+        });
+    }
+
+    private void VideoPreview(ImageButton playButton, ImageView preView) {
+        final Optional<Bitmap> bitmap =
+                Utils.getVideoThumbnail(mActivity.getContentResolver(), mCurrentUri);
+
+        playButton.setVisibility(View.VISIBLE);
+
+        playButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                Utils.playVideo(mActivity, mCurrentUri, TAG);
+            }
+        });
+
+        preView.setVisibility(View.VISIBLE);
+        preView.setImageBitmap(bitmap.get());
+    }
+
+    private void photoPreview(ImageButton playButton, ImageView preView) {
+        Uri PhotoUri = mCurrentUri;
+
+        preView.setVisibility(View.VISIBLE);
+        playButton.setVisibility(View.GONE);
+        preView.setImageURI(PhotoUri);
+    }
+
+    /**
+     * This Handler is used to post message back onto the main thread of the
+     * application.
+     */
+    private class MainHandler extends Handler {
+        @Override
+        public void handleMessage(Message msg) {
+            switch (msg.what) {
+                case MSG_UPDATE_RECORD_TIME: {
+                    updateRecordingTime();
+                    break;
+                }
+
+                default:
+                    Log.v(TAG, "Unhandled message: " + msg.what);
+                    break;
+            }
+        }
+    }
+
+    private void updateRecordingTime() {
+        if (!mIsRecordingVideo) {
+            return;
+        }
+        long now = SystemClock.uptimeMillis();
+        long delta = now - mRecordingStartTime;
+        long mMaxVideoDurationInMs;
+        mMaxVideoDurationInMs = Utils.getMaxVideoDuration(mActivity);
+
+        // Starting a minute before reaching the max duration
+        // limit, we'll countdown the remaining time instead.
+        boolean countdownRemainingTime =
+                (mMaxVideoDurationInMs != 0 && delta >= mMaxVideoDurationInMs - 60000);
+
+        long deltaAdjusted = delta;
+        if (countdownRemainingTime) {
+            deltaAdjusted = Math.max(0, mMaxVideoDurationInMs - deltaAdjusted) + 999;
+        }
+        String text;
+
+        long targetNextUpdateDelay;
+
+        text = Utils.millisecondToTimeString(deltaAdjusted, false);
+        targetNextUpdateDelay = 1000;
+
+        setRecordingTime(text);
+
+        if (mRecordingTimeCountsDown != countdownRemainingTime) {
+            // Avoid setting the color on every update, do it only
+            // when it needs changing.
+            mRecordingTimeCountsDown = countdownRemainingTime;
+
+            int color = mActivity.getResources().getColor(R.color.recording_time_remaining_text);
+
+            setRecordingTimeTextColor(color);
+        }
+
+        long actualNextUpdateDelay = targetNextUpdateDelay - (delta % targetNextUpdateDelay);
+        mHandler.sendEmptyMessageDelayed(MSG_UPDATE_RECORD_TIME, actualNextUpdateDelay);
+    }
+
+    public void setRecordingTime(String text) {
+        mRecordingTimeView.setText(text);
+    }
+
+    public void setRecordingTimeTextColor(int color) {
+        mRecordingTimeView.setTextColor(color);
+    }
+
+    public void showRecordingUI(boolean recording) {
+        if (recording) {
+            mRecordingTimeView.setText("");
+            mRecordingTimeView.setVisibility(View.VISIBLE);
+            mRecordingTimeView.announceForAccessibility(
+                    mActivity.getResources().getString(R.string.video_recording_started));
+
+        } else {
+            mRecordingTimeView.announceForAccessibility(
+                    mActivity.getResources().getString(R.string.video_recording_stopped));
+            mRecordingTimeView.setVisibility(View.GONE);
+        }
+    }
+
+    public void ClickListeners(ImageButton PictureButton, ImageButton RecordButton) {
         TakePicureOnClicked(PictureButton);
 
         StartVideoRecording(RecordButton);
     }
 
-    private void TakePicureOnClicked(Button PictureButton) {
+    private void TakePicureOnClicked(ImageButton PictureButton) {
         takePictureButton = PictureButton;
         if (takePictureButton == null) return;
 
@@ -132,25 +332,26 @@ public class BotmLeftCam {
             @Override
             public void onClick(View v) {
                 takePicture();
-                Utils.broadcastNewPicture(mActivity.getApplicationContext(), mCurrentPictureValues);
             }
         });
     }
 
-    private void StartVideoRecording(Button RecordButton) {
+    private void StartVideoRecording(ImageButton RecordButton) {
         TakeVideoButton = RecordButton;
+
         TakeVideoButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
-                // Intent i = new Intent(HomeScreenActivity.this, CameraActivity.class);
-                System.out.println(" onCreate Record0");
                 if (mIsRecordingVideo) {
                     stopRecordingVideo();
-                    Utils.broadcastNewVideo(mActivity.getApplicationContext(), mCurrentVideoValues);
+                    showRecordingUI(mIsRecordingVideo);
+                    TakeVideoButton.setImageResource(R.drawable.ic_capture_video);
                     takePictureButton.setVisibility(View.VISIBLE);
+                    SettingsView.setEnabled(true);
+                    SettingsView.setImageAlpha(200);
+
                 } else {
                     startRecordingVideo();
-                    takePictureButton.setVisibility(View.GONE);
                 }
             }
         });
@@ -160,17 +361,21 @@ public class BotmLeftCam {
         @Override
         public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {
             // open your camera here
+            mSurfaceTexture = surface;
             openCamera(width, height);
         }
+
         @Override
         public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {
             // Transform you image captured size according to the surface width and height
             configureTransform(width, height);
         }
+
         @Override
         public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {
             return false;
         }
+
         @Override
         public void onSurfaceTextureUpdated(SurfaceTexture surface) {
         }
@@ -178,39 +383,28 @@ public class BotmLeftCam {
 
     public void openCamera(int width, int height) {
         CameraManager manager = (CameraManager)mActivity.getSystemService(Context.CAMERA_SERVICE);
-        Log.e(TAG, "is camera open");
         try {
-            if (!((manager.getCameraIdList().length >= 3) &&
-                  (manager.getCameraIdList().length <= 4))) {
-                Log.e(TAG, "this camera is not connected ");
-                return;
-            }
-            cameraId = manager.getCameraIdList()[2];
-            Log.e(TAG, "is camera open ID" + cameraId);
             CameraCharacteristics characteristics = manager.getCameraCharacteristics(cameraId);
             StreamConfigurationMap map =
                     characteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
             if (map == null) return;
-
             settings = PreferenceManager.getDefaultSharedPreferences(mActivity);
-            String Key = SettingsActivity.SettingsFragment.getchangedPrefKey();
 
-            if (Key.compareTo("video_list") == 0) {
-                String videoQuality = settings.getString("video_list", "medium");
+            String Key = GetChnagedPrefKey();
+
+            if (Key.compareTo(Capture_Key) == 0) {
+                previewSize = SettingsPrefUtil.sizeFromSettingString(
+                        settings.getString(Capture_Key, "1280x720"));
+                Log.d(TAG,
+                      "Selected imageDimension" + previewSize.getWidth() + previewSize.getHeight());
+            } else {
+                String videoQuality = settings.getString(Video_key, SIZE_HD);
 
-                int quality = SettingsActivity.SettingsFragment.getVideoQuality(0, videoQuality);
+                int quality = SettingsPrefUtil.getFromSetting(videoQuality);
                 Log.d(TAG, "Selected video quality for '" + videoQuality + "' is " + quality);
 
                 mProfile = CamcorderProfile.get(0, quality);
                 previewSize = new Size(mProfile.videoFrameWidth, mProfile.videoFrameHeight);
-
-                configureTransform(width, height);
-            } else {
-                previewSize = SettingsActivity.SettingsFragment.sizeFromSettingString(
-                        settings.getString("capture_list", "640x480"));
-                Log.d(TAG,
-                      "Selected imageDimension" + previewSize.getWidth() + previewSize.getHeight());
-                configureTransform(width, height);
             }
 
             mSensorOrientation = characteristics.get(CameraCharacteristics.SENSOR_ORIENTATION);
@@ -222,7 +416,7 @@ public class BotmLeftCam {
         } catch (CameraAccessException e) {
             e.printStackTrace();
         }
-        Log.e(TAG, "openCamera X");
+        Log.e(TAG, "openCamera");
     }
 
     private final CameraDevice.StateCallback stateCallback = new CameraDevice.StateCallback() {
@@ -231,20 +425,63 @@ public class BotmLeftCam {
             // This is called when the camera is open
             Log.e(TAG, "onOpened");
             cameraDevice = camera;
+            Ui_Enable(true);
             createCameraPreview();
         }
+
         @Override
         public void onDisconnected(CameraDevice camera) {
             Log.e(TAG, "onDisconnected");
             closeCamera();
+            Ui_Enable(false);
         }
+
         @Override
         public void onError(CameraDevice camera, int error) {
             Log.e(TAG, "onError");
             closeCamera();
+            Ui_Enable(false);
+        }
+
+        @Override
+        public void onClosed(@NonNull CameraDevice camera) {
+            Log.e(TAG, "onClose");
+            super.onClosed(camera);
+            SurfaceUtil.clear(mSurfaceTexture);
+            Ui_Enable(false);
+            ResetResolutionSettings();
         }
     };
 
+    private void ResetResolutionSettings() {
+        SharedPreferences.Editor edit = settings.edit();
+        edit.remove(Capture_Key);
+        edit.remove(Video_key);
+        edit.commit();
+    }
+
+    private void Ui_Enable(boolean flag) {
+        TakeVideoButton.setEnabled(flag);
+
+        takePictureButton.setEnabled(flag);
+
+        SettingsView.setEnabled(flag);
+
+        FullScrn.setEnabled(flag);
+
+        if (flag) {
+            TakeVideoButton.setImageResource(R.drawable.ic_capture_video);
+            takePictureButton.setImageResource(R.drawable.ic_capture_camera_normal);
+            SettingsView.setImageAlpha(200);
+            FullScrn.setImageAlpha(200);
+        } else {
+            TakeVideoButton.setImageResource(R.drawable.ic_capture_video_disabled);
+            takePictureButton.setImageResource(R.drawable.ic_capture_camera_disabled);
+            SettingsView.setImageAlpha(95);
+            FullScrn.setImageAlpha(95);
+        }
+    }
+
     private void configureTransform(int viewWidth, int viewHeight) {
         if (null == textureView || null == previewSize) {
             return;
@@ -252,7 +489,10 @@ public class BotmLeftCam {
         int rotation = mActivity.getWindowManager().getDefaultDisplay().getRotation();
         Matrix matrix = new Matrix();
         RectF viewRect = new RectF(0, 0, viewWidth, viewHeight);
-        Log.e(TAG, "configureTransform() viewWidth: " + viewWidth + " viewHeight: " + viewHeight);
+        Log.e(TAG, "configureTransform() viewWidth: " + viewWidth + " viewHeight: " + viewHeight +
+                           "previewWidth: " + previewSize.getWidth() +
+                           "previewHeight:" + previewSize.getHeight());
+
         RectF bufferRect = new RectF(0, 0, previewSize.getHeight(), previewSize.getWidth());
         float centerX = viewRect.centerX();
         float centerY = viewRect.centerY();
@@ -269,25 +509,68 @@ public class BotmLeftCam {
         textureView.setTransform(matrix);
     }
 
+    /**
+     * Retrieve a setting's value as a String, manually specifiying
+     * a default value.
+     */
+    public String getString(String key, String defaultValue) {
+        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(mActivity);
+        try {
+            return preferences.getString(key, defaultValue);
+        } catch (ClassCastException e) {
+            Log.w(TAG, "existing preference with invalid type,removing and returning default", e);
+            preferences.edit().remove(key).apply();
+            return defaultValue;
+        }
+    }
+
+    public String GetChnagedPrefKey() {
+        String Key = null;
+
+        switch (SettingsKey) {
+            case "pref_resolution":
+                Key = getString(SettingsKey, "capture_list");
+                break;
+            case "pref_resolution_1":
+                Key = getString(SettingsKey, "capture_list_1");
+                break;
+            case "pref_resolution_2":
+                Key = getString(SettingsKey, "capture_list_2");
+                break;
+            case "pref_resolution_3":
+                Key = getString(SettingsKey, "capture_list_3");
+                break;
+            default:
+                break;
+        }
+
+        return Key;
+    }
+
     protected void createCameraPreview() {
         try {
             closePreviewSession();
             SurfaceTexture texture = textureView.getSurfaceTexture();
             if (texture == null) return;
+
             settings = PreferenceManager.getDefaultSharedPreferences(mActivity);
-            String Key = SettingsActivity.SettingsFragment.getchangedPrefKey();
 
-            imageDimension = SettingsActivity.SettingsFragment.sizeFromSettingString(
-                    settings.getString("capture_list", "640x480"));
-            String videoQuality = settings.getString("video_list", "medium");
+            String Key = GetChnagedPrefKey();
 
-            int quality = SettingsActivity.SettingsFragment.getVideoQuality(0, videoQuality);
+            imageDimension = SettingsPrefUtil.sizeFromSettingString(
+                    settings.getString(Capture_Key, "1280x720"));
+            String videoQuality = settings.getString(Video_key, SIZE_HD);
+
+            int quality = SettingsPrefUtil.getFromSetting(videoQuality);
             Log.d(TAG, "Selected video quality for '" + videoQuality + "' is " + quality);
 
             mProfile = CamcorderProfile.get(0, quality);
-            if (Key.compareTo("video_list") == 0) {
+
+            if (Key.compareTo(Video_key) == 0) {
+                previewSize = new Size(mProfile.videoFrameWidth, mProfile.videoFrameHeight);
                 texture.setDefaultBufferSize(mProfile.videoFrameWidth, mProfile.videoFrameHeight);
             } else {
+                previewSize = imageDimension;
                 texture.setDefaultBufferSize(imageDimension.getWidth(), imageDimension.getHeight());
             }
 
@@ -307,8 +590,10 @@ public class BotmLeftCam {
                             cameraCaptureSessions = cameraCaptureSession;
                             updatePreview();
                         }
+
                         @Override
                         public void onConfigureFailed(CameraCaptureSession cameraCaptureSession) {
+                            closeCamera();
                             Toast.makeText(mActivity, "Configuration change", Toast.LENGTH_SHORT)
                                     .show();
                         }
@@ -318,19 +603,6 @@ public class BotmLeftCam {
         }
     }
 
-    public void releaseMedia() {
-        if (null != mMediaRecorder) {
-            try {
-                mMediaRecorder.stop();
-            } catch (IllegalStateException ex) {
-                Log.d(TAG, "Stop called before start");
-            }
-            mMediaRecorder.reset();
-            mMediaRecorder.release();
-            mMediaRecorder = null;
-        }
-    }
-
     public void closeCamera() {
         closePreviewSession();
         if (null != cameraDevice) {
@@ -349,7 +621,7 @@ public class BotmLeftCam {
      * Starts a background thread and its {@link Handler}.
      */
     private void startBackgroundThread() {
-        mBackgroundThread = new HandlerThread("Camera-3");
+        mBackgroundThread = new HandlerThread("Camera_1");
         mBackgroundThread.start();
         mBackgroundHandler = new Handler(mBackgroundThread.getLooper());
     }
@@ -407,8 +679,8 @@ public class BotmLeftCam {
 
         try {
             settings = PreferenceManager.getDefaultSharedPreferences(mActivity);
-            imageDimension = SettingsActivity.SettingsFragment.sizeFromSettingString(
-                    settings.getString("capture_list", "640x480"));
+            imageDimension = SettingsPrefUtil.sizeFromSettingString(
+                    settings.getString(Capture_Key, "1280x720"));
             Log.d(TAG, "Selected imageDimension" + imageDimension.getWidth() +
                                imageDimension.getHeight());
             ImageReader reader = ImageReader.newInstance(
@@ -416,6 +688,10 @@ public class BotmLeftCam {
             List<Surface> outputSurfaces = new ArrayList<Surface>(2);
             outputSurfaces.add(reader.getSurface());
             outputSurfaces.add(new Surface(textureView.getSurfaceTexture()));
+
+            textureView.getSurfaceTexture().setDefaultBufferSize(imageDimension.getWidth(),
+                                                                 imageDimension.getHeight());
+
             captureRequestBuilder =
                     cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_STILL_CAPTURE);
             captureRequestBuilder.addTarget(reader.getSurface());
@@ -423,17 +699,15 @@ public class BotmLeftCam {
                                       CameraMetadata.CONTROL_MODE_AUTO);
             // Orientation
             int rotation = mActivity.getWindowManager().getDefaultDisplay().getRotation();
+            final int mRotation = rotation;
             captureRequestBuilder.set(CaptureRequest.JPEG_ORIENTATION, getOrientation(rotation));
 
-            String fileDetails[] = Utils.generateFileDetails(Utils.MEDIA_TYPE_IMAGE);
+            final String fileDetails[] = Utils.generateFileDetails(Utils.MEDIA_TYPE_IMAGE);
             if (fileDetails == null || fileDetails.length < 5) {
                 Log.e(TAG, "Invalid file details");
                 return;
             }
             mPictureFilename = fileDetails[3];
-            mCurrentPictureValues =
-                    Utils.getContentValues(Utils.MEDIA_TYPE_IMAGE, fileDetails,
-                                           imageDimension.getWidth(), imageDimension.getHeight());
 
             file = new File(mPictureFilename);
 
@@ -447,9 +721,6 @@ public class BotmLeftCam {
                                 ByteBuffer buffer = image.getPlanes()[0].getBuffer();
                                 byte[] bytes = new byte[buffer.capacity()];
                                 buffer.get(bytes);
-                                jpegLength = bytes;
-                                mCurrentPictureValues.put(MediaStore.Images.ImageColumns.SIZE,
-                                                          jpegLength);
 
                                 save(bytes);
                             } catch (FileNotFoundException e) {
@@ -483,7 +754,34 @@ public class BotmLeftCam {
                                                        CaptureRequest request,
                                                        TotalCaptureResult result) {
                             super.onCaptureCompleted(session, request, result);
-                            Toast.makeText(mActivity, "Saved:" + file, Toast.LENGTH_SHORT).show();
+
+                            mCurrentPictureValues = Utils.getContentValues(
+                                    Utils.MEDIA_TYPE_IMAGE, fileDetails, imageDimension.getWidth(),
+                                    imageDimension.getHeight(), 0, file.length());
+
+                            Utils.broadcastNewPicture(mActivity.getApplicationContext(),
+                                                      mCurrentPictureValues);
+
+                            mCurrentUri = Utils.getCurrentPictureUri();
+
+                            final Optional<Bitmap> bitmap = Utils.generateThumbnail(
+                                    file, roundedThumbnailViewControlLayout.getWidth(),
+                                    roundedThumbnailViewControlLayout.getMeasuredHeight());
+
+                            if (bitmap.isPresent()) {
+                                mActivity.runOnUiThread(new Runnable() {
+                                    @Override
+                                    public void run() {
+                                        mRoundedThumbnailView.startRevealThumbnailAnimation(
+                                                "photo taken");
+                                        mRoundedThumbnailView.setThumbnail(
+                                                bitmap.get(), getOrientation(mRotation));
+                                    }
+                                });
+
+                            } else {
+                                Log.e(TAG, "No bitmap image found: ");
+                            }
 
                             createCameraPreview();
                         }
@@ -517,9 +815,9 @@ public class BotmLeftCam {
         try {
             closePreviewSession();
             settings = PreferenceManager.getDefaultSharedPreferences(mActivity);
-            String videoQuality = settings.getString("video_list", "medium");
+            String videoQuality = settings.getString(Video_key, SIZE_HD);
 
-            int quality = SettingsActivity.SettingsFragment.getVideoQuality(0, videoQuality);
+            int quality = SettingsPrefUtil.getFromSetting(videoQuality);
             Log.d(TAG, "Selected video quality for '" + videoQuality + "' is " + quality);
 
             mProfile = CamcorderProfile.get(0, quality);
@@ -552,11 +850,17 @@ public class BotmLeftCam {
                         @Override
                         public void run() {
                             // UI
-                            TakeVideoButton.setText(R.string.stop);
                             mIsRecordingVideo = true;
 
                             // Start recording
                             mMediaRecorder.start();
+                            mRecordingStartTime = SystemClock.uptimeMillis();
+                            takePictureButton.setVisibility(View.GONE);
+                            SettingsView.setEnabled(false);
+                            SettingsView.setImageAlpha(95);
+                            showRecordingUI(mIsRecordingVideo);
+                            TakeVideoButton.setImageResource(R.drawable.ic_stop_normal);
+                            updateRecordingTime();
                         }
                     });
                 }
@@ -564,8 +868,10 @@ public class BotmLeftCam {
                 @Override
                 public void onConfigureFailed(@NonNull CameraCaptureSession cameraCaptureSession) {
                     if (null != mActivity) {
-                        Toast.makeText(mActivity, "Failed", Toast.LENGTH_SHORT).show();
+                        Toast.makeText(mActivity, "Recording Failed", Toast.LENGTH_SHORT).show();
                     }
+
+                    releaseMedia();
                 }
             }, mBackgroundHandler);
         } catch (CameraAccessException | IOException e) {
@@ -582,28 +888,43 @@ public class BotmLeftCam {
         mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
         mMediaRecorder.setVideoSource(MediaRecorder.VideoSource.SURFACE);
 
-        String fileDetails[] = Utils.generateFileDetails(Utils.MEDIA_TYPE_VIDEO);
-        if (fileDetails == null || fileDetails.length < 5) {
+        {
+            Context mContext = mActivity.getApplicationContext();
+            AudioManager mAudioManager =
+                    (AudioManager)mContext.getSystemService(Context.AUDIO_SERVICE);
+            AudioDeviceInfo[] deviceList =
+                    mAudioManager.getDevices(AudioManager.GET_DEVICES_INPUTS);
+            for (int index = 0; index < deviceList.length; index++) {
+                if (deviceList[index].getType() == AudioDeviceInfo.TYPE_USB_DEVICE) {
+                    mMediaRecorder.setPreferredDevice(deviceList[index]);
+                    break;
+                }
+            }
+        }
+
+        VideofileDetails = Utils.generateFileDetails(Utils.MEDIA_TYPE_VIDEO);
+        if (VideofileDetails == null || VideofileDetails.length < 5) {
             Log.e(TAG, "Invalid file details");
             return;
         }
-        mVideoFilename = fileDetails[3];
-        mCurrentVideoValues =
-                Utils.getContentValues(Utils.MEDIA_TYPE_VIDEO, fileDetails,
-                                       mProfile.videoFrameWidth, mProfile.videoFrameHeight);
+
+        mVideoFilename = VideofileDetails[3];
+        file = new File(mVideoFilename);
 
         mMediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);
         /**
          * set output file in media recorder
          */
         mMediaRecorder.setOutputFile(mVideoFilename);
+
         mMediaRecorder.setVideoEncodingBitRate(10000000);
-        mMediaRecorder.setVideoFrameRate(30);
+        mMediaRecorder.setVideoFrameRate(mProfile.videoFrameRate);
         mMediaRecorder.setVideoSize(mProfile.videoFrameWidth, mProfile.videoFrameHeight);
         mMediaRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264);
         mMediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);
 
         int rotation = mActivity.getWindowManager().getDefaultDisplay().getRotation();
+
         switch (mSensorOrientation) {
             case SENSOR_ORIENTATION_DEFAULT_DEGREES:
                 mMediaRecorder.setOrientationHint(DEFAULT_ORIENTATIONS.get(rotation));
@@ -629,17 +950,55 @@ public class BotmLeftCam {
         }
     }
 
+    public void releaseMedia() {
+        if (null != mMediaRecorder) {
+            try {
+                mMediaRecorder.stop();
+            } catch (IllegalStateException ex) {
+                Log.d(TAG, "Stop called before start");
+            }
+            mMediaRecorder.reset();
+            mMediaRecorder.release();
+            mMediaRecorder = null;
+        }
+    }
+
+    private void saveVideo() {
+        long duration = SystemClock.uptimeMillis() - mRecordingStartTime;
+        if (duration > 0) {
+            //
+        } else {
+            Log.w(TAG, "Video duration <= 0 : " + duration);
+        }
+
+        mCurrentVideoValues = Utils.getContentValues(
+                Utils.MEDIA_TYPE_VIDEO, VideofileDetails, mProfile.videoFrameWidth,
+                mProfile.videoFrameHeight, duration, new File(mVideoFilename).length());
+
+        Utils.broadcastNewVideo(mActivity.getApplicationContext(), mCurrentVideoValues);
+    }
+
     private void stopRecordingVideo() {
+        mHandler.removeMessages(MSG_UPDATE_RECORD_TIME);
         mIsRecordingVideo = false;
-        TakeVideoButton.setText(R.string.record);
 
-        // Stop recording
         releaseMedia();
 
-        if (null != mActivity) {
-            Toast.makeText(mActivity, "Video saved: " + mVideoFilename, Toast.LENGTH_SHORT).show();
-            Log.d(TAG, "Video saved: " + mVideoFilename);
+        saveVideo();
+
+        mCurrentUri = Utils.getCurrentVideoUri();
+
+        mRoundedThumbnailView.startRevealThumbnailAnimation("Video taken");
+
+        final Optional<Bitmap> bitmap =
+                Utils.getVideoThumbnail(mActivity.getContentResolver(), mCurrentUri);
+
+        if (bitmap.isPresent()) {
+            mRoundedThumbnailView.setThumbnail(bitmap.get(), 0);
+        } else {
+            Log.e(TAG, "No bitmap image found: ");
         }
+
         mVideoFilename = null;
 
         createCameraPreview();
diff --git a/camera/MultiCameraApplication/java/com/intel/multicamera/TopLeftCam.java b/camera/MultiCameraApplication/java/com/intel/multicamera/CtsCamIntents.java
similarity index 71%
rename from camera/MultiCameraApplication/java/com/intel/multicamera/TopLeftCam.java
rename to camera/MultiCameraApplication/java/com/intel/multicamera/CtsCamIntents.java
index 83c95d9..e888cbb 100644
--- a/camera/MultiCameraApplication/java/com/intel/multicamera/TopLeftCam.java
+++ b/camera/MultiCameraApplication/java/com/intel/multicamera/CtsCamIntents.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014 The Android Open Source Project
+ * Copyright (C) 2014 The Android Open Source Project
  * Copyright (c) 2019 Intel Corporation.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -17,11 +17,9 @@
 
 package com.intel.multicamera;
 
-import android.Manifest;
-import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.content.*;
-import android.content.pm.PackageManager;
+import android.graphics.Bitmap;
 import android.graphics.ImageFormat;
 import android.graphics.Matrix;
 import android.graphics.RectF;
@@ -34,10 +32,11 @@ import android.media.ImageReader;
 import android.media.MediaRecorder;
 import android.net.Uri;
 import android.os.Bundle;
-import android.os.Environment;
 import android.os.Handler;
 import android.os.HandlerThread;
+import android.os.Message;
 import android.os.ParcelFileDescriptor;
+import android.os.SystemClock;
 import android.provider.MediaStore;
 import android.util.Log;
 import android.util.Size;
@@ -45,38 +44,36 @@ import android.util.SparseIntArray;
 import android.view.Surface;
 import android.view.TextureView;
 import android.view.View;
-import android.widget.Button;
+import android.widget.FrameLayout;
+import android.widget.ImageButton;
+import android.widget.ImageView;
+import android.widget.TextView;
 import android.widget.Toast;
 import androidx.annotation.NonNull;
-import androidx.core.app.ActivityCompat;
 import androidx.preference.PreferenceManager;
 import java.io.*;
 import java.nio.ByteBuffer;
-import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Date;
 import java.util.List;
-import java.util.concurrent.TimeUnit;
+import java.util.Optional;
 
-public class TopLeftCam {
+public class CtsCamIntents {
     Activity mActivity;
-    private static final String TAG = "TopLeftCam";
-    private String mNextVideoAbsolutePath;
+    private static final String TAG = "CtsCamIntents";
     private CamcorderProfile mProfile;
     /**
      * An {@link AutoFitTextureView} for camera preview.
      */
     private AutoFitTextureView textureView;
-    private Button takePictureButton, TakeVideoButton;
+    private ImageView takePictureButton, TakeVideoButton;
 
     private MediaRecorder mMediaRecorder;
     private String cameraId;
     protected CameraDevice cameraDevice;
     protected CameraCaptureSession cameraCaptureSessions;
-    protected CaptureRequest captureRequest;
     protected CaptureRequest.Builder captureRequestBuilder;
-    private Size imageDimension, previewSize;
+    private Size previewSize;
     private ImageReader imageReader;
     private File file;
     private Handler mBackgroundHandler;
@@ -89,10 +86,19 @@ public class TopLeftCam {
     private SharedPreferences settings;
     private Uri mCurrentVideoUri = null;
     private ParcelFileDescriptor mVideoFileDescriptor = null;
+    private SurfaceTexture mSurfaceTexture;
+    private Surface mOutPutSurface;
+    private FrameLayout frameView0;
+    private long mRecordingStartTime;
+    private boolean mRecordingTimeCountsDown = false;
+    private static final int MSG_UPDATE_RECORD_TIME = 5;
+    private TextView mRecordingTimeView;
+    private final Handler mHandler;
+
     /**
      * Whether the app is recording video now
      */
-    private boolean mIsRecordingVideo, onDoneClicked;
+    private boolean mIsRecordingVideo;
 
     // The video file that the hardware camera is about to record into
     // (or is recording into.
@@ -100,7 +106,7 @@ public class TopLeftCam {
     private ContentValues mCurrentVideoValues, mCurrentPictureValues;
     byte[] jpegLength;
 
-    private boolean mIsVideoCaptureIntent, mIsImageCaptureIntent, mIsonDoneClicked;
+    private boolean mIsVideoCaptureIntent, mIsImageCaptureIntent;
     /**
      * Orientation of the camera sensor
      */
@@ -113,21 +119,107 @@ public class TopLeftCam {
         ORIENTATIONS.append(Surface.ROTATION_270, 180);
     }
 
-    public TopLeftCam(Activity activity, AutoFitTextureView textureView, Button PictureButton,
-                      Button RecordButton) {
+    private String[] VideofileDetails;
+
+    public CtsCamIntents(Activity activity, AutoFitTextureView mtextureView,
+                         ImageView PictureButton, ImageView RecordButton,
+                         TextView RecordingTimeView) {
         Log.e(TAG, "constructor called");
         this.mActivity = activity;
 
-        onDoneClicked = false;
         mIsRecordingVideo = false;
 
         mIsVideoCaptureIntent = isVideoCaptureIntent();
         mIsImageCaptureIntent = isImageCaptureIntent();
 
-        this.textureView = textureView;
-        this.textureView.setSurfaceTextureListener(textureListener);
+        this.textureView = mtextureView;
         this.ClickListeners(PictureButton, RecordButton);
         this.settings = PreferenceManager.getDefaultSharedPreferences(activity);
+        mRecordingTimeView = RecordingTimeView;
+        mHandler = new MainHandler();
+    }
+
+    /**
+     * This Handler is used to post message back onto the main thread of the
+     * application.
+     */
+    private class MainHandler extends Handler {
+        @Override
+        public void handleMessage(Message msg) {
+            switch (msg.what) {
+                case MSG_UPDATE_RECORD_TIME: {
+                    updateRecordingTime();
+                    break;
+                }
+
+                default:
+                    Log.v(TAG, "Unhandled message: " + msg.what);
+                    break;
+            }
+        }
+    }
+
+    private void updateRecordingTime() {
+        if (!mIsRecordingVideo) {
+            return;
+        }
+        long now = SystemClock.uptimeMillis();
+        long delta = now - mRecordingStartTime;
+        long mMaxVideoDurationInMs;
+        mMaxVideoDurationInMs = Utils.getMaxVideoDuration(mActivity);
+
+        // Starting a minute before reaching the max duration
+        // limit, we'll countdown the remaining time instead.
+        boolean countdownRemainingTime =
+                (mMaxVideoDurationInMs != 0 && delta >= mMaxVideoDurationInMs - 60000);
+
+        long deltaAdjusted = delta;
+        if (countdownRemainingTime) {
+            deltaAdjusted = Math.max(0, mMaxVideoDurationInMs - deltaAdjusted) + 999;
+        }
+        String text;
+
+        long targetNextUpdateDelay;
+
+        text = Utils.millisecondToTimeString(deltaAdjusted, false);
+        targetNextUpdateDelay = 1000;
+
+        setRecordingTime(text);
+
+        if (mRecordingTimeCountsDown != countdownRemainingTime) {
+            // Avoid setting the color on every update, do it only
+            // when it needs changing.
+            mRecordingTimeCountsDown = countdownRemainingTime;
+
+            int color = mActivity.getResources().getColor(R.color.recording_time_remaining_text);
+
+            setRecordingTimeTextColor(color);
+        }
+
+        long actualNextUpdateDelay = targetNextUpdateDelay - (delta % targetNextUpdateDelay);
+        mHandler.sendEmptyMessageDelayed(MSG_UPDATE_RECORD_TIME, actualNextUpdateDelay);
+    }
+
+    public void setRecordingTime(String text) {
+        mRecordingTimeView.setText(text);
+    }
+
+    public void setRecordingTimeTextColor(int color) {
+        mRecordingTimeView.setTextColor(color);
+    }
+
+    public void showRecordingUI(boolean recording) {
+        if (recording) {
+            mRecordingTimeView.announceForAccessibility(
+                    mActivity.getResources().getString(R.string.video_recording_stopped));
+            mRecordingTimeView.setVisibility(View.GONE);
+
+        } else {
+            mRecordingTimeView.setText("");
+            mRecordingTimeView.setVisibility(View.VISIBLE);
+            mRecordingTimeView.announceForAccessibility(
+                    mActivity.getResources().getString(R.string.video_recording_started));
+        }
     }
 
     public boolean isVideoCaptureIntent() {
@@ -140,73 +232,78 @@ public class TopLeftCam {
         return (MediaStore.ACTION_IMAGE_CAPTURE.equals(action));
     }
 
-    public void ClickListeners(Button PictureButton, Button RecordButton) {
+    public void ClickListeners(ImageView PictureButton, ImageView RecordButton) {
         TakePictureOnClicked(PictureButton);
 
         StartVideoRecording(RecordButton);
     }
 
-    private void TakePictureOnClicked(Button PictureButton) {
+    private void TakePictureOnClicked(ImageView PictureButton) {
         takePictureButton = PictureButton;
         if (takePictureButton == null) return;
 
         takePictureButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                if (!onDoneClicked) {
-                    onDoneClicked = false;
-
-                    takePicture();
-
-                    if (mIsImageCaptureIntent) {
-                        onDoneClicked = true;
-                        takePictureButton.setText(R.string.done);
-                    } else {
-                        Utils.broadcastNewPicture(mActivity.getApplicationContext(),
-                                                  mCurrentPictureValues);
-                    }
+                takePicture();
 
-                } else if (mIsImageCaptureIntent) {
+                if (!mIsImageCaptureIntent) {
+                    Utils.broadcastNewPicture(mActivity.getApplicationContext(),
+                                              mCurrentPictureValues);
+                } else {
                     mIsImageCaptureIntent = false;
-                    onDoneClicked = false;
-                    onDoneClicked();
                 }
             }
         });
     }
 
-    private void StartVideoRecording(Button RecordButton) {
+    private void StartVideoRecording(ImageView RecordButton) {
         TakeVideoButton = RecordButton;
         TakeVideoButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
-                if (mIsonDoneClicked) {
-                    mIsonDoneClicked = false;
-                    onDoneClicked();
-                } else if (mIsRecordingVideo == true) {
+                if (mIsRecordingVideo == true) {
+                    showRecordingUI(mIsRecordingVideo);
                     stopRecordingVideo();
 
-                    if (!mIsVideoCaptureIntent) takePictureButton.setVisibility(View.VISIBLE);
-
                     if (mIsVideoCaptureIntent) {
+                        FrameLayout previewLayout =
+                                mActivity.findViewById(R.id.intentPreviewLayout);
+                        previewLayout.setVisibility(View.VISIBLE);
+                        VideoPreview((ImageView)mActivity.findViewById(R.id.IntentPreview));
+
+                        ImageButton IntentDone = mActivity.findViewById(R.id.IntentDone);
+
+                        IntentDone.setOnClickListener(new View.OnClickListener() {
+                            @Override
+                            public void onClick(View view) {
+                                doReturnToCaller(true);
+                            }
+                        });
                         mIsVideoCaptureIntent = false;
-                        TakeVideoButton.setText(R.string.done);
-                        mIsonDoneClicked = true;
-                    } else {
-                        Utils.broadcastNewVideo(mActivity.getApplicationContext(),
-                                                mCurrentVideoValues);
                     }
 
                 } else if (mIsRecordingVideo == false) {
+                    TakeVideoButton.setImageResource(R.drawable.ic_stop_normal);
                     startRecordingVideo();
+                    showRecordingUI(mIsRecordingVideo);
                     takePictureButton.setVisibility(View.GONE);
                 }
             }
         });
     }
 
-    public void onDoneClicked() {
-        doReturnToCaller(true);
+    private void VideoPreview(ImageView preView) {
+        final Optional<Bitmap> bitmap =
+                Utils.getVideoThumbnail(mActivity.getContentResolver(), mCurrentVideoUri);
+
+        preView.setVisibility(View.VISIBLE);
+        preView.setImageBitmap(bitmap.get());
+    }
+
+    private void photoPreview(ImageView preView, Uri PhotoUri) {
+        preView.setVisibility(View.VISIBLE);
+        preView.setImageURI(PhotoUri);
     }
 
     private void doReturnToCaller(boolean valid) {
@@ -231,17 +328,23 @@ public class TopLeftCam {
         @Override
         public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {
             // open your camera here
+            mSurfaceTexture = surface;
+            // Surface mSurface = new Surface(mSurfaceTexture);
+            // mSurface.release();
             openCamera(width, height);
         }
+
         @Override
         public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {
             // Transform you image captured size according to the surface width and height
             configureTransform(width, height);
         }
+
         @Override
         public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {
             return false;
         }
+
         @Override
         public void onSurfaceTextureUpdated(SurfaceTexture surface) {
         }
@@ -249,40 +352,18 @@ public class TopLeftCam {
 
     public void openCamera(int width, int height) {
         CameraManager manager = (CameraManager)mActivity.getSystemService(Context.CAMERA_SERVICE);
-        Log.e(TAG, "is camera open");
         try {
-            if (!((manager.getCameraIdList().length >= 1) &&
-                  (manager.getCameraIdList().length <= 4))) {
-                Log.e(TAG, "this camera is not connected ");
-                return;
-            }
-
             cameraId = manager.getCameraIdList()[0];
-            Log.e(TAG, "is camera open ID" + cameraId);
             CameraCharacteristics characteristics = manager.getCameraCharacteristics(cameraId);
             StreamConfigurationMap map =
                     characteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
             if (map == null) return;
-            settings = PreferenceManager.getDefaultSharedPreferences(mActivity);
-            String Key = SettingsActivity.SettingsFragment.getchangedPrefKey();
-
-            if (Key.compareTo("video_list") == 0) {
-                String videoQuality = settings.getString("video_list", "medium");
 
-                int quality = SettingsActivity.SettingsFragment.getVideoQuality(0, videoQuality);
-                Log.d(TAG, "Selected video quality for '" + videoQuality + "' is " + quality);
+            int total_psizes = map.getOutputSizes(ImageFormat.JPEG).length;
 
-                mProfile = CamcorderProfile.get(0, quality);
-                previewSize = new Size(mProfile.videoFrameWidth, mProfile.videoFrameHeight);
-
-                configureTransform(width, height);
-            } else {
-                previewSize = SettingsActivity.SettingsFragment.sizeFromSettingString(
-                        settings.getString("capture_list", "640x480"));
-                Log.d(TAG,
-                      "Selected imageDimension" + previewSize.getWidth() + previewSize.getHeight());
-                configureTransform(width, height);
-            }
+            previewSize = map.getOutputSizes(SurfaceTexture.class)[total_psizes - 1];
+            Log.d(TAG, "camera preview width: " + previewSize.getWidth() +
+                               " preview height: " + previewSize.getHeight());
 
             mSensorOrientation = characteristics.get(CameraCharacteristics.SENSOR_ORIENTATION);
 
@@ -294,7 +375,7 @@ public class TopLeftCam {
         } catch (CameraAccessException e) {
             e.printStackTrace();
         }
-        Log.e(TAG, "openCamera X");
+        Log.e(TAG, "openCamera");
     }
 
     private final CameraDevice.StateCallback stateCallback = new CameraDevice.StateCallback() {
@@ -305,17 +386,28 @@ public class TopLeftCam {
             cameraDevice = camera;
             createCameraPreview();
         }
+
         @Override
         public void onDisconnected(CameraDevice camera) {
             Log.e(TAG, "onDisconnected");
 
+            frameView0 = mActivity.findViewById(R.id.control1);
+            frameView0.setVisibility(FrameLayout.INVISIBLE);
             closeCamera();
         }
+
         @Override
         public void onError(CameraDevice camera, int error) {
             Log.e(TAG, "onError");
             closeCamera();
         }
+
+        @Override
+        public void onClosed(@NonNull CameraDevice camera) {
+            Log.e(TAG, "onClose");
+            super.onClosed(camera);
+            SurfaceUtil.clear(mSurfaceTexture);
+        }
     };
 
     private void configureTransform(int viewWidth, int viewHeight) {
@@ -325,7 +417,9 @@ public class TopLeftCam {
         int rotation = mActivity.getWindowManager().getDefaultDisplay().getRotation();
         Matrix matrix = new Matrix();
         RectF viewRect = new RectF(0, 0, viewWidth, viewHeight);
-        Log.e(TAG, "configureTransform() viewWidth: " + viewWidth + " viewHeight: " + viewHeight);
+        Log.e(TAG, "configureTransform() viewWidth: " + viewWidth + " viewHeight: " + viewHeight +
+                           "previewWidth: " + previewSize.getWidth() +
+                           "previewHeight:" + previewSize.getHeight());
         RectF bufferRect = new RectF(0, 0, previewSize.getHeight(), previewSize.getWidth());
         float centerX = viewRect.centerX();
         float centerY = viewRect.centerY();
@@ -347,26 +441,11 @@ public class TopLeftCam {
             closePreviewSession();
             SurfaceTexture texture = textureView.getSurfaceTexture();
             if (texture == null) return;
-            int quality = -1;
-            settings = PreferenceManager.getDefaultSharedPreferences(mActivity);
-            String Key = SettingsActivity.SettingsFragment.getchangedPrefKey();
-            String videoQuality = settings.getString("video_list", "medium");
 
-            imageDimension = SettingsActivity.SettingsFragment.sizeFromSettingString(
-                    settings.getString("capture_list", "640x480"));
-
-            quality = SettingsActivity.SettingsFragment.getVideoQuality(0, videoQuality);
-            Log.d(TAG, "Selected video quality for '" + videoQuality + "' is " + quality);
-
-            mProfile = CamcorderProfile.get(0, quality);
-
-            if (Key.compareTo("video_list") == 0) {
-                texture.setDefaultBufferSize(mProfile.videoFrameWidth, mProfile.videoFrameHeight);
-            } else {
-                texture.setDefaultBufferSize(imageDimension.getWidth(), imageDimension.getHeight());
-            }
+            texture.setDefaultBufferSize(previewSize.getWidth(), previewSize.getHeight());
 
             Surface surface = new Surface(texture);
+            mOutPutSurface = surface;
             captureRequestBuilder =
                     cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);
             captureRequestBuilder.addTarget(surface);
@@ -382,8 +461,10 @@ public class TopLeftCam {
                             cameraCaptureSessions = cameraCaptureSession;
                             updatePreview();
                         }
+
                         @Override
                         public void onConfigureFailed(CameraCaptureSession cameraCaptureSession) {
+                            closeCamera();
                             Toast.makeText(mActivity, "Configuration change", Toast.LENGTH_SHORT)
                                     .show();
                         }
@@ -393,19 +474,6 @@ public class TopLeftCam {
         }
     }
 
-    public void releaseMedia() {
-        if (null != mMediaRecorder) {
-            try {
-                mMediaRecorder.stop();
-            } catch (IllegalStateException ex) {
-                Log.d(TAG, "Stop called before start");
-            }
-            mMediaRecorder.reset();
-            mMediaRecorder.release();
-            mMediaRecorder = null;
-        }
-    }
-
     public void closeCamera() {
         closePreviewSession();
         if (null != cameraDevice) {
@@ -416,7 +484,9 @@ public class TopLeftCam {
             imageReader.close();
             imageReader = null;
         }
-        releaseMedia();
+        if (null != mMediaRecorder) {
+            releaseMedia();
+        }
         closeVideoFileDescriptor();
         stopBackgroundThread();
     }
@@ -482,14 +552,11 @@ public class TopLeftCam {
         }
 
         try {
-            settings = PreferenceManager.getDefaultSharedPreferences(mActivity);
-            imageDimension = SettingsActivity.SettingsFragment.sizeFromSettingString(
-                    settings.getString("capture_list", "640x480"));
-            Log.d(TAG, "Selected imageDimension " + imageDimension.getWidth() +
-                               imageDimension.getHeight());
+            Log.d(TAG,
+                  "Selected imageDimension" + previewSize.getWidth() + previewSize.getHeight());
 
             ImageReader reader = ImageReader.newInstance(
-                    imageDimension.getWidth(), imageDimension.getHeight(), ImageFormat.JPEG, 1);
+                    previewSize.getWidth(), previewSize.getHeight(), ImageFormat.JPEG, 1);
             List<Surface> outputSurfaces = new ArrayList<Surface>(2);
             outputSurfaces.add(reader.getSurface());
             outputSurfaces.add(new Surface(textureView.getSurfaceTexture()));
@@ -508,10 +575,12 @@ public class TopLeftCam {
                 return;
             }
             mPictureFilename = fileDetails[3];
-            mCurrentPictureValues =
-                    Utils.getContentValues(Utils.MEDIA_TYPE_IMAGE, fileDetails,
-                                           imageDimension.getWidth(), imageDimension.getHeight());
-
+            mCurrentPictureValues = Utils.getContentValues(
+                    Utils.MEDIA_TYPE_IMAGE, fileDetails, previewSize.getWidth(),
+                    previewSize.getHeight(), 0, new File(mPictureFilename).length());
+            ContentResolver resolver = mActivity.getContentResolver();
+            final Uri uri = resolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
+                                            new ContentValues(mCurrentPictureValues));
             file = new File(mPictureFilename);
 
             ImageReader.OnImageAvailableListener readerListener =
@@ -560,9 +629,27 @@ public class TopLeftCam {
                                                        CaptureRequest request,
                                                        TotalCaptureResult result) {
                             super.onCaptureCompleted(session, request, result);
-                            Toast.makeText(mActivity, "Saved:" + file, Toast.LENGTH_SHORT).show();
-
-                            createCameraPreview();
+                            mActivity.runOnUiThread(new Runnable() {
+                                @Override
+                                public void run() {
+                                    FrameLayout previewLayout =
+                                            mActivity.findViewById(R.id.intentPreviewLayout);
+                                    previewLayout.setVisibility(View.VISIBLE);
+                                    photoPreview(
+                                            (ImageView)mActivity.findViewById(R.id.IntentPreview),
+                                            uri);
+
+                                    ImageButton IntentDone =
+                                            mActivity.findViewById(R.id.IntentDone);
+
+                                    IntentDone.setOnClickListener(new View.OnClickListener() {
+                                        @Override
+                                        public void onClick(View view) {
+                                            doReturnToCaller(true);
+                                        }
+                                    });
+                                }
+                            });
                         }
                     };
             cameraDevice.createCaptureSession(
@@ -593,13 +680,8 @@ public class TopLeftCam {
         }
         try {
             closePreviewSession();
-            settings = PreferenceManager.getDefaultSharedPreferences(mActivity);
-            String videoQuality = settings.getString("video_list", "medium");
-
-            int quality = SettingsActivity.SettingsFragment.getVideoQuality(0, videoQuality);
-            Log.d(TAG, "Selected video quality for '" + videoQuality + "' is " + quality);
 
-            mProfile = CamcorderProfile.get(0, quality);
+            mProfile = CamcorderProfile.get(0, CamcorderProfile.QUALITY_HIGH);
 
             setUpMediaRecorder();
             SurfaceTexture texture = textureView.getSurfaceTexture();
@@ -630,9 +712,9 @@ public class TopLeftCam {
                         @Override
                         public void run() {
                             // UI
-                            TakeVideoButton.setText(R.string.stop);
                             mIsRecordingVideo = true;
-
+                            mRecordingStartTime = SystemClock.uptimeMillis();
+                            updateRecordingTime();
                             // Start recording
                             mMediaRecorder.start();
                         }
@@ -644,6 +726,8 @@ public class TopLeftCam {
                     if (null != mActivity) {
                         Toast.makeText(mActivity, "Failed", Toast.LENGTH_SHORT).show();
                     }
+
+                    releaseMedia();
                 }
             }, mBackgroundHandler);
         } catch (CameraAccessException | IOException e) {
@@ -655,22 +739,22 @@ public class TopLeftCam {
         if (null == mActivity) {
             return;
         }
-
         String result = null;
         ContentResolver mContentResolver = mActivity.getContentResolver();
 
         Intent intent = mActivity.getIntent();
-        Bundle extras = intent.getExtras();
+        Bundle myExtras = intent.getExtras();
 
         closeVideoFileDescriptor();
 
-        if (mIsVideoCaptureIntent && extras != null) {
-            Uri saveUri = extras.getParcelable(MediaStore.EXTRA_OUTPUT);
+        if (mIsVideoCaptureIntent && myExtras != null) {
+            Uri saveUri = myExtras.getParcelable(MediaStore.EXTRA_OUTPUT);
             if (saveUri != null) {
                 try {
                     mVideoFileDescriptor = mContentResolver.openFileDescriptor(saveUri, "rw");
                     mCurrentVideoUri = saveUri;
                     mVideoFilename = Utils.getFileNameFromUri(saveUri);
+
                 } catch (java.io.FileNotFoundException ex) {
                     // invalid uri
                     Log.e(TAG, ex.toString());
@@ -684,25 +768,10 @@ public class TopLeftCam {
 
         if (mVideoFileDescriptor != null) {
             mMediaRecorder.setOutputFile(mVideoFileDescriptor.getFileDescriptor());
-            mVideoFilename = "CtsCameraIntents.mp4";
-        } else {
-            String fileDetails[] = Utils.generateFileDetails(Utils.MEDIA_TYPE_VIDEO);
-            if (fileDetails == null || fileDetails.length < 5) {
-                Log.e(TAG, "Invalid file details");
-                return;
-            }
-            mVideoFilename = fileDetails[3];
-            mCurrentVideoValues =
-                    Utils.getContentValues(Utils.MEDIA_TYPE_VIDEO, fileDetails,
-                                           mProfile.videoFrameWidth, mProfile.videoFrameHeight);
-
-            /**
-             * set output file in media recorder
-             */
-            mMediaRecorder.setOutputFile(mVideoFilename);
         }
 
         mMediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);
+
         mMediaRecorder.setVideoEncodingBitRate(10000000);
         mMediaRecorder.setVideoFrameRate(30);
         mMediaRecorder.setVideoSize(mProfile.videoFrameWidth, mProfile.videoFrameHeight);
@@ -735,17 +804,34 @@ public class TopLeftCam {
         }
     }
 
+    private void saveVideo() {
+        long duration = SystemClock.uptimeMillis() - mRecordingStartTime;
+        if (duration > 0) {
+            //
+        } else {
+            Log.w(TAG, "Video duration <= 0 : " + duration);
+        }
+    }
+
+    public void releaseMedia() {
+        if (null != mMediaRecorder) {
+            try {
+                mMediaRecorder.stop();
+            } catch (IllegalStateException ex) {
+                Log.d(TAG, "Stop called before start");
+            }
+            mMediaRecorder.reset();
+            mMediaRecorder.release();
+            mMediaRecorder = null;
+        }
+    }
+
     private void stopRecordingVideo() {
+        mHandler.removeMessages(MSG_UPDATE_RECORD_TIME);
+
         mIsRecordingVideo = false;
-        TakeVideoButton.setText(R.string.record);
 
-        // Stop recording
         releaseMedia();
-
-        if (null != mActivity) {
-            Toast.makeText(mActivity, "Video saved: " + mVideoFilename, Toast.LENGTH_SHORT).show();
-            Log.d(TAG, "Video saved: " + mVideoFilename);
-        }
         mVideoFilename = null;
         closeVideoFileDescriptor();
         createCameraPreview();
diff --git a/camera/MultiCameraApplication/java/com/intel/multicamera/CtsCameraIntentsActivity.java b/camera/MultiCameraApplication/java/com/intel/multicamera/CtsCameraIntentsActivity.java
new file mode 100644
index 0000000..30e1132
--- /dev/null
+++ b/camera/MultiCameraApplication/java/com/intel/multicamera/CtsCameraIntentsActivity.java
@@ -0,0 +1,127 @@
+/*
+ * Copyright (C) 2014 The Android Open Source Project
+ * Copyright (c) 2019 Intel Corporation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.intel.multicamera;
+
+import android.os.Bundle;
+import android.provider.MediaStore;
+import android.util.Log;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.ImageView;
+import android.widget.TextView;
+import androidx.annotation.Nullable;
+import androidx.appcompat.app.ActionBar;
+import androidx.appcompat.app.AppCompatActivity;
+
+public class CtsCameraIntentsActivity extends AppCompatActivity {
+    private static final String TAG = "CameraFullSrnActivity";
+    /**
+     * An {@link AutoFitTextureView} for camera preview.
+     */
+    private AutoFitTextureView mCam_textureView;
+
+    private ImageView mCam_PictureButton, mCam_RecordButton;
+
+    private CtsCamIntents CamIntents;
+
+    private TextView mRecordingTimeView;
+
+    @Override
+    protected void onCreate(@Nullable Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        Log.d(TAG, "onCreate");
+        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+                             WindowManager.LayoutParams.FLAG_FULLSCREEN);
+        setContentView(R.layout.activity_multiview);
+        setContentView(R.layout.activity_itscameraintents);
+
+        ActionBar actionBar = getSupportActionBar();
+        if (actionBar != null) {
+            actionBar.setDisplayHomeAsUpEnabled(true);
+        }
+
+        View decorView = getWindow().getDecorView();
+
+        int uiOptions = View.SYSTEM_UI_FLAG_FULLSCREEN;
+        decorView.setSystemUiVisibility(uiOptions);
+
+        mCam_textureView = findViewById(R.id.textureview0);
+        if (mCam_textureView == null) return;
+
+        mCam_PictureButton = findViewById(R.id.Picture0);
+        mCam_RecordButton = findViewById(R.id.Record0);
+
+        Open_Cam();
+    }
+
+    public boolean isVideoCaptureIntent() {
+        String action = this.getIntent().getAction();
+        ;
+        return (MediaStore.ACTION_VIDEO_CAPTURE.equals(action));
+    }
+
+    public boolean isImageCaptureIntent() {
+        String action = this.getIntent().getAction();
+        return (MediaStore.ACTION_IMAGE_CAPTURE.equals(action));
+    }
+
+    public void Open_Cam() {
+        this.setTitle("CtsCamIntents");
+
+        if (isVideoCaptureIntent())
+            mCam_PictureButton.setVisibility(View.GONE);
+        else if (isImageCaptureIntent())
+            mCam_RecordButton.setVisibility(View.GONE);
+
+        mRecordingTimeView = findViewById(R.id.recording_time);
+
+        CamIntents = new CtsCamIntents(this, mCam_textureView, mCam_PictureButton,
+                                       mCam_RecordButton, mRecordingTimeView);
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        Log.d(TAG, "onDestroy");
+    }
+
+    @Override
+    protected void onPause() {
+        super.onPause();
+        Log.e(TAG, "onPause");
+        closeCamera();
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        Log.d(TAG, "onResume");
+
+        if (mCam_textureView.isAvailable()) {
+            CamIntents.textureListener.onSurfaceTextureAvailable(
+                    mCam_textureView.getSurfaceTexture(), mCam_textureView.getWidth(),
+                    mCam_textureView.getHeight());
+        } else {
+            mCam_textureView.setSurfaceTextureListener(CamIntents.textureListener);
+        }
+    }
+
+    private void closeCamera() {
+        if (null != CamIntents) CamIntents.closeCamera();
+    }
+}
diff --git a/camera/MultiCameraApplication/java/com/intel/multicamera/MainActivity.java b/camera/MultiCameraApplication/java/com/intel/multicamera/MainActivity.java
deleted file mode 100644
index 1b85b06..0000000
--- a/camera/MultiCameraApplication/java/com/intel/multicamera/MainActivity.java
+++ /dev/null
@@ -1,396 +0,0 @@
-/*
- * Copyright (C) 2012 The Android Open Source Project
- * Copyright (c) 2019 Intel Corporation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.intel.multicamera;
-
-import android.Manifest;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.hardware.camera2.CameraAccessException;
-import android.hardware.camera2.CameraManager;
-import android.os.Bundle;
-import android.provider.MediaStore;
-import android.util.Log;
-import android.util.SparseIntArray;
-import android.view.Menu;
-import android.view.MenuItem;
-import android.view.Surface;
-import android.view.View;
-import android.widget.Button;
-import android.widget.FrameLayout;
-import android.widget.Toast;
-import androidx.appcompat.app.AppCompatActivity;
-import androidx.appcompat.widget.Toolbar;
-import androidx.core.app.ActivityCompat;
-
-public class MainActivity extends AppCompatActivity {
-    private static final String TAG = "MainActivity";
-    /**
-     * An {@link AutoFitTextureView} for camera preview.
-     */
-    private AutoFitTextureView mTopLeftCam_textureView, mTopRightCam_textureView,
-            mBotmLeftCam_textureView, mBotmRightCam_textureView;
-
-    private Button mTopLeftCam_PictureButton, mTopRightCam_PictureButton,
-            mBotmLeftCam_PictureButton, mBotmRightCam_PictureButton, mTopLeftCam_RecordButton,
-            mTopRightCam_RecordButton, mBotmLeftCam_RecordButton, mBotmRightCam_RecordButton;
-
-    private int numOfCameras;
-    private static final int REQUEST_CAMERA_PERMISSION = 200;
-    private static final SparseIntArray ORIENTATIONS = new SparseIntArray();
-    private FrameLayout frameView0, frameView1, frameView2, frameView3;
-
-    private boolean mHasCriticalPermissions = false;
-
-    TopLeftCam mTopLeftCam;
-    TopRightCam mTopRightCam;
-    BotmLeftCam mBotmLeftCam;
-    BotmRightCam mBotmRightCam;
-
-    static {
-        ORIENTATIONS.append(Surface.ROTATION_0, 90);
-        ORIENTATIONS.append(Surface.ROTATION_90, 0);
-        ORIENTATIONS.append(Surface.ROTATION_180, 270);
-        ORIENTATIONS.append(Surface.ROTATION_270, 180);
-    }
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_main);
-        Toolbar toolbar = findViewById(R.id.toolbar);
-        setSupportActionBar(toolbar);
-
-        checkPermissions();
-        if (!mHasCriticalPermissions) {
-            Log.v(TAG, "onCreate: Missing critical permissions.");
-            finish();
-            return;
-        }
-
-        setVisibilityFrameLayout();
-    }
-
-    public void Open_TopLeftCam() {
-        mTopLeftCam_textureView = findViewById(R.id.textureview0);
-        if (mTopLeftCam_textureView == null) return;
-
-        mTopLeftCam_PictureButton = findViewById(R.id.Picture0);
-        mTopLeftCam_RecordButton = findViewById(R.id.Record0);
-
-        if (isVideoCaptureIntent())
-            mTopLeftCam_PictureButton.setVisibility(View.GONE);
-        else if (isImageCaptureIntent())
-            mTopLeftCam_RecordButton.setVisibility(View.GONE);
-
-        mTopLeftCam = new TopLeftCam(MainActivity.this, mTopLeftCam_textureView,
-                                     mTopLeftCam_PictureButton, mTopLeftCam_RecordButton);
-    }
-
-    public void Open_TopRightCam() {
-        mTopRightCam_textureView = findViewById(R.id.textureview1);
-        if (mTopRightCam_textureView == null) return;
-
-        mTopRightCam_PictureButton = findViewById(R.id.Picture1);
-        mTopRightCam_RecordButton = findViewById(R.id.Record1);
-
-        mTopRightCam = new TopRightCam(MainActivity.this, mTopRightCam_textureView,
-                                       mTopRightCam_PictureButton, mTopRightCam_RecordButton);
-    }
-
-    public void Open_BotmLeftCam() {
-        mBotmLeftCam_textureView = findViewById(R.id.textureview2);
-        if (mBotmLeftCam_textureView == null) return;
-
-        mBotmLeftCam_PictureButton = findViewById(R.id.Picture2);
-        mBotmLeftCam_RecordButton = findViewById(R.id.Record2);
-
-        mBotmLeftCam = new BotmLeftCam(MainActivity.this, mBotmLeftCam_textureView,
-                                       mBotmLeftCam_PictureButton, mBotmLeftCam_RecordButton);
-    }
-
-    public void Open_BotmRightCam() {
-        mBotmRightCam_textureView = findViewById(R.id.textureview3);
-        if (mBotmRightCam_textureView == null) return;
-
-        mBotmRightCam_PictureButton = findViewById(R.id.Picture3);
-        mBotmRightCam_RecordButton = findViewById(R.id.Record3);
-
-        mBotmRightCam = new BotmRightCam(MainActivity.this, mBotmRightCam_textureView,
-                                         mBotmRightCam_PictureButton, mBotmRightCam_RecordButton);
-    }
-
-    public boolean isVideoCaptureIntent() {
-        String action = this.getIntent().getAction();
-        return (MediaStore.ACTION_VIDEO_CAPTURE.equals(action));
-    }
-
-    public boolean isImageCaptureIntent() {
-        String action = this.getIntent().getAction();
-        return (MediaStore.ACTION_IMAGE_CAPTURE.equals(action));
-    }
-
-    public void setVisibilityFrameLayout() {
-        frameView0 = findViewById(R.id.control1);
-        frameView1 = findViewById(R.id.control2);
-        frameView2 = findViewById(R.id.control3);
-        frameView3 = findViewById(R.id.control4);
-
-        CameraManager manager = (CameraManager)getSystemService(Context.CAMERA_SERVICE);
-        try {
-            numOfCameras = manager.getCameraIdList().length;
-            // if (numCameras != "") { numOfCameras = Integer.parseInt(numCameras); }
-            Log.d(TAG, "onCreate Inside openCamera() Total Cameras: " +
-                               manager.getCameraIdList().length);
-
-            if (numOfCameras == 1) {
-                frameView1.setVisibility(FrameLayout.INVISIBLE);
-                frameView2.setVisibility(FrameLayout.INVISIBLE);
-                frameView3.setVisibility(FrameLayout.INVISIBLE);
-                Open_TopLeftCam();
-            } else if (numOfCameras == 2) {
-                frameView2.setVisibility(FrameLayout.INVISIBLE);
-                frameView3.setVisibility(FrameLayout.INVISIBLE);
-                Open_TopLeftCam();
-                Open_TopRightCam();
-            } else if (numOfCameras == 3) {
-                frameView3.setVisibility(FrameLayout.INVISIBLE);
-                Open_TopLeftCam();
-                Open_TopRightCam();
-                Open_BotmLeftCam();
-            } else if (numOfCameras == 4) {
-                Open_TopLeftCam();
-                Open_TopRightCam();
-                Open_BotmLeftCam();
-                Open_BotmRightCam();
-            } else {
-                Log.d(TAG, "No CAMERA CONNECTED");
-                frameView0.setVisibility(FrameLayout.INVISIBLE);
-                frameView1.setVisibility(FrameLayout.INVISIBLE);
-                frameView2.setVisibility(FrameLayout.INVISIBLE);
-                frameView3.setVisibility(FrameLayout.INVISIBLE);
-            }
-        } catch (CameraAccessException e) {
-            e.printStackTrace();
-        }
-    }
-
-    @Override
-    public void onRequestPermissionsResult(int requestCode, String[] permissions,
-                                           int[] grantResults) {
-        if (requestCode == REQUEST_CAMERA_PERMISSION) {
-            if (grantResults[0] == PackageManager.PERMISSION_DENIED) {
-                // close the app
-                Toast.makeText(MainActivity.this,
-                               "Sorry!!!, you can't use this app without granting permission",
-                               Toast.LENGTH_LONG)
-                        .show();
-                finish();
-            }
-        }
-    }
-
-    private void manageTopLeftCam() {
-        if (mTopLeftCam == null) {
-            Open_TopLeftCam();
-            frameView0.setVisibility(FrameLayout.VISIBLE);
-        } else if (mTopLeftCam_textureView == null) {
-            mTopLeftCam_textureView = findViewById(R.id.textureview0);
-            if (mTopLeftCam_textureView == null) return;
-        }
-
-        if (mTopLeftCam_textureView.isAvailable()) {
-            frameView0.setVisibility(FrameLayout.VISIBLE);
-            mTopLeftCam.openCamera(mTopLeftCam_textureView.getWidth(),
-                                   mTopLeftCam_textureView.getHeight());
-        } else {
-            mTopLeftCam_textureView.setSurfaceTextureListener(mTopLeftCam.textureListener);
-        }
-    }
-
-    private void manageTopRightCam() {
-        if (mTopRightCam == null) {
-            Open_TopRightCam();
-            frameView1.setVisibility(FrameLayout.VISIBLE);
-
-        } else if (mTopRightCam_textureView == null) {
-            mTopRightCam_textureView = findViewById(R.id.textureview1);
-            if (mTopRightCam_textureView == null) return;
-        }
-
-        if (mTopRightCam_textureView.isAvailable()) {
-            frameView1.setVisibility(FrameLayout.VISIBLE);
-            mTopRightCam.openCamera(mTopRightCam_textureView.getWidth(),
-                                    mTopRightCam_textureView.getHeight());
-        } else {
-            mTopRightCam_textureView.setSurfaceTextureListener(mTopRightCam.textureListener);
-        }
-    }
-
-    private void manageBotmLeftCam() {
-        if (mBotmLeftCam == null) {
-            Open_BotmLeftCam();
-            frameView2.setVisibility(FrameLayout.VISIBLE);
-
-        } else if (mBotmLeftCam_textureView == null) {
-            mBotmLeftCam_textureView = findViewById(R.id.textureview2);
-            if (mBotmLeftCam_textureView == null) return;
-        }
-
-        if (mBotmLeftCam_textureView.isAvailable()) {
-            frameView2.setVisibility(FrameLayout.VISIBLE);
-            mBotmLeftCam.openCamera(mBotmLeftCam_textureView.getWidth(),
-                                    mBotmLeftCam_textureView.getHeight());
-        } else {
-            mBotmLeftCam_textureView.setSurfaceTextureListener(mBotmLeftCam.textureListener);
-        }
-    }
-
-    private void manageBotmRightCam() {
-        if (mBotmRightCam == null) {
-            Open_BotmRightCam();
-            frameView3.setVisibility(FrameLayout.VISIBLE);
-
-        } else if (mBotmRightCam_textureView == null) {
-            mBotmRightCam_textureView = findViewById(R.id.textureview3);
-            if (mBotmRightCam_textureView == null) return;
-        }
-
-        if (mBotmRightCam_textureView.isAvailable()) {
-            frameView3.setVisibility(FrameLayout.VISIBLE);
-            mBotmRightCam.openCamera(mBotmRightCam_textureView.getWidth(),
-                                     mBotmRightCam_textureView.getHeight());
-        } else {
-            mBotmRightCam_textureView.setSurfaceTextureListener(mBotmRightCam.textureListener);
-        }
-    }
-
-    /**
-     * Checks if any of the needed Android runtime permissions are missing.
-     * If they are, then launch the permissions activity under one of the following conditions:
-     * a) The permissions dialogs have not run yet. We will ask for permission only once.
-     * b) If the missing permissions are critical to the app running, we will display a fatal error
-     * dialog. Critical permissions are: camera, microphone and storage. The app cannot run without
-     * them. Non-critical permission is location.
-     */
-    private void checkPermissions() {
-        if (ActivityCompat.checkSelfPermission(getApplicationContext(),
-                                               Manifest.permission.CAMERA) ==
-                    PackageManager.PERMISSION_GRANTED &&
-            ActivityCompat.checkSelfPermission(getApplicationContext(),
-                                               Manifest.permission.RECORD_AUDIO) ==
-                    PackageManager.PERMISSION_GRANTED &&
-            ActivityCompat.checkSelfPermission(getApplicationContext(),
-                                               Manifest.permission.READ_EXTERNAL_STORAGE) ==
-                    PackageManager.PERMISSION_GRANTED) {
-            mHasCriticalPermissions = true;
-        } else {
-            mHasCriticalPermissions = false;
-        }
-
-        if (!mHasCriticalPermissions) {
-            Intent intent = new Intent(this, PermissionsActivity.class);
-            startActivity(intent);
-            finish();
-        }
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        Log.e(TAG, "onResume");
-
-        checkPermissions();
-        if (!mHasCriticalPermissions) {
-            Log.v(TAG, "onResume: Missing critical permissions.");
-            finish();
-            return;
-        }
-
-        CameraManager manager = (CameraManager)getSystemService(Context.CAMERA_SERVICE);
-        try {
-            numOfCameras = manager.getCameraIdList().length;
-            Log.d(TAG, "onResume Total Cameras: " + manager.getCameraIdList().length);
-        } catch (CameraAccessException e) {
-            e.printStackTrace();
-        }
-
-        if (numOfCameras == 1) {
-            manageTopLeftCam();
-        } else if (numOfCameras == 2) {
-            manageTopLeftCam();
-            manageTopRightCam();
-        } else if (numOfCameras == 3) {
-            manageTopLeftCam();
-            manageBotmLeftCam();
-            manageTopRightCam();
-        } else if (numOfCameras == 4) {
-            manageTopLeftCam();
-            manageTopRightCam();
-            manageBotmLeftCam();
-            manageBotmRightCam();
-        } else {
-            Log.d(TAG, "onResume No CAMERA CONNECTED");
-            frameView0.setVisibility(FrameLayout.INVISIBLE);
-            frameView1.setVisibility(FrameLayout.INVISIBLE);
-            frameView2.setVisibility(FrameLayout.INVISIBLE);
-            frameView3.setVisibility(FrameLayout.INVISIBLE);
-        }
-    }
-
-    private void closeCamera() {
-        if (null != mTopLeftCam) mTopLeftCam.closeCamera();
-
-        if (null != mTopRightCam) mTopRightCam.closeCamera();
-
-        if (null != mBotmRightCam) mBotmRightCam.closeCamera();
-
-        if (null != mBotmLeftCam) mBotmLeftCam.closeCamera();
-    }
-
-    @Override
-    protected void onPause() {
-        Log.e(TAG, "onPause");
-        super.onPause();
-        closeCamera();
-    }
-
-    @Override
-    public boolean onCreateOptionsMenu(Menu menu) {
-        // Inflate the menu; this adds items to the action bar if it is present.
-        getMenuInflater().inflate(R.menu.menu_main, menu);
-        return true;
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        // Handle action bar item clicks here. The action bar will
-        // automatically handle clicks on the Home/Up button, so long
-        // as you specify a parent activity in AndroidManifest.xml.
-        int id = item.getItemId();
-
-        // noinspection SimplifiableIfStatement
-        if (id == R.id.action_settings) {
-            Intent intent = new Intent(MainActivity.this, SettingsActivity.class);
-            startActivity(intent);
-            return true;
-        }
-
-        return super.onOptionsItemSelected(item);
-    }
-}
diff --git a/camera/MultiCameraApplication/java/com/intel/multicamera/MultiViewActivity.java b/camera/MultiCameraApplication/java/com/intel/multicamera/MultiViewActivity.java
new file mode 100644
index 0000000..8d3f425
--- /dev/null
+++ b/camera/MultiCameraApplication/java/com/intel/multicamera/MultiViewActivity.java
@@ -0,0 +1,792 @@
+/*
+ * Copyright (C) 2014 The Android Open Source Project
+ * Copyright (c) 2019 Intel Corporation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.intel.multicamera;
+
+import android.Manifest;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.hardware.camera2.CameraAccessException;
+import android.hardware.camera2.CameraManager;
+import android.os.Bundle;
+import android.util.Log;
+import android.util.SparseIntArray;
+import android.view.*;
+import android.widget.*;
+import androidx.appcompat.app.ActionBar;
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.core.app.ActivityCompat;
+
+public class MultiViewActivity extends AppCompatActivity {
+    private static final String TAG = "MainActivity";
+    /**
+     * An {@link AutoFitTextureView} for camera preview.
+     */
+    private AutoFitTextureView mTopLeftCam_textureView, mTopRightCam_textureView,
+            mBotmLeftCam_textureView, mBotmRightCam_textureView;
+
+    private ImageButton mTopLeftCam_RecordButton, mTopLeftCam_PictureButton,
+            mTopRightCam_PictureButton, mBotmLeftCam_PictureButton, mBotmRightCam_PictureButton,
+            mTopRightCam_RecordButton, mBotmLeftCam_RecordButton, mBotmRightCam_RecordButton;
+
+    private ImageButton SettingView0, SettingView1, SettingView2, SettingView3, SettingClose0,
+            SettingClose1, SettingClose2, SettingClose3, FullScrn0, FullScrn1, FullScrn2, FullScrn3,
+            exitScrn0, exitScrn1, exitScrn2, exitScrn3;
+
+    private TextView mRecordingTimeView, mRecordingTimeView0, mRecordingTimeView1,
+            mRecordingTimeView2;
+
+    private int numOfCameras;
+    private static final SparseIntArray ORIENTATIONS = new SparseIntArray();
+    private FrameLayout frameView0, frameView1, frameView2, frameView3;
+
+    private CameraBase mTopRightCam, mBotmLeftCam, mBotmRightCam, mTopLeftCam;
+
+    private SettingsPrefUtil Fragment, Fragment1, Fragment2, Fragment3;
+
+    public String[] CameraIds;
+    private boolean mHasCriticalPermissions;
+
+    static {
+        ORIENTATIONS.append(Surface.ROTATION_0, 90);
+        ORIENTATIONS.append(Surface.ROTATION_90, 0);
+        ORIENTATIONS.append(Surface.ROTATION_180, 270);
+        ORIENTATIONS.append(Surface.ROTATION_270, 180);
+    }
+
+    private int[] FrameVisibility;
+    private boolean exitScrnFlag;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
+                             WindowManager.LayoutParams.FLAG_FULLSCREEN);
+
+        ActionBar actionBar = getSupportActionBar();
+        if (actionBar != null) {
+            actionBar.setHomeButtonEnabled(true);
+        }
+
+        setContentView(R.layout.activity_multiview);
+
+        Log.e(TAG, "onCreate");
+
+        checkPermissions();
+        if (!mHasCriticalPermissions) {
+            Log.v(TAG, "onCreate: Missing critical permissions.");
+            finish();
+            return;
+        }
+
+        Settings_Init();
+
+        FullScrn_Init();
+
+        set_FrameVisibilities();
+    }
+
+    private void set_FrameVisibilities() {
+        FrameVisibility = new int[4];
+
+        frameView0 = findViewById(R.id.control1);
+        frameView1 = findViewById(R.id.control2);
+        frameView2 = findViewById(R.id.control3);
+        frameView3 = findViewById(R.id.control4);
+
+        FrameVisibility[0] = frameView0.getVisibility();
+        FrameVisibility[1] = frameView1.getVisibility();
+        FrameVisibility[2] = frameView2.getVisibility();
+        FrameVisibility[3] = frameView3.getVisibility();
+    }
+
+    /**
+     * Checks if any of the needed Android runtime permissions are missing.
+     * If they are, then launch the permissions activity under one of the following conditions:
+     * a) The permissions dialogs have not run yet. We will ask for permission only once.
+     * b) If the missing permissions are critical to the app running, we will display a fatal error
+     * dialog. Critical permissions are: camera, microphone and storage. The app cannot run without
+     * them. Non-critical permission is location.
+     */
+    private void checkPermissions() {
+        if (ActivityCompat.checkSelfPermission(getApplicationContext(),
+                                               Manifest.permission.CAMERA) ==
+                    PackageManager.PERMISSION_GRANTED &&
+            ActivityCompat.checkSelfPermission(getApplicationContext(),
+                                               Manifest.permission.RECORD_AUDIO) ==
+                    PackageManager.PERMISSION_GRANTED &&
+            ActivityCompat.checkSelfPermission(getApplicationContext(),
+                                               Manifest.permission.READ_EXTERNAL_STORAGE) ==
+                    PackageManager.PERMISSION_GRANTED) {
+            mHasCriticalPermissions = true;
+        } else {
+            mHasCriticalPermissions = false;
+        }
+
+        if (!mHasCriticalPermissions) {
+            Intent intent = new Intent(this, PermissionsActivity.class);
+            startActivity(intent);
+            finish();
+        }
+    }
+
+    private void FullScrn_Init() {
+        FullScrn0 = findViewById(R.id.imageView0);
+        FullScrn1 = findViewById(R.id.imageView1);
+        FullScrn2 = findViewById(R.id.imageView2);
+        FullScrn3 = findViewById(R.id.imageView3);
+
+        exitScrn0 = findViewById(R.id.exitFullScreen0);
+        exitScrn1 = findViewById(R.id.exitFullScreen1);
+        exitScrn2 = findViewById(R.id.exitFullScreen2);
+        exitScrn3 = findViewById(R.id.exitFullScreen3);
+    }
+
+    private void Settings_Init() {
+        SettingView0 = findViewById(R.id.SettingView0);
+        SettingView1 = findViewById(R.id.SettingView1);
+        SettingView2 = findViewById(R.id.SettingView2);
+        SettingView3 = findViewById(R.id.SettingView3);
+
+        SettingClose0 = findViewById(R.id.mSettingClose0);
+        SettingClose1 = findViewById(R.id.mSettingClose1);
+        SettingClose2 = findViewById(R.id.mSettingClose2);
+        SettingClose3 = findViewById(R.id.mSettingClose3);
+    }
+
+    public void GetCameraCnt() {
+        CameraManager manager = (CameraManager)getSystemService(Context.CAMERA_SERVICE);
+
+        try {
+            CameraIds = manager.getCameraIdList();
+            numOfCameras = manager.getCameraIdList().length;
+            Log.d(TAG, "Inside Settings Total Cameras: " + manager.getCameraIdList().length);
+        } catch (CameraAccessException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public void Open_TopLeftCam() {
+        String[] Data = new String[5];
+        ImageButton[] Buttons = new ImageButton[4];
+
+        mTopLeftCam_textureView = findViewById(R.id.textureview0);
+        if (mTopLeftCam_textureView == null) return;
+
+        mTopLeftCam_PictureButton = findViewById(R.id.Picture0);
+        mTopLeftCam_RecordButton = findViewById(R.id.Record0);
+
+        Buttons[0] = mTopLeftCam_PictureButton;
+        Buttons[1] = mTopLeftCam_RecordButton;
+        Buttons[2] = SettingView0;
+        Buttons[3] = FullScrn0;
+
+        mRecordingTimeView = findViewById(R.id.recording_time);
+
+        Data[0] = "TopLeftCam";
+        Data[1] = CameraIds[0];
+        Data[2] = "capture_list";
+        Data[3] = "video_list";
+        Data[4] = "pref_resolution";
+
+        RoundedThumbnailView roundedThumbnailView = findViewById(R.id.rounded_thumbnail_view);
+
+        mTopLeftCam = new CameraBase(this, mTopLeftCam_textureView, Buttons, mRecordingTimeView,
+                                     Data, roundedThumbnailView);
+    }
+
+    public void Open_TopRightCam() {
+        String[] Data = new String[5];
+        ImageButton[] Buttons = new ImageButton[4];
+        mTopRightCam_textureView = findViewById(R.id.textureview1);
+        if (mTopRightCam_textureView == null) return;
+
+        mTopRightCam_PictureButton = findViewById(R.id.Picture1);
+        mTopRightCam_RecordButton = findViewById(R.id.Record1);
+
+        Buttons[0] = mTopRightCam_PictureButton;
+        Buttons[1] = mTopRightCam_RecordButton;
+        Buttons[2] = SettingView1;
+        Buttons[3] = FullScrn1;
+
+        Data[0] = "TopRightCam";
+        Data[1] = CameraIds[1];
+        Data[2] = "capture_list_1";
+        Data[3] = "video_list_1";
+        Data[4] = "pref_resolution_1";
+
+        mRecordingTimeView0 = findViewById(R.id.recording_time0);
+
+        RoundedThumbnailView roundedThumbnailView = findViewById(R.id.rounded_thumbnail_view0);
+
+        mTopRightCam = new CameraBase(this, mTopRightCam_textureView, Buttons, mRecordingTimeView0,
+                                      Data, roundedThumbnailView);
+    }
+
+    public void Open_BotmLeftCam() {
+        String[] Data = new String[5];
+        ImageButton[] Buttons = new ImageButton[4];
+        mBotmLeftCam_textureView = findViewById(R.id.textureview2);
+        if (mBotmLeftCam_textureView == null) return;
+
+        mBotmLeftCam_PictureButton = findViewById(R.id.Picture2);
+        mBotmLeftCam_RecordButton = findViewById(R.id.Record2);
+
+        Buttons[0] = mBotmLeftCam_PictureButton;
+        Buttons[1] = mBotmLeftCam_RecordButton;
+        Buttons[2] = SettingView2;
+        Buttons[3] = FullScrn2;
+
+        Data[0] = "BotmLeftCam";
+        Data[1] = CameraIds[2];
+        Data[2] = "capture_list_2";
+        Data[3] = "video_list_2";
+        Data[4] = "pref_resolution_2";
+
+        mRecordingTimeView1 = findViewById(R.id.recording_time1);
+
+        RoundedThumbnailView roundedThumbnailView = findViewById(R.id.rounded_thumbnail_view1);
+
+        mBotmLeftCam = new CameraBase(this, mBotmLeftCam_textureView, Buttons, mRecordingTimeView1,
+                                      Data, roundedThumbnailView);
+    }
+
+    public void Open_BotmRightCam() {
+        String[] Data = new String[5];
+        ImageButton[] Buttons = new ImageButton[4];
+        mBotmRightCam_textureView = findViewById(R.id.textureview3);
+        if (mTopRightCam_textureView == null) return;
+
+        mBotmRightCam_PictureButton = findViewById(R.id.Picture3);
+        mBotmRightCam_RecordButton = findViewById(R.id.Record3);
+
+        Buttons[0] = mBotmRightCam_PictureButton;
+        Buttons[1] = mBotmRightCam_RecordButton;
+        Buttons[2] = SettingView3;
+        Buttons[3] = FullScrn3;
+
+        Data[0] = "BotmRightCam";
+        Data[1] = CameraIds[3];
+        Data[2] = "capture_list_3";
+        Data[3] = "video_list_3";
+        Data[4] = "pref_resolution_3";
+
+        mRecordingTimeView2 = findViewById(R.id.recording_time2);
+
+        RoundedThumbnailView roundedThumbnailView = findViewById(R.id.rounded_thumbnail_view2);
+
+        mBotmRightCam = new CameraBase(this, mBotmRightCam_textureView, Buttons,
+                                       mRecordingTimeView2, Data, roundedThumbnailView);
+    }
+
+    private void manageTopLeftCam() {
+        frameView0.setVisibility(FrameLayout.VISIBLE);
+        FrameVisibility[0] = frameView0.getVisibility();
+        if (mTopLeftCam == null) {
+            Open_TopLeftCam();
+        } else if (mTopLeftCam_textureView == null) {
+            mTopLeftCam_textureView = findViewById(R.id.textureview0);
+        }
+
+        if (mTopLeftCam_textureView.isAvailable()) {
+            mTopLeftCam.textureListener.onSurfaceTextureAvailable(
+                    mTopLeftCam_textureView.getSurfaceTexture(), mTopLeftCam_textureView.getWidth(),
+                    mTopLeftCam_textureView.getHeight());
+        } else {
+            mTopLeftCam_textureView.setSurfaceTextureListener(mTopLeftCam.textureListener);
+        }
+    }
+
+    private void manageTopRightCam() {
+        frameView1.setVisibility(FrameLayout.VISIBLE);
+        FrameVisibility[1] = frameView1.getVisibility();
+        if (mTopRightCam == null) {
+            Open_TopRightCam();
+
+        } else if (mTopRightCam_textureView == null) {
+            mTopRightCam_textureView = findViewById(R.id.textureview1);
+        }
+
+        if (mTopRightCam_textureView.isAvailable()) {
+            mTopRightCam.textureListener.onSurfaceTextureAvailable(
+                    mTopRightCam_textureView.getSurfaceTexture(),
+                    mTopRightCam_textureView.getWidth(), mTopRightCam_textureView.getHeight());
+        } else {
+            mTopRightCam_textureView.setSurfaceTextureListener(mTopRightCam.textureListener);
+        }
+    }
+
+    private void manageBotmLeftCam() {
+        frameView2.setVisibility(FrameLayout.VISIBLE);
+        FrameVisibility[2] = frameView2.getVisibility();
+        if (mBotmLeftCam == null) {
+            Open_BotmLeftCam();
+
+        } else if (mBotmLeftCam_textureView == null) {
+            mBotmLeftCam_textureView = findViewById(R.id.textureview2);
+        }
+
+        if (mBotmLeftCam_textureView.isAvailable()) {
+            mBotmLeftCam.textureListener.onSurfaceTextureAvailable(
+                    mBotmLeftCam_textureView.getSurfaceTexture(),
+                    mBotmLeftCam_textureView.getWidth(), mBotmLeftCam_textureView.getHeight());
+        } else {
+            mBotmLeftCam_textureView.setSurfaceTextureListener(mBotmLeftCam.textureListener);
+        }
+    }
+
+    private void manageBotmRightCam() {
+        frameView3.setVisibility(FrameLayout.VISIBLE);
+        FrameVisibility[3] = frameView3.getVisibility();
+        if (mBotmRightCam == null) {
+            Open_BotmRightCam();
+
+        } else if (mBotmRightCam_textureView == null) {
+            mBotmRightCam_textureView = findViewById(R.id.textureview3);
+        }
+
+        if (mBotmRightCam_textureView.isAvailable()) {
+            mBotmRightCam.textureListener.onSurfaceTextureAvailable(
+                    mBotmRightCam_textureView.getSurfaceTexture(),
+                    mBotmRightCam_textureView.getWidth(), mBotmRightCam_textureView.getHeight());
+        } else {
+            mBotmRightCam_textureView.setSurfaceTextureListener(mBotmRightCam.textureListener);
+        }
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        Log.e(TAG, "onResume");
+
+        GetCameraCnt();
+
+        if (numOfCameras == 1) {
+            manageTopLeftCam();
+        } else if (numOfCameras == 2) {
+            manageTopLeftCam();
+            manageTopRightCam();
+        } else if (numOfCameras == 3) {
+            manageTopLeftCam();
+            manageBotmLeftCam();
+            manageTopRightCam();
+        } else if (numOfCameras == 4) {
+            manageTopLeftCam();
+            manageTopRightCam();
+            manageBotmLeftCam();
+            manageBotmRightCam();
+
+        } else {
+            Log.d(TAG, "onResume No CAMERA CONNECTED");
+        }
+    }
+
+    private void closeCamera() {
+        if (null != mTopLeftCam) mTopLeftCam.closeCamera();
+
+        if (null != mTopRightCam) mTopRightCam.closeCamera();
+
+        if (null != mBotmRightCam) mBotmRightCam.closeCamera();
+
+        if (null != mBotmLeftCam) mBotmLeftCam.closeCamera();
+    }
+
+    @Override
+    protected void onPause() {
+        Log.e(TAG, "onPause");
+        super.onPause();
+
+        closeCamera();
+    }
+
+    public void settingView(View view) {
+        FrameLayout frameLayout;
+        Bundle bundle;
+
+        switch (view.getId()) {
+            case R.id.SettingView0:
+                frameLayout = findViewById(R.id.PrefScrnSettings0);
+
+                frameLayout.setVisibility(View.VISIBLE);
+                SettingClose0.setVisibility(View.VISIBLE);
+
+                bundle = new Bundle();
+                bundle.putString("Camera_id", CameraIds[0]);
+                bundle.putInt("root_preferences", R.xml.root_preferences);
+                bundle.putString("pref_resolution", "pref_resolution");
+                bundle.putString("video_list", "video_list");
+                bundle.putString("capture_list", "capture_list");
+
+                Fragment = new SettingsPrefUtil();
+                Fragment.setArguments(bundle);
+
+                getFragmentManager()
+                        .beginTransaction()
+                        .replace(R.id.PrefScrnSettings0, Fragment)
+                        .commit();
+
+                SettingView0.setVisibility(View.GONE);
+                FullScrn0.setVisibility(View.GONE);
+                if (exitScrnFlag) exitScrn0.setVisibility(View.INVISIBLE);
+                mTopLeftCam_RecordButton.setVisibility(View.GONE);
+                mTopLeftCam_PictureButton.setVisibility(View.GONE);
+                break;
+            case R.id.SettingView1:
+                frameLayout = findViewById(R.id.PrefScrnSettings1);
+
+                frameLayout.setVisibility(View.VISIBLE);
+                SettingClose1.setVisibility(View.VISIBLE);
+
+                bundle = new Bundle();
+                bundle.putString("Camera_id", CameraIds[1]);
+                bundle.putInt("root_preferences", R.xml.root_preferences_1);
+                bundle.putString("pref_resolution", "pref_resolution_1");
+                bundle.putString("video_list", "video_list_1");
+                bundle.putString("capture_list", "capture_list_1");
+
+                Fragment1 = new SettingsPrefUtil();
+                Fragment1.setArguments(bundle);
+
+                getFragmentManager()
+                        .beginTransaction()
+                        .replace(R.id.PrefScrnSettings1, Fragment1)
+                        .commit();
+
+                SettingView1.setVisibility(View.GONE);
+                FullScrn1.setVisibility(View.GONE);
+                if (exitScrnFlag) exitScrn1.setVisibility(View.INVISIBLE);
+                mTopRightCam_RecordButton.setVisibility(View.GONE);
+                mTopRightCam_PictureButton.setVisibility(View.GONE);
+                break;
+            case R.id.SettingView2:
+                frameLayout = findViewById(R.id.PrefScrnSettings2);
+
+                frameLayout.setVisibility(View.VISIBLE);
+                SettingClose2.setVisibility(View.VISIBLE);
+
+                bundle = new Bundle();
+                bundle.putString("Camera_id", CameraIds[2]);
+                bundle.putInt("root_preferences", R.xml.root_preferences_2);
+                bundle.putString("pref_resolution", "pref_resolution_2");
+                bundle.putString("video_list", "video_list_2");
+                bundle.putString("capture_list", "capture_list_2");
+
+                Fragment2 = new SettingsPrefUtil();
+                Fragment2.setArguments(bundle);
+
+                getFragmentManager()
+                        .beginTransaction()
+                        .replace(R.id.PrefScrnSettings2, Fragment2)
+                        .commit();
+
+                SettingView2.setVisibility(View.GONE);
+                FullScrn2.setVisibility(View.GONE);
+                if (exitScrnFlag) exitScrn2.setVisibility(View.INVISIBLE);
+                mBotmLeftCam_RecordButton.setVisibility(View.GONE);
+                mBotmLeftCam_PictureButton.setVisibility(View.GONE);
+                break;
+            case R.id.SettingView3:
+                frameLayout = findViewById(R.id.PrefScrnSettings3);
+
+                frameLayout.setVisibility(View.VISIBLE);
+                SettingClose3.setVisibility(View.VISIBLE);
+
+                bundle = new Bundle();
+                bundle.putString("Camera_id", CameraIds[3]);
+                bundle.putInt("root_preferences", R.xml.root_preferences_3);
+                bundle.putString("pref_resolution", "pref_resolution_3");
+                bundle.putString("video_list", "video_list_3");
+                bundle.putString("capture_list", "capture_list_3");
+
+                Fragment3 = new SettingsPrefUtil();
+                Fragment3.setArguments(bundle);
+
+                getFragmentManager()
+                        .beginTransaction()
+                        .replace(R.id.PrefScrnSettings3, Fragment3)
+                        .commit();
+
+                SettingView3.setVisibility(View.GONE);
+                FullScrn3.setVisibility(View.GONE);
+                if (exitScrnFlag) exitScrn3.setVisibility(View.INVISIBLE);
+                mBotmRightCam_RecordButton.setVisibility(View.GONE);
+                mBotmRightCam_PictureButton.setVisibility(View.GONE);
+                break;
+
+            default:
+                break;
+        }
+    }
+
+    public void settingClose(View view) {
+        FrameLayout frameLayout;
+
+        switch (view.getId()) {
+            case R.id.mSettingClose0:
+                frameLayout = findViewById(R.id.PrefScrnSettings0);
+
+                getFragmentManager().beginTransaction().remove(Fragment).commit();
+
+                frameLayout.setVisibility(View.GONE);
+                view.setVisibility(view.GONE);
+                SettingView0.setVisibility(View.VISIBLE);
+
+                if (!exitScrnFlag)
+                    FullScrn0.setVisibility(View.VISIBLE);
+                else
+                    exitScrn0.setVisibility(View.VISIBLE);
+
+                mTopLeftCam_RecordButton.setVisibility(View.VISIBLE);
+                mTopLeftCam_PictureButton.setVisibility(View.VISIBLE);
+
+                mTopLeftCam.createCameraPreview();
+
+                break;
+            case R.id.mSettingClose1:
+                frameLayout = findViewById(R.id.PrefScrnSettings1);
+
+                getFragmentManager().beginTransaction().remove(Fragment1).commit();
+
+                frameLayout.setVisibility(View.GONE);
+                view.setVisibility(view.GONE);
+                SettingView1.setVisibility(View.VISIBLE);
+
+                if (!exitScrnFlag)
+                    FullScrn1.setVisibility(View.VISIBLE);
+                else
+                    exitScrn1.setVisibility(View.VISIBLE);
+
+                mTopRightCam_RecordButton.setVisibility(View.VISIBLE);
+                mTopRightCam_PictureButton.setVisibility(View.VISIBLE);
+
+                mTopRightCam.createCameraPreview();
+
+                break;
+            case R.id.mSettingClose2:
+                frameLayout = findViewById(R.id.PrefScrnSettings2);
+                getFragmentManager().beginTransaction().remove(Fragment2).commit();
+
+                frameLayout.setVisibility(View.GONE);
+                view.setVisibility(view.GONE);
+                SettingView2.setVisibility(View.VISIBLE);
+
+                if (!exitScrnFlag)
+                    FullScrn2.setVisibility(View.VISIBLE);
+                else
+                    exitScrn2.setVisibility(View.VISIBLE);
+
+                mBotmLeftCam_RecordButton.setVisibility(View.VISIBLE);
+                mBotmLeftCam_PictureButton.setVisibility(View.VISIBLE);
+
+                mBotmLeftCam.createCameraPreview();
+
+                break;
+            case R.id.mSettingClose3:
+                frameLayout = findViewById(R.id.PrefScrnSettings3);
+                getFragmentManager().beginTransaction().remove(Fragment3).commit();
+
+                frameLayout.setVisibility(View.GONE);
+                view.setVisibility(view.GONE);
+                SettingView3.setVisibility(View.VISIBLE);
+
+                if (!exitScrnFlag)
+                    FullScrn3.setVisibility(View.VISIBLE);
+                else
+                    exitScrn3.setVisibility(View.VISIBLE);
+
+                mBotmRightCam_RecordButton.setVisibility(View.VISIBLE);
+                mBotmRightCam_PictureButton.setVisibility(View.VISIBLE);
+
+                mBotmRightCam.createCameraPreview();
+
+                break;
+
+            default:
+                break;
+        }
+    }
+
+    public void enterFullScreen(View view) {
+        LinearLayout LinLayout1, LinLayout2;
+
+        LinLayout1 = findViewById(R.id.TopLayout);
+
+        LinLayout2 = findViewById(R.id.BtmLayout);
+
+        switch (view.getId()) {
+            case R.id.imageView0:
+                this.setTitle("TopLeftCam");
+                exitScrnFlag = true;
+                exitScrn0.setVisibility(View.VISIBLE);
+                FullScrn0.setVisibility(View.GONE);
+
+                frameView1.setVisibility(View.GONE);
+
+                LinLayout2.setVisibility(View.GONE);
+
+                break;
+            case R.id.exitFullScreen0:
+                this.setTitle("MultiCamera");
+                exitScrnFlag = false;
+
+                FullScrn0.setVisibility(View.VISIBLE);
+
+                exitScrn0.setVisibility(View.GONE);
+
+                switch (FrameVisibility[1]) {
+                    case View.VISIBLE:
+
+                        frameView1.setVisibility(View.VISIBLE);
+
+                        break;
+
+                    case View.INVISIBLE:
+
+                        frameView1.setVisibility(View.INVISIBLE);
+
+                        break;
+                    default:
+                        break;
+                }
+
+                FrameVisibility[1] = frameView1.getVisibility();
+
+                LinLayout2.setVisibility(View.VISIBLE);
+
+                break;
+            case R.id.imageView1:
+                this.setTitle("TopRightCam");
+                exitScrnFlag = true;
+                FullScrn1.setVisibility(View.GONE);
+                exitScrn1.setVisibility(View.VISIBLE);
+
+                frameView0.setVisibility(View.GONE);
+                LinLayout2.setVisibility(View.GONE);
+
+                break;
+            case R.id.exitFullScreen1:
+                this.setTitle("MultiCamera");
+
+                exitScrnFlag = false;
+                FullScrn1.setVisibility(View.VISIBLE);
+                exitScrn1.setVisibility(View.GONE);
+
+                switch (FrameVisibility[0]) {
+                    case View.VISIBLE:
+
+                        frameView0.setVisibility(View.VISIBLE);
+
+                        break;
+
+                    case View.INVISIBLE:
+
+                        frameView0.setVisibility(View.INVISIBLE);
+
+                        break;
+                    default:
+                        break;
+                }
+
+                FrameVisibility[0] = frameView0.getVisibility();
+
+                LinLayout2.setVisibility(View.VISIBLE);
+
+                break;
+
+            case R.id.imageView2:
+                this.setTitle("BotmLeftCam");
+
+                exitScrnFlag = true;
+                FullScrn2.setVisibility(View.GONE);
+                exitScrn2.setVisibility(View.VISIBLE);
+
+                frameView3.setVisibility(View.GONE);
+                LinLayout1.setVisibility(View.GONE);
+
+                break;
+            case R.id.exitFullScreen2:
+                this.setTitle("MultiCamera");
+
+                exitScrnFlag = false;
+                FullScrn2.setVisibility(View.VISIBLE);
+                exitScrn2.setVisibility(View.GONE);
+
+                switch (FrameVisibility[3]) {
+                    case View.VISIBLE:
+
+                        frameView3.setVisibility(View.VISIBLE);
+
+                        break;
+
+                    case View.INVISIBLE:
+
+                        frameView3.setVisibility(View.INVISIBLE);
+
+                        break;
+                    default:
+                        break;
+                }
+
+                FrameVisibility[3] = frameView3.getVisibility();
+
+                LinLayout1.setVisibility(View.VISIBLE);
+
+                break;
+            case R.id.imageView3:
+                this.setTitle("BotmRightCam");
+                exitScrnFlag = true;
+                FullScrn3.setVisibility(View.GONE);
+                exitScrn3.setVisibility(View.VISIBLE);
+
+                frameView2.setVisibility(View.GONE);
+                LinLayout1.setVisibility(View.GONE);
+
+                break;
+            case R.id.exitFullScreen3:
+                this.setTitle("MultiCamera");
+                exitScrnFlag = false;
+                FullScrn3.setVisibility(View.VISIBLE);
+                exitScrn3.setVisibility(View.GONE);
+
+                switch (FrameVisibility[2]) {
+                    case View.VISIBLE:
+
+                        frameView2.setVisibility(View.VISIBLE);
+
+                        break;
+
+                    case View.INVISIBLE:
+
+                        frameView2.setVisibility(View.INVISIBLE);
+
+                        break;
+                    default:
+                        break;
+                }
+
+                FrameVisibility[2] = frameView2.getVisibility();
+
+                LinLayout1.setVisibility(View.VISIBLE);
+
+                break;
+            default:
+                break;
+        }
+    }
+}
diff --git a/camera/MultiCameraApplication/java/com/intel/multicamera/PermissionsActivity.java b/camera/MultiCameraApplication/java/com/intel/multicamera/PermissionsActivity.java
index d790051..3098a61 100644
--- a/camera/MultiCameraApplication/java/com/intel/multicamera/PermissionsActivity.java
+++ b/camera/MultiCameraApplication/java/com/intel/multicamera/PermissionsActivity.java
@@ -37,44 +37,22 @@ public class PermissionsActivity extends QuickActivity {
     private String TAG = "PermissionsActivity";
 
     private static int PERMISSION_REQUEST_CODE = 1;
-    private static int RESULT_CODE_OK = 1;
-    private static int RESULT_CODE_FAILED = 2;
 
     private int mIndexPermissionRequestCamera;
     private int mIndexPermissionRequestMicrophone;
-    private int mIndexPermissionRequestLocation;
     private int mIndexPermissionRequestStorage;
     private boolean mShouldRequestCameraPermission;
     private boolean mShouldRequestMicrophonePermission;
-    private boolean mShouldRequestLocationPermission;
     private boolean mShouldRequestStoragePermission;
     private int mNumPermissionsToRequest;
     private boolean mFlagHasCameraPermission;
     private boolean mFlagHasMicrophonePermission;
     private boolean mFlagHasStoragePermission;
 
-    /**
-     * Close activity when secure app passes lock screen or screen turns
-     * off.
-
-    private final BroadcastReceiver mShutdownReceiver = new BroadcastReceiver() {
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            Log.v(TAG, "received intent, finishing: " + intent.getAction());
-            finish();
-        }
-    };
-  */
-
     @Override
     protected void onCreateTasks(Bundle savedInstanceState) {
         setContentView(R.layout.permissions);
 
-        // Filter for screen off so that we can finish permissions activity
-        // when screen is off.
-        // IntentFilter filter_screen_off = new IntentFilter(Intent.ACTION_SCREEN_OFF);
-        // registerReceiver(mShutdownReceiver, filter_screen_off);
-
         Window win = getWindow();
         win.clearFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);
     }
@@ -88,8 +66,6 @@ public class PermissionsActivity extends QuickActivity {
     @Override
     protected void onDestroyTasks() {
         Log.v(TAG, "onDestroy: unregistering receivers");
-
-        // unregisterReceiver(mShutdownReceiver);
     }
 
     /**
@@ -104,10 +80,8 @@ public class PermissionsActivity extends QuickActivity {
 
         if (value.compareTo("false") == 0) {
             ret = false;
-            Log.d(TAG, "####FALSE");
 
         } else if (value.compareTo("true") == 0) {
-            Log.d(TAG, "####TRUE");
             ret = true;
         }
 
@@ -123,7 +97,7 @@ public class PermissionsActivity extends QuickActivity {
         try {
             return preferences.getString(key, defaultValue);
         } catch (ClassCastException e) {
-            Log.w(TAG, "existing preference with invalid type, removing and returning default", e);
+            Log.w(TAG, "existing preference with invalid type,removing and returning default", e);
             preferences.edit().remove(key).apply();
             return defaultValue;
         }
@@ -149,7 +123,7 @@ public class PermissionsActivity extends QuickActivity {
         }
 
         if (ActivityCompat.checkSelfPermission(getApplicationContext(),
-                                               Manifest.permission.READ_EXTERNAL_STORAGE) !=
+                                               Manifest.permission.WRITE_EXTERNAL_STORAGE) !=
             PackageManager.PERMISSION_GRANTED) {
             mNumPermissionsToRequest++;
             mShouldRequestStoragePermission = true;
@@ -160,11 +134,13 @@ public class PermissionsActivity extends QuickActivity {
         if (mNumPermissionsToRequest != 0) {
             if (!convertToBoolean(getString("pref_has_seen_permissions_dialogs", "false"))) {
                 buildPermissionsRequest();
+
             } else {
                 // Permissions dialog has already been shown, or we're on
                 // lockscreen, and we're still missing permissions.
                 handlePermissionsFailure();
             }
+
         } else {
             handlePermissionsSuccess();
         }
@@ -238,7 +214,7 @@ public class PermissionsActivity extends QuickActivity {
     }
 
     private void handlePermissionsSuccess() {
-        Intent intent = new Intent(this, MainActivity.class);
+        Intent intent = new Intent(this, MultiViewActivity.class);
         startActivity(intent);
         finish();
     }
diff --git a/camera/MultiCameraApplication/java/com/intel/multicamera/QuickActivity.java b/camera/MultiCameraApplication/java/com/intel/multicamera/QuickActivity.java
index b839edb..a2b99da 100644
--- a/camera/MultiCameraApplication/java/com/intel/multicamera/QuickActivity.java
+++ b/camera/MultiCameraApplication/java/com/intel/multicamera/QuickActivity.java
@@ -53,12 +53,18 @@ import android.util.Log;
 public abstract class QuickActivity extends Activity {
     private String TAG = "QuickActivity";
 
-    /** onResume tasks delay from secure lockscreen. */
+    /**
+     * onResume tasks delay from secure lockscreen.
+     */
     private static final long ON_RESUME_DELAY_SECURE_MILLIS = 30;
-    /** onResume tasks delay from non-secure lockscreen. */
+    /**
+     * onResume tasks delay from non-secure lockscreen.
+     */
     private static final long ON_RESUME_DELAY_NON_SECURE_MILLIS = 15;
 
-    /** A reference to the main handler on which to run lifecycle methods. */
+    /**
+     * A reference to the main handler on which to run lifecycle methods.
+     */
     private Handler mMainHandler;
 
     /**
@@ -67,9 +73,13 @@ public abstract class QuickActivity extends Activity {
      */
     private boolean mSkippedFirstOnResume = false;
 
-    /** When application execution started in SystemClock.elapsedRealtimeNanos(). */
+    /**
+     * When application execution started in SystemClock.elapsedRealtimeNanos().
+     */
     protected long mExecutionStartNanoTime = 0;
-    /** Was this session started with onCreate(). */
+    /**
+     * Was this session started with onCreate().
+     */
     protected boolean mStartupOnCreate = false;
 
     /**
diff --git a/camera/MultiCameraApplication/java/com/intel/multicamera/RoundedThumbnailView.java b/camera/MultiCameraApplication/java/com/intel/multicamera/RoundedThumbnailView.java
new file mode 100644
index 0000000..85206a9
--- /dev/null
+++ b/camera/MultiCameraApplication/java/com/intel/multicamera/RoundedThumbnailView.java
@@ -0,0 +1,767 @@
+/*
+ * Copyright (C) 2014 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.intel.multicamera;
+
+import android.animation.Animator;
+import android.animation.AnimatorListenerAdapter;
+import android.animation.AnimatorSet;
+import android.animation.ValueAnimator;
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.BitmapShader;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Matrix;
+import android.graphics.Paint;
+import android.graphics.RectF;
+import android.graphics.Shader;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.View;
+import android.view.animation.AccelerateDecelerateInterpolator;
+import android.view.animation.Interpolator;
+import java.util.Optional;
+
+/**
+ * A view that shows a pop-out effect for a thumbnail image as the new capture indicator design for
+ * Haleakala. When a photo is taken, this view will appear in the bottom right corner of the view
+ * finder to indicate the capture is done.
+ * <p>
+ * Thumbnail cropping:
+ * (1) 100% width and vertically centered for portrait.
+ * (2) 100% height and horizontally centered for landscape.
+ * <p>
+ * General behavior spec: Hide the capture indicator by fading out using fast_out_linear_in (150ms):
+ * (1) User open filmstrip.
+ * (2) User switch module.
+ * (3) User switch front/back camera.
+ * (4) User close app.
+ * <p>
+ * Visual spec:
+ * (1) A 12dp spacing between mode option overlay and thumbnail.
+ * (2) A circular mask that excludes the corners of the preview image.
+ * (3) A solid white layer that sits on top of the preview and is also masked by 2).
+ * (4) The preview thumbnail image.
+ * (5) A 'ripple' which is just a white circular stroke.
+ * <p>
+ * Animation spec:
+ * - For (2) only the scale animates, from 50%(24dp) to 114%(54dp) in 200ms then falls back to
+ * 100%(48dp) in 200ms. Both steps use the same easing: fast_out_slow_in.
+ * - For (3), change opacity from 50% to 0% over 150ms, easing is exponential.
+ * - For (4), doesn't animate.
+ * - For (5), starts animating after 100ms, when (1) is at its peak radius and all animations take
+ * 200ms, using linear_out_slow in. Opacity goes from 40% to 0%, radius goes from 40dp to 70dp,
+ * stroke width goes from 5dp to 1dp.
+ */
+public class RoundedThumbnailView extends View {
+    private static final String TAG = "RoundedThumbnailView";
+
+    // Configurations for the thumbnail pop-out effect.
+    private static final long THUMBNAIL_STRETCH_DURATION_MS = 200;
+    private static final long THUMBNAIL_SHRINK_DURATION_MS = 200;
+    private static final float THUMBNAIL_REVEAL_CIRCLE_OPACITY_BEGIN = 0.5f;
+    private static final float THUMBNAIL_REVEAL_CIRCLE_OPACITY_END = 0.0f;
+
+    // Configurations for the ripple effect.
+    private static final long RIPPLE_DURATION_MS = 200;
+    private static final float RIPPLE_OPACITY_BEGIN = 0.4f;
+    private static final float RIPPLE_OPACITY_END = 0.0f;
+
+    // Configurations for the hit-state effect.
+    private static final float HIT_STATE_CIRCLE_OPACITY_HIDDEN = -1.0f;
+    private static final float HIT_STATE_CIRCLE_OPACITY_BEGIN = 0.7f;
+    private static final float HIT_STATE_CIRCLE_OPACITY_END = 0.0f;
+    private static final long HIT_STATE_DURATION_MS = 150;
+
+    /**
+     * Defines call events.
+     */
+    public interface Callback { public void onHitStateFinished(); }
+
+    /**
+     * The registered callback.
+     */
+    private Optional<Callback> mCallback;
+
+    // Fields for view layout.
+    private float mThumbnailPadding;
+    private RectF mViewRect;
+
+    // Fields for the thumbnail pop-out effect.
+    /**
+     * The animators to move the thumbnail.
+     */
+    private AnimatorSet mThumbnailAnimatorSet;
+    /**
+     * The current diameter for the thumbnail image.
+     */
+    private float mCurrentThumbnailDiameter;
+    /**
+     * The current reveal circle opacity.
+     */
+    private float mCurrentRevealCircleOpacity;
+    /**
+     * The duration of the stretch phase in thumbnail pop-out effect.
+     */
+    private long mThumbnailStretchDurationMs;
+    /**
+     * The duration of the shrink phase in thumbnail pop-out effect.
+     */
+    private long mThumbnailShrinkDurationMs;
+    /**
+     * The beginning diameter of the thumbnail for the stretch phase in
+     * thumbnail pop-out effect.
+     */
+    private float mThumbnailStretchDiameterBegin;
+    /**
+     * The ending diameter of the thumbnail for the stretch phase in thumbnail
+     * pop-out effect.
+     */
+    private float mThumbnailStretchDiameterEnd;
+    /**
+     * The beginning diameter of the thumbnail for the shrink phase in thumbnail
+     * pop-out effect.
+     */
+    private float mThumbnailShrinkDiameterBegin;
+    /**
+     * The ending diameter of the thumbnail for the shrink phase in thumbnail
+     * pop-out effect.
+     */
+    private float mThumbnailShrinkDiameterEnd;
+    /**
+     * Paint object for the reveal circle.
+     */
+    private final Paint mRevealCirclePaint;
+
+    // Fields for the ripple effect.
+    /**
+     * The start delay of the ripple effect.
+     */
+    private long mRippleStartDelayMs;
+    /**
+     * The duration of the ripple effect.
+     */
+    private long mRippleDurationMs;
+    /**
+     * The beginning diameter of the ripple ring.
+     */
+    private float mRippleRingDiameterBegin;
+    /**
+     * The ending diameter of the ripple ring.
+     */
+    private float mRippleRingDiameterEnd;
+    /**
+     * The beginning thickness of the ripple ring.
+     */
+    private float mRippleRingThicknessBegin;
+    /**
+     * The ending thickness of the ripple ring.
+     */
+    private float mRippleRingThicknessEnd;
+    /**
+     * A lazily loaded animator for the ripple effect.
+     */
+    private ValueAnimator mRippleAnimator;
+    /**
+     * The current ripple ring diameter which is updated by the ripple animator
+     * and used by onDraw().
+     */
+    private float mCurrentRippleRingDiameter;
+    /**
+     * The current ripple ring thickness which is updated by the ripple animator
+     * and used by onDraw().
+     */
+    private float mCurrentRippleRingThickness;
+    /**
+     * The current ripple ring opacity which is updated by the ripple animator
+     * and used by onDraw().
+     */
+    private float mCurrentRippleRingOpacity;
+    /**
+     * The paint used for drawing the ripple effect.
+     */
+    private final Paint mRipplePaint;
+
+    // Fields for the hit state effect.
+    /**
+     * The paint to draw hit state circle.
+     */
+    private final Paint mHitStateCirclePaint;
+    /**
+     * The current hit state circle opacity (0.0 - 1.0) which is updated by the
+     * hit state animator. If -1, the hit state circle won't be drawn.
+     */
+    private float mCurrentHitStateCircleOpacity;
+
+    /**
+     * The pending reveal request. This is created when start is called, but is
+     * not drawn until the thumbnail is available. Once the bitmap is available
+     * it is swapped into the foreground request.
+     */
+    private RevealRequest mPendingRequest;
+
+    /**
+     * The currently animating reveal request.
+     */
+    private RevealRequest mForegroundRequest;
+
+    /**
+     * The latest finished reveal request. Its thumbnail will be shown until
+     * a newer one replace it.
+     */
+    private RevealRequest mBackgroundRequest;
+
+    private View.OnClickListener mOnClickListener = new View.OnClickListener() {
+        @Override
+        public void onClick(View v) {
+            // Trigger the hit state animation. Fade out the hit state white
+            // circle by changing the alpha.
+            final ValueAnimator hitStateAnimator = ValueAnimator.ofFloat(
+                    HIT_STATE_CIRCLE_OPACITY_BEGIN, HIT_STATE_CIRCLE_OPACITY_END);
+            hitStateAnimator.setDuration(HIT_STATE_DURATION_MS);
+            hitStateAnimator.setInterpolator(new AccelerateDecelerateInterpolator());
+            hitStateAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
+                @Override
+                public void onAnimationUpdate(ValueAnimator valueAnimator) {
+                    mCurrentHitStateCircleOpacity = (Float)valueAnimator.getAnimatedValue();
+                    invalidate();
+                }
+            });
+            hitStateAnimator.addListener(new AnimatorListenerAdapter() {
+                @Override
+                public void onAnimationEnd(Animator animation) {
+                    super.onAnimationEnd(animation);
+
+                    mCurrentHitStateCircleOpacity = HIT_STATE_CIRCLE_OPACITY_HIDDEN;
+
+                    if (mCallback.isPresent()) {
+                        mCallback.get().onHitStateFinished();
+                    }
+                }
+            });
+            hitStateAnimator.start();
+        }
+    };
+
+    /**
+     * Constructs a RoundedThumbnailView.
+     */
+    public RoundedThumbnailView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+
+        mCallback = Optional.empty();
+
+        // Make the view clickable.
+        setClickable(true);
+        setOnClickListener(mOnClickListener);
+
+        mThumbnailPadding = getResources().getDimension(R.dimen.rounded_thumbnail_padding);
+
+        // Load thumbnail pop-out effect constants.
+        mThumbnailStretchDurationMs = THUMBNAIL_STRETCH_DURATION_MS;
+        mThumbnailShrinkDurationMs = THUMBNAIL_SHRINK_DURATION_MS;
+        mThumbnailStretchDiameterBegin =
+                getResources().getDimension(R.dimen.rounded_thumbnail_diameter_min);
+        mThumbnailStretchDiameterEnd =
+                getResources().getDimension(R.dimen.rounded_thumbnail_diameter_max);
+        mThumbnailShrinkDiameterBegin = mThumbnailStretchDiameterEnd;
+        mThumbnailShrinkDiameterEnd =
+                getResources().getDimension(R.dimen.rounded_thumbnail_diameter_normal);
+        // Load ripple effect constants.
+        float startDelayRatio = 0.5f;
+        mRippleStartDelayMs = (long)(mThumbnailStretchDurationMs * startDelayRatio);
+        mRippleDurationMs = RIPPLE_DURATION_MS;
+        mRippleRingDiameterEnd =
+                getResources().getDimension(R.dimen.rounded_thumbnail_ripple_ring_diameter_max);
+
+        mViewRect = new RectF(0, 0, mRippleRingDiameterEnd, mRippleRingDiameterEnd);
+
+        mRippleRingDiameterBegin =
+                getResources().getDimension(R.dimen.rounded_thumbnail_ripple_ring_diameter_min);
+        mRippleRingThicknessBegin =
+                getResources().getDimension(R.dimen.rounded_thumbnail_ripple_ring_thick_max);
+        mRippleRingThicknessEnd =
+                getResources().getDimension(R.dimen.rounded_thumbnail_ripple_ring_thick_min);
+
+        mCurrentHitStateCircleOpacity = HIT_STATE_CIRCLE_OPACITY_HIDDEN;
+        // Draw the reveal while circle.
+        mHitStateCirclePaint = new Paint();
+        mHitStateCirclePaint.setAntiAlias(true);
+        mHitStateCirclePaint.setColor(Color.WHITE);
+        mHitStateCirclePaint.setStyle(Paint.Style.FILL);
+
+        mRipplePaint = new Paint();
+        mRipplePaint.setAntiAlias(true);
+        mRipplePaint.setColor(Color.WHITE);
+        mRipplePaint.setStyle(Paint.Style.STROKE);
+
+        mRevealCirclePaint = new Paint();
+        mRevealCirclePaint.setAntiAlias(true);
+        mRevealCirclePaint.setColor(Color.WHITE);
+        mRevealCirclePaint.setStyle(Paint.Style.FILL);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        // Ignore the spec since the size should be fixed.
+        int desiredSize = (int)mRippleRingDiameterEnd;
+        setMeasuredDimension(desiredSize, desiredSize);
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+
+        final float centerX = canvas.getWidth() / 2;
+        final float centerY = canvas.getHeight() / 2;
+
+        final float viewDiameter = mRippleRingDiameterEnd;
+        final float finalDiameter = mThumbnailShrinkDiameterEnd;
+
+        canvas.clipRect(mViewRect);
+
+        // Draw the thumbnail of latest finished reveal request.
+        if (mBackgroundRequest != null) {
+            Paint thumbnailPaint = mBackgroundRequest.getThumbnailPaint();
+            if (thumbnailPaint != null) {
+                // Draw the old thumbnail with the final diameter.
+                float scaleRatio = finalDiameter / viewDiameter;
+
+                canvas.save();
+                canvas.scale(scaleRatio, scaleRatio, centerX, centerY);
+                canvas.drawRoundRect(mViewRect, centerX, centerY, thumbnailPaint);
+                canvas.restore();
+            }
+        }
+
+        // Draw animated parts (thumbnail and ripple) if there exists a reveal request.
+        if (mForegroundRequest != null) {
+            // Draw ripple ring first or the ring will cover thumbnail.
+            if (mCurrentRippleRingThickness > 0) {
+                // Draw the ripple ring.
+                mRipplePaint.setAlpha((int)(mCurrentRippleRingOpacity * 255));
+                mRipplePaint.setStrokeWidth(mCurrentRippleRingThickness);
+
+                canvas.save();
+                canvas.drawCircle(centerX, centerY, mCurrentRippleRingDiameter / 2, mRipplePaint);
+                canvas.restore();
+            }
+
+            // Achieve the animation effect by scaling the transformation matrix.
+            float scaleRatio = mCurrentThumbnailDiameter / mRippleRingDiameterEnd;
+
+            canvas.save();
+            canvas.scale(scaleRatio, scaleRatio, centerX, centerY);
+
+            // Draw the new popping up thumbnail.
+            Paint thumbnailPaint = mForegroundRequest.getThumbnailPaint();
+            if (thumbnailPaint != null) {
+                canvas.drawRoundRect(mViewRect, centerX, centerY, thumbnailPaint);
+            }
+
+            // Draw the reveal while circle.
+            mRevealCirclePaint.setAlpha((int)(mCurrentRevealCircleOpacity * 255));
+            canvas.drawCircle(centerX, centerY, mRippleRingDiameterEnd / 2, mRevealCirclePaint);
+
+            canvas.restore();
+        }
+
+        // Draw hit state circle if necessary.
+        if (mCurrentHitStateCircleOpacity != HIT_STATE_CIRCLE_OPACITY_HIDDEN) {
+            canvas.save();
+            final float scaleRatio = finalDiameter / viewDiameter;
+            canvas.scale(scaleRatio, scaleRatio, centerX, centerY);
+
+            // Draw the hit state while circle.
+            mHitStateCirclePaint.setAlpha((int)(mCurrentHitStateCircleOpacity * 255));
+            canvas.drawCircle(centerX, centerY, mRippleRingDiameterEnd / 2, mHitStateCirclePaint);
+            canvas.restore();
+        }
+    }
+
+    /**
+     * Sets the callback.
+     *
+     * @param callback The callback to be set.
+     */
+    public void setCallback(Callback callback) {
+        mCallback = Optional.of(callback);
+    }
+
+    /**
+     * Gets the padding size with mode options and preview edges.
+     *
+     * @return The padding size with mode options and preview edges.
+     */
+    public float getThumbnailPadding() {
+        return mThumbnailPadding;
+    }
+
+    /**
+     * Gets the diameter of the thumbnail image after the revealing animation.
+     *
+     * @return The diameter of the thumbnail image after the revealing animation.
+     */
+    public float getThumbnailFinalDiameter() {
+        return mThumbnailShrinkDiameterEnd;
+    }
+
+    /**
+     * Starts the thumbnail revealing animation.
+     *
+     * @param accessibilityString An accessibility String to be announced during the revealing
+     *                            animation.
+     */
+    public void startRevealThumbnailAnimation(String accessibilityString) {
+        // MainThread.checkMainThread();
+        // Create a new request.
+        mPendingRequest = new RevealRequest(getMeasuredWidth(), accessibilityString);
+    }
+
+    /**
+     * Updates the thumbnail image.
+     *
+     * @param thumbnailBitmap The thumbnail image to be shown.
+     * @param rotation        The orientation of the image in degrees.
+     */
+    public void setThumbnail(final Bitmap thumbnailBitmap, final int rotation) {
+        // MainThread.checkMainThread();
+
+        if (mPendingRequest != null) {
+            mPendingRequest.setThumbnailBitmap(thumbnailBitmap, rotation);
+
+            runPendingRequestAnimation();
+        } else {
+            Log.e(TAG, "Pending thumb was null!");
+        }
+    }
+
+    /**
+     * Hide the thumbnail.
+     */
+    public void hideThumbnail() {
+        setVisibility(GONE);
+
+        clearAnimations();
+
+        // Remove all pending reveal requests.
+        mPendingRequest = null;
+        mForegroundRequest = null;
+        mBackgroundRequest = null;
+    }
+
+    /**
+     * Stop currently running animators.
+     */
+    private void clearAnimations() {
+        // Stop currently running animators.
+        if (mThumbnailAnimatorSet != null && mThumbnailAnimatorSet.isRunning()) {
+            mThumbnailAnimatorSet.removeAllListeners();
+            mThumbnailAnimatorSet.cancel();
+            // Release the animator so that a new instance will be created and
+            // its listeners properly reconnected.  Fix for b/19034435
+            mThumbnailAnimatorSet = null;
+        }
+
+        if (mRippleAnimator != null && mRippleAnimator.isRunning()) {
+            mRippleAnimator.removeAllListeners();
+            mRippleAnimator.cancel();
+            // Release the animator so that a new instance will be created and
+            // its listeners properly reconnected.  Fix for b/19034435
+            mRippleAnimator = null;
+        }
+    }
+
+    public void Invisible() {
+        setVisibility(INVISIBLE);
+    }
+
+    /**
+     * Set the foreground request to the background, complete it, and run the
+     * animation for the pending thumbnail.
+     */
+    private void runPendingRequestAnimation() {
+        // Shift foreground to background, and pending to foreground.
+        if (mForegroundRequest != null) {
+            mBackgroundRequest = mForegroundRequest;
+            mBackgroundRequest.finishRippleAnimation();
+            mBackgroundRequest.finishThumbnailAnimation();
+        }
+
+        mForegroundRequest = mPendingRequest;
+        mPendingRequest = null;
+
+        // Make this view visible.
+
+        setVisibility(VISIBLE);
+
+        // Ensure there are no running animations.
+        clearAnimations();
+
+        Interpolator stretchInterpolator;
+        stretchInterpolator = new AccelerateDecelerateInterpolator();
+
+        // The first phase of thumbnail animation. Stretch the thumbnail to the maximal size.
+        ValueAnimator stretchAnimator =
+                ValueAnimator.ofFloat(mThumbnailStretchDiameterBegin, mThumbnailStretchDiameterEnd);
+        stretchAnimator.setDuration(mThumbnailStretchDurationMs);
+        stretchAnimator.setInterpolator(stretchInterpolator);
+        stretchAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
+            @Override
+            public void onAnimationUpdate(ValueAnimator valueAnimator) {
+                mCurrentThumbnailDiameter = (Float)valueAnimator.getAnimatedValue();
+                float fraction = valueAnimator.getAnimatedFraction();
+                float opacityDiff =
+                        THUMBNAIL_REVEAL_CIRCLE_OPACITY_END - THUMBNAIL_REVEAL_CIRCLE_OPACITY_BEGIN;
+                mCurrentRevealCircleOpacity =
+                        THUMBNAIL_REVEAL_CIRCLE_OPACITY_BEGIN + fraction * opacityDiff;
+                invalidate();
+            }
+        });
+
+        // The second phase of thumbnail animation. Shrink the thumbnail to the final size.
+        Interpolator shrinkInterpolator = stretchInterpolator;
+        ValueAnimator shrinkAnimator =
+                ValueAnimator.ofFloat(mThumbnailShrinkDiameterBegin, mThumbnailShrinkDiameterEnd);
+        shrinkAnimator.setDuration(mThumbnailShrinkDurationMs);
+        shrinkAnimator.setInterpolator(shrinkInterpolator);
+        shrinkAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
+            @Override
+            public void onAnimationUpdate(ValueAnimator valueAnimator) {
+                mCurrentThumbnailDiameter = (Float)valueAnimator.getAnimatedValue();
+                invalidate();
+            }
+        });
+
+        // The stretch and shrink animators play sequentially.
+        mThumbnailAnimatorSet = new AnimatorSet();
+        mThumbnailAnimatorSet.playSequentially(stretchAnimator, shrinkAnimator);
+        mThumbnailAnimatorSet.addListener(new AnimatorListenerAdapter() {
+            @Override
+            public void onAnimationEnd(Animator animation) {
+                if (mForegroundRequest != null) {
+                    // Mark the thumbnail animation as finished.
+                    mForegroundRequest.finishThumbnailAnimation();
+                    processRevealRequests();
+                }
+            }
+        });
+
+        // Start thumbnail animation immediately.
+        mThumbnailAnimatorSet.start();
+
+        // When start shrinking the thumbnail, a ripple effect is triggered at the same time.
+        mRippleAnimator = ValueAnimator.ofFloat(mRippleRingDiameterBegin, mRippleRingDiameterEnd);
+        mRippleAnimator.setDuration(mRippleDurationMs);
+        mRippleAnimator.addListener(new AnimatorListenerAdapter() {
+            @Override
+            public void onAnimationEnd(Animator animation) {
+                if (mForegroundRequest != null) {
+                    mForegroundRequest.finishRippleAnimation();
+                    processRevealRequests();
+                }
+            }
+        });
+        mRippleAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
+            @Override
+            public void onAnimationUpdate(ValueAnimator valueAnimator) {
+                mCurrentRippleRingDiameter = (Float)valueAnimator.getAnimatedValue();
+                float fraction = valueAnimator.getAnimatedFraction();
+                mCurrentRippleRingThickness =
+                        mRippleRingThicknessBegin +
+                        fraction * (mRippleRingThicknessEnd - mRippleRingThicknessBegin);
+                mCurrentRippleRingOpacity = RIPPLE_OPACITY_BEGIN +
+                                            fraction * (RIPPLE_OPACITY_END - RIPPLE_OPACITY_BEGIN);
+                invalidate();
+            }
+        });
+
+        // Start ripple animation after delay.
+        mRippleAnimator.setStartDelay(mRippleStartDelayMs);
+        mRippleAnimator.start();
+
+        // Announce the accessibility string.
+        // announceForAccessibility(mForegroundRequest.getAccessibilityString());
+    }
+
+    private void processRevealRequests() {
+        if (mForegroundRequest != null && mForegroundRequest.isFinished()) {
+            mBackgroundRequest = mForegroundRequest;
+            mForegroundRequest = null;
+        }
+    }
+
+    @Override
+    public boolean hasOverlappingRendering() {
+        return true;
+    }
+
+    /**
+     * Encapsulates necessary information for a complete thumbnail reveal animation.
+     */
+    private static class RevealRequest {
+        // The size of the thumbnail.
+        private float mViewSize;
+
+        // The accessibility string.
+        private String mAccessibilityString;
+
+        // The cached Paint object to draw the thumbnail.
+        private Paint mThumbnailPaint;
+
+        // The flag to indicate if thumbnail animation of this request is full-filled.
+        private boolean mThumbnailAnimationFinished;
+
+        // The flag to indicate if ripple animation of this request is full-filled.
+        private boolean mRippleAnimationFinished;
+
+        /**
+         * Constructs a reveal request. Use setThumbnailBitmap() to specify a source bitmap for the
+         * thumbnail.
+         *
+         * @param viewSize            The size of the capture indicator view.
+         * @param accessibilityString The accessibility string of the request.
+         */
+        public RevealRequest(float viewSize, String accessibilityString) {
+            mAccessibilityString = accessibilityString;
+            mViewSize = viewSize;
+        }
+
+        /**
+         * Returns the accessibility string.
+         *
+         * @return the accessibility string.
+         */
+        public String getAccessibilityString() {
+            return mAccessibilityString;
+        }
+
+        /**
+         * Returns the paint object which can be used to draw the thumbnail on a Canvas.
+         *
+         * @return the paint object which can be used to draw the thumbnail on a Canvas.
+         */
+        public Paint getThumbnailPaint() {
+            return mThumbnailPaint;
+        }
+
+        /**
+         * Used to precompute the thumbnail paint from the given source bitmap.
+         */
+        private void precomputeThumbnailPaint(Bitmap srcBitmap, int rotation) {
+            // Lazy loading the thumbnail paint object.
+            if (mThumbnailPaint == null) {
+                // Can't create a paint object until the thumbnail bitmap is available.
+                if (srcBitmap == null) {
+                    return;
+                }
+                // The original bitmap should be a square shape.
+                if (srcBitmap.getWidth() != srcBitmap.getHeight()) {
+                    return;
+                }
+
+                // Create a bitmap shader for the paint.
+                BitmapShader shader =
+                        new BitmapShader(srcBitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);
+                if (srcBitmap.getWidth() != mViewSize) {
+                    // Create a transformation matrix for the bitmap shader if the size is not
+                    // matched.
+                    RectF srcRect =
+                            new RectF(0.0f, 0.0f, srcBitmap.getWidth(), srcBitmap.getHeight());
+                    RectF dstRect = new RectF(0.0f, 0.0f, mViewSize, mViewSize);
+
+                    Matrix shaderMatrix = new Matrix();
+
+                    // Scale the shader to fit the destination view size.
+                    shaderMatrix.setRectToRect(srcRect, dstRect, Matrix.ScaleToFit.FILL);
+
+                    // Rotate the image around the given source rect point.
+                    shaderMatrix.preRotate(rotation, srcRect.width() / 2, srcRect.height() / 2);
+
+                    shader.setLocalMatrix(shaderMatrix);
+                }
+
+                // Create the paint for drawing the thumbnail in a circle.
+                mThumbnailPaint = new Paint();
+                mThumbnailPaint.setAntiAlias(true);
+                mThumbnailPaint.setShader(shader);
+            }
+        }
+
+        /**
+         * Checks if the request is full-filled.
+         *
+         * @return True if both thumbnail animation and ripple animation are finished
+         */
+        public boolean isFinished() {
+            return mThumbnailAnimationFinished && mRippleAnimationFinished;
+        }
+
+        /**
+         * Marks the thumbnail animation is finished.
+         */
+        public void finishThumbnailAnimation() {
+            mThumbnailAnimationFinished = true;
+        }
+
+        /**
+         * Marks the ripple animation is finished.
+         */
+        public void finishRippleAnimation() {
+            mRippleAnimationFinished = true;
+        }
+
+        /**
+         * Updates the thumbnail image.
+         *
+         * @param thumbnailBitmap The thumbnail image to be shown.
+         * @param rotation        The orientation of the image in degrees.
+         */
+        public void setThumbnailBitmap(Bitmap thumbnailBitmap, int rotation) {
+            Bitmap originalBitmap = thumbnailBitmap;
+            // Crop the image if it is not square.
+            if (originalBitmap.getWidth() != originalBitmap.getHeight()) {
+                originalBitmap = cropCenterBitmap(originalBitmap);
+            }
+
+            precomputeThumbnailPaint(originalBitmap, rotation);
+        }
+
+        /**
+         * Obtains a square bitmap by cropping the center of a bitmap. If the given image is
+         * portrait, the cropped image keeps 100% original width and vertically centered to the
+         * original image. If the given image is landscape, the cropped image keeps 100% original
+         * height and horizontally centered to the original image.
+         *
+         * @param srcBitmap the bitmap image to be cropped in the center.
+         * @return a result square bitmap.
+         */
+        private Bitmap cropCenterBitmap(Bitmap srcBitmap) {
+            int srcWidth = srcBitmap.getWidth();
+            int srcHeight = srcBitmap.getHeight();
+            Bitmap dstBitmap;
+            if (srcWidth >= srcHeight) {
+                dstBitmap = Bitmap.createBitmap(srcBitmap, srcWidth / 2 - srcHeight / 2, 0,
+                                                srcHeight, srcHeight);
+            } else {
+                dstBitmap = Bitmap.createBitmap(srcBitmap, 0, srcHeight / 2 - srcWidth / 2,
+                                                srcWidth, srcWidth);
+            }
+            return dstBitmap;
+        }
+    }
+}
diff --git a/camera/MultiCameraApplication/java/com/intel/multicamera/SettingsActivity.java b/camera/MultiCameraApplication/java/com/intel/multicamera/SettingsActivity.java
index bf385e1..d2fef0f 100644
--- a/camera/MultiCameraApplication/java/com/intel/multicamera/SettingsActivity.java
+++ b/camera/MultiCameraApplication/java/com/intel/multicamera/SettingsActivity.java
@@ -16,28 +16,13 @@
 
 package com.intel.multicamera;
 
-import android.content.Context;
 import android.content.SharedPreferences;
 import android.content.SharedPreferences.OnSharedPreferenceChangeListener;
-import android.graphics.ImageFormat;
-import android.hardware.camera2.CameraAccessException;
-import android.hardware.camera2.CameraCharacteristics;
-import android.hardware.camera2.CameraManager;
-import android.hardware.camera2.params.StreamConfigurationMap;
-import android.media.CamcorderProfile;
 import android.os.Bundle;
 import android.util.Log;
-import android.util.Size;
-import android.util.SparseArray;
 import androidx.appcompat.app.ActionBar;
 import androidx.appcompat.app.AppCompatActivity;
-import androidx.preference.ListPreference;
-import androidx.preference.Preference;
 import androidx.preference.PreferenceFragment;
-import androidx.preference.PreferenceGroup;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
 
 public class SettingsActivity extends AppCompatActivity {
     private String TAG = "settings";
@@ -52,105 +37,19 @@ public class SettingsActivity extends AppCompatActivity {
             actionBar.setDisplayHomeAsUpEnabled(true);
         }
 
-        CameraManager manager = (CameraManager)getSystemService(Context.CAMERA_SERVICE);
-
-        try {
-            GlobalVariable.numOfCameras = manager.getCameraIdList().length;
-            Log.d(TAG, "Inside Settings Total Cameras: " + manager.getCameraIdList().length);
-        } catch (CameraAccessException e) {
-            e.printStackTrace();
-        }
-
-        if (GlobalVariable.numOfCameras != 0) getSupportedSize(manager);
-
         getFragmentManager()
                 .beginTransaction()
                 .replace(R.id.settings, new SettingsFragment())
                 .commit();
     }
 
-    public void getSupportedSize(CameraManager manager) {
-        try {
-            String camerId;
-
-            GlobalVariable.camerId = manager.getCameraIdList()[0];
-
-            camerId = GlobalVariable.camerId;
-
-            CameraCharacteristics characteristics = manager.getCameraCharacteristics(camerId);
-
-            StreamConfigurationMap map =
-                    characteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
-            if (map == null) {
-            }
-
-            GlobalVariable.SupportedSizes =
-                    new ArrayList<>(Arrays.asList(map.getOutputSizes(ImageFormat.JPEG)));
-
-        } catch (CameraAccessException e) {
-            e.printStackTrace();
-        }
-    }
-
     public static class SettingsFragment
             extends PreferenceFragment implements OnSharedPreferenceChangeListener {
         public String TAG = "SettingsFragment";
-        public static final String SIZE_LARGE = "large";
-        public static final String SIZE_MEDIUM = "medium";
-        public static final String SIZE_SMALL = "small";
-
-        public static String DEFAULT_KEY = "capture_list";
-
-        public String[] mCamcorderProfileNames;
-        private static final String SIZE_SETTING_STRING_DIMENSION_DELIMITER = "x";
-
-        public static SparseArray<SelectedVideoQualities> sCachedSelectedVideoQualities =
-                new SparseArray<SelectedVideoQualities>(3);
-        private static String mPrefChangedKey = null;
-        static boolean isPrefChangedKeyChanged = false;
-        /** The selected {@link CamcorderProfile} qualities. */
-        public static class SelectedVideoQualities {
-            public int large = -1;
-            public int medium = -1;
-            public int small = -1;
-
-            public int getFromSetting(String sizeSetting) {
-                // Sanitize the value to be either small, medium or large. Default
-                // to the latter.
-                if (!SIZE_SMALL.equals(sizeSetting) && !SIZE_MEDIUM.equals(sizeSetting)) {
-                    sizeSetting = SIZE_LARGE;
-                }
-
-                if (SIZE_LARGE.equals(sizeSetting)) {
-                    return large;
-                } else if (SIZE_MEDIUM.equals(sizeSetting)) {
-                    return medium;
-                } else {
-                    return small;
-                }
-            }
-        }
-
-        /** Video qualities sorted by size. */
-        public static int[] sVideoQualities =
-                new int[] {// CamcorderProfile.QUALITY_HIGH,
-                           CamcorderProfile.QUALITY_1080P, CamcorderProfile.QUALITY_720P,
-                           CamcorderProfile.QUALITY_480P,  CamcorderProfile.QUALITY_CIF,
-                           CamcorderProfile.QUALITY_QVGA,  CamcorderProfile.QUALITY_QCIF,
-                           CamcorderProfile.QUALITY_LOW};
-
-        static SelectedVideoQualities VideoQualities;
-        public int numOfCameras = GlobalVariable.numOfCameras;
-        public String camerId = GlobalVariable.camerId;
-        ;
-        public List<Size> PictureSizes = GlobalVariable.SupportedSizes;
 
         @Override
         public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
-            setPreferencesFromResource(R.xml.root_preferences, rootKey);
-            mCamcorderProfileNames = getResources().getStringArray(R.array.camcorder_profile_names);
-
-            isPrefChangedKeyChanged = false;
+            setPreferencesFromResource(R.xml.settings, rootKey);
         }
 
         @Override
@@ -160,24 +59,6 @@ public class SettingsActivity extends AppCompatActivity {
 
             Log.d(TAG, "SettingsFragment onResume");
 
-            /* Put in the summaries for the currently set values.
-            final PreferenceScreen Multi_Cam =
-                (PreferenceScreen) findPreference("multi_usb_cam_list");*/
-
-            setVisibilities();
-
-            if (numOfCameras > 0) {
-                VideoQualities = getSelectedVideoQualities(0);
-
-                // Put in the summaries for the currently set values.
-                final PreferenceGroup Prf_Resolution =
-                        (PreferenceGroup)findPreference("pref_resolution");
-
-                fillEntriesAndSummaries(Prf_Resolution);
-            }
-
-            Log.d(TAG, "SettingsFragment onResume end");
-
             getPreferenceScreen().getSharedPreferences().registerOnSharedPreferenceChangeListener(
                     this);
         }
@@ -191,310 +72,6 @@ public class SettingsActivity extends AppCompatActivity {
 
         @Override
         public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String Key) {
-            setSummary(findPreference(Key));
-            mPrefChangedKey = Key;
-            isPrefChangedKeyChanged = true;
-        }
-
-        public static String getchangedPrefKey() {
-            if (isPrefChangedKeyChanged == true) {
-                return mPrefChangedKey;
-            } else {
-                return DEFAULT_KEY;
-            }
-        }
-
-        /**
-         * Set the summary for the given preference. The given preference needs
-         * to be a {@link ListPreference}.
-         */
-        private void setSummary(Preference preference) {
-            if (!(preference instanceof ListPreference)) {
-                return;
-            }
-
-            ListPreference listPreference = (ListPreference)preference;
-            if (listPreference.getKey().equals("capture_list")) {
-                setSummaryForSelection(PictureSizes, listPreference);
-            } else if (listPreference.getKey().equals("video_list")) {
-                setSummaryForSelection(VideoQualities, listPreference);
-            } else {
-                listPreference.setSummary(listPreference.getEntry());
-            }
-        }
-
-        /**
-         * This is used to serialize a size to a string for storage in settings
-         *
-         * @param size The size to serialize.
-         * @return the string to be saved in preferences
-         */
-        private static String sizeToSettingString(Size size) {
-            return size.getWidth() + SIZE_SETTING_STRING_DIMENSION_DELIMITER + size.getHeight();
-        }
-
-        /**
-         * Sets the summary for the given list preference.
-         *
-         * @param displayableSizes The human readable preferred sizes
-         * @param preference The preference for which to set the summary.
-         */
-        private void setSummaryForSelection(List<Size> displayableSizes,
-                                            ListPreference preference) {
-            String setting = preference.getValue();
-            if (setting == null || !setting.contains("x")) {
-                return;
-            }
-            Size settingSize = sizeFromSettingString(setting);
-            if (settingSize == null) {
-                return;
-            }
-            preference.setSummary(getSizeSummaryString(settingSize));
-        }
-
-        /**
-         * Sets the summary for the given list preference.
-         *
-         * @param selectedQualities The selected video qualities.
-         * @param preference The preference for which to set the summary.
-         */
-        private void setSummaryForSelection(SelectedVideoQualities selectedQualities,
-                                            ListPreference preference) {
-            if (selectedQualities == null) {
-                return;
-            }
-
-            int selectedQuality = selectedQualities.getFromSetting(preference.getValue());
-            Log.d(TAG, "SettingsFragment selectedQuality " + selectedQuality);
-            preference.setSummary(mCamcorderProfileNames[selectedQuality]);
-        }
-
-        /**
-         * This parses a setting string and returns the representative size.
-         *
-         * @param sizeSettingString The string that stored in settings to represent a size.
-         * @return the represented Size.
-         */
-        public static Size sizeFromSettingString(String sizeSettingString) {
-            if (sizeSettingString == null) {
-                return null;
-            }
-            String[] parts = sizeSettingString.split(SIZE_SETTING_STRING_DIMENSION_DELIMITER);
-            if (parts.length != 2) {
-                return null;
-            }
-
-            try {
-                int width = Integer.parseInt(parts[0]);
-                int height = Integer.parseInt(parts[1]);
-                return new Size(width, height);
-            } catch (NumberFormatException ex) {
-                return null;
-            }
-        }
-
-        /**
-         * @param size The photo resolution.
-         * @return A human readable and translated string for labeling the
-         *         picture size in megapixels.
-         */
-        private String getSizeSummaryString(Size size) {
-            int width = size.getWidth();
-            int height = size.getHeight();
-            String result = getResources().getString(R.string.setting_summary_width_and_height,
-                                                     width, height);
-            return result;
-        }
-
-        /**
-         * Depending on camera availability on the device, this removes settings
-         * for cameras the device doesn't have.
-         */
-        private void setVisibilities() {
-            Log.d(TAG, "SettingsFragment setVisibilities");
-
-            PreferenceGroup Prf_Resolution = (PreferenceGroup)findPreference("pref_resolution");
-            PreferenceGroup Prf_Src = (PreferenceGroup)findPreference("pref_Source");
-            if (numOfCameras == 0) {
-                recursiveDelete(Prf_Resolution, findPreference("capture_list"));
-                recursiveDelete(Prf_Resolution, findPreference("video_list"));
-
-                recursiveDelete(Prf_Src, findPreference("multi_usb_cam_list"));
-            }
-        }
-
-        /**
-         * Recursively go through settings and fill entries and summaries of our
-         * preferences.
-         */
-
-        private void fillEntriesAndSummaries(PreferenceGroup group) {
-            for (int i = 0; i < group.getPreferenceCount(); ++i) {
-                Preference pref = group.getPreference(i);
-                if (pref instanceof PreferenceGroup) {
-                    fillEntriesAndSummaries((PreferenceGroup)pref);
-                }
-                setSummary(pref);
-                setEntries(pref);
-            }
-        }
-
-        /**
-         * Recursively traverses the tree from the given group as the route and
-         * tries to delete the preference. Traversal stops once the preference
-         * was found and removed.
-         */
-        private boolean recursiveDelete(PreferenceGroup group, Preference preference) {
-            Log.d(TAG, "SettingsFragment recursiveDelete");
-
-            if (group == null) {
-                Log.d(TAG, "attempting to delete from null preference group");
-                return false;
-            }
-            if (preference == null) {
-                Log.d(TAG, "attempting to delete null preference");
-                return false;
-            }
-            if (group.removePreference(preference)) {
-                Log.d(TAG, "Removal was successful.");
-                return true;
-            }
-
-            for (int i = 0; i < group.getPreferenceCount(); ++i) {
-                Preference pref = group.getPreference(i);
-                if (pref instanceof PreferenceGroup) {
-                    if (recursiveDelete((PreferenceGroup)pref, preference)) {
-                        return true;
-                    }
-                }
-            }
-            return false;
-        }
-
-        /**
-         * Set the entries for the given preference. The given preference needs
-         * to be a {@link ListPreference}
-         */
-        private void setEntries(Preference preference) {
-            if (!(preference instanceof ListPreference)) {
-                return;
-            }
-
-            ListPreference listPreference = (ListPreference)preference;
-            if (listPreference.getKey().equals("capture_list")) {
-                setEntriesForSelection(PictureSizes, listPreference);
-            } else if (listPreference.getKey().equals("video_list")) {
-                setEntriesForSelection(VideoQualities, listPreference);
-            }
-        }
-
-        /**
-         * Sets the entries for the given list preference.
-         *
-         * @param selectedSizes The possible S,M,L entries the user can choose
-         *            from.
-         * @param preference The preference to set the entries for.
-         */
-        private void setEntriesForSelection(List<Size> selectedSizes, ListPreference preference) {
-            if (selectedSizes == null) {
-                return;
-            }
-
-            String[] entries = new String[selectedSizes.size()];
-            String[] entryValues = new String[selectedSizes.size()];
-            for (int i = 0; i < selectedSizes.size(); i++) {
-                Size size = selectedSizes.get(i);
-                entries[i] = getSizeSummaryString(size);
-                entryValues[i] = sizeToSettingString(size);
-            }
-            preference.setEntries(entries);
-            preference.setEntryValues(entryValues);
-        }
-
-        /**
-         * Sets the entries for the given list preference.
-         *
-         * @param selectedQualities The possible S,M,L entries the user can
-         *            choose from.
-         * @param preference The preference to set the entries for.
-         */
-        private void setEntriesForSelection(SelectedVideoQualities selectedQualities,
-                                            ListPreference preference) {
-            if (selectedQualities == null) {
-                return;
-            }
-
-            // Avoid adding double entries at the bottom of the list which
-            // indicates that not at least 3 qualities are supported.
-            ArrayList<String> entries = new ArrayList<String>();
-            entries.add(mCamcorderProfileNames[selectedQualities.large]);
-            if (selectedQualities.medium != selectedQualities.large) {
-                entries.add(mCamcorderProfileNames[selectedQualities.medium]);
-            }
-            if (selectedQualities.small != selectedQualities.medium) {
-                entries.add(mCamcorderProfileNames[selectedQualities.small]);
-            }
-            preference.setEntries(entries.toArray(new String[0]));
-        }
-
-        /**
-         * Determines the video quality for large/medium/small for the given camera.
-         * Returns the one matching the given setting. Defaults to 'large' of the
-         * qualitySetting does not match either large. medium or small.
-         *
-         * @param qualitySetting One of 'large', 'medium', 'small'.
-         * @param cameraId The ID of the camera for which to get the quality
-         *            setting.
-         * @return The CamcorderProfile quality setting.}
-         */
-
-        static int getVideoQuality(int cameraId, String qualitySetting) {
-            return getSelectedVideoQualities(cameraId).getFromSetting(qualitySetting);
-        }
-
-        static SelectedVideoQualities getSelectedVideoQualities(int cameraId) {
-            if (sCachedSelectedVideoQualities.get(cameraId) != null) {
-                return sCachedSelectedVideoQualities.get(cameraId);
-            }
-
-            // Go through the sizes in descending order, see if they are supported,
-            // and set large/medium/small accordingly.
-            // If no quality is supported at all, the first call to
-            // getNextSupportedQuality will throw an exception.
-            // If only one quality is supported, then all three selected qualities
-            // will be the same.
-            int largeIndex = getNextSupportedVideoQualityIndex(cameraId, -1);
-            int mediumIndex = getNextSupportedVideoQualityIndex(cameraId, largeIndex);
-            int smallIndex = getNextSupportedVideoQualityIndex(cameraId, mediumIndex);
-            VideoQualities = new SelectedVideoQualities();
-            VideoQualities.large = sVideoQualities[largeIndex];
-            VideoQualities.medium = sVideoQualities[mediumIndex];
-            VideoQualities.small = sVideoQualities[smallIndex];
-            sCachedSelectedVideoQualities.put(cameraId, VideoQualities);
-            return VideoQualities;
-        }
-
-        /*
-         * Starting from 'start' this method returns the next supported video
-         * quality.
-         */
-        static int getNextSupportedVideoQualityIndex(int cameraId, int start) {
-            for (int i = start + 1; i < sVideoQualities.length; ++i) {
-                if (CamcorderProfile.hasProfile(cameraId, sVideoQualities[i])) {
-                    // We found a new supported quality.
-                    return i;
-                }
-            }
-
-            // Failed to find another supported quality.
-            if (start < 0 || start >= sVideoQualities.length) {
-                // This means we couldn't find any supported quality.
-                throw new IllegalArgumentException("Could not find supported video qualities.");
-            }
-
-            // We previously found a larger supported size. In this edge case, just
-            // return the same index as the previous size.
-            return start;
         }
     }
-}
+}
\ No newline at end of file
diff --git a/camera/MultiCameraApplication/java/com/intel/multicamera/SettingsPrefUtil.java b/camera/MultiCameraApplication/java/com/intel/multicamera/SettingsPrefUtil.java
new file mode 100644
index 0000000..dc96c09
--- /dev/null
+++ b/camera/MultiCameraApplication/java/com/intel/multicamera/SettingsPrefUtil.java
@@ -0,0 +1,482 @@
+/*
+ * Copyright (C) 2014 The Android Open Source Project
+ * Copyright (c) 2019 Intel Corporation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.intel.multicamera;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.graphics.ImageFormat;
+import android.hardware.camera2.CameraAccessException;
+import android.hardware.camera2.CameraCharacteristics;
+import android.hardware.camera2.CameraManager;
+import android.hardware.camera2.params.StreamConfigurationMap;
+import android.media.CamcorderProfile;
+import android.os.Bundle;
+import android.util.Log;
+import android.util.Size;
+import android.util.SparseArray;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import androidx.preference.ListPreference;
+import androidx.preference.Preference;
+import androidx.preference.PreferenceFragment;
+import androidx.preference.PreferenceGroup;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+public class SettingsPrefUtil
+        extends PreferenceFragment implements SharedPreferences.OnSharedPreferenceChangeListener {
+    public static String TAG = "SettingsPrefUtil";
+
+    public static final String SIZE_UHD4K = "UHD 4K";
+    public static final String SIZE_FHD = "FHD 1080p";
+    public static final String SIZE_HD = "HD 720p";
+    public static final String SIZE_VGA = "SD 480p";
+
+    public String[] mCamcorderProfileNames;
+    private static final String SIZE_SETTING_STRING_DIMENSION_DELIMITER = "x";
+
+    private String CameraId;
+    private int root_preferences;
+    private String pref_resolution;
+    private String video_list, capture_list;
+    public List<Size> PictureSizes;
+    private ArrayList<String> VideoEntries;
+    static final Size SIZE_4K = new Size(3840, 2160);
+    static final Size SIZE_1080P = new Size(1920, 1080);
+    static final Size SIZE_720P = new Size(1280, 720);
+    static final Size SIZE_480P = new Size(640, 480);
+    static final Size SIZE_240P = new Size(320, 240);
+
+    public static int getFromSetting(String videoQuality) {
+        // Sanitize the value to be either small, medium or large. Default
+        // to the latter.
+
+        if (SIZE_UHD4K.equals(videoQuality)) {
+            return CamcorderProfile.QUALITY_2160P;
+        } else if (SIZE_FHD.equals(videoQuality)) {
+            return CamcorderProfile.QUALITY_1080P;
+        } else if (SIZE_HD.equals(videoQuality)) {
+            return CamcorderProfile.QUALITY_720P;
+        } else if (SIZE_VGA.equals(videoQuality)) {
+            return CamcorderProfile.QUALITY_480P;
+        }
+
+        return CamcorderProfile.QUALITY_480P;
+    }
+
+    public void getSupportedSize(String camerId) {
+        try {
+            List<Size> ImageDimentions;
+
+            CameraManager manager =
+                    (CameraManager)getActivity().getSystemService(Context.CAMERA_SERVICE);
+
+            CameraCharacteristics characteristics = manager.getCameraCharacteristics(camerId);
+
+            StreamConfigurationMap map =
+                    characteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
+            if (map == null) {
+            }
+
+            ImageDimentions = new ArrayList<>(Arrays.asList(map.getOutputSizes(ImageFormat.JPEG)));
+
+            PictureSizes = new ArrayList<Size>(Arrays.<Size>asList());
+            VideoEntries = new ArrayList<>();
+
+            Log.d(TAG, " @@ getSupportedSize onResume @@" + CameraId);
+
+            for (Size size : ImageDimentions) {
+                if (size.equals(SIZE_240P)) {
+                    PictureSizes.add(SIZE_240P);
+
+                } else if (size.equals(SIZE_480P)) {
+                    PictureSizes.add(SIZE_480P);
+                    if (CamcorderProfile.hasProfile(0, sVideoQualities[3])) {
+                        VideoEntries.add(mCamcorderProfileNames[sVideoQualities[3]]);
+                    }
+
+                } else if (size.equals(SIZE_720P)) {
+                    PictureSizes.add(SIZE_720P);
+                    if (CamcorderProfile.hasProfile(0, sVideoQualities[2])) {
+                        VideoEntries.add(mCamcorderProfileNames[sVideoQualities[2]]);
+                    }
+
+                } else if (size.equals(SIZE_1080P)) {
+                    PictureSizes.add(SIZE_1080P);
+                    if (CamcorderProfile.hasProfile(0, sVideoQualities[1])) {
+                        VideoEntries.add(mCamcorderProfileNames[sVideoQualities[1]]);
+                    }
+
+                } else if (size.equals(SIZE_4K)) {
+                    PictureSizes.add(SIZE_4K);
+                    if (CamcorderProfile.hasProfile(0, sVideoQualities[0])) {
+                        VideoEntries.add(mCamcorderProfileNames[sVideoQualities[0]]);
+                    }
+                }
+            }
+
+        } catch (CameraAccessException e) {
+            e.printStackTrace();
+        }
+    }
+
+    /**
+     * Video qualities sorted by size.
+     */
+    public static int[] sVideoQualities =
+            new int[] {// CamcorderProfile.QUALITY_HIGH,
+                       CamcorderProfile.QUALITY_2160P, CamcorderProfile.QUALITY_1080P,
+                       CamcorderProfile.QUALITY_720P,  CamcorderProfile.QUALITY_480P,
+                       CamcorderProfile.QUALITY_CIF,   CamcorderProfile.QUALITY_QVGA,
+                       CamcorderProfile.QUALITY_QCIF,  CamcorderProfile.QUALITY_LOW};
+
+    @Override
+    public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
+        switch (getArguments().getInt("root_preferences")) {
+            case R.xml.root_preferences:
+                root_preferences = R.xml.root_preferences;
+                CameraId = getArguments().getString("Camera_id");
+                break;
+            case R.xml.root_preferences_1:
+                root_preferences = R.xml.root_preferences_1;
+                CameraId = getArguments().getString("Camera_id");
+                break;
+            case R.xml.root_preferences_2:
+                root_preferences = R.xml.root_preferences_2;
+                CameraId = getArguments().getString("Camera_id");
+                break;
+            case R.xml.root_preferences_3:
+                root_preferences = R.xml.root_preferences_3;
+                CameraId = getArguments().getString("Camera_id");
+                break;
+            default:
+                break;
+        }
+
+        setPreferencesFromResource(root_preferences, rootKey);
+        mCamcorderProfileNames = getResources().getStringArray(R.array.camcorder_profile_names);
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        View v;
+        v = super.onCreateView(inflater, container, savedInstanceState);
+
+        switch (getArguments().getString("pref_resolution")) {
+            case "pref_resolution":
+                pref_resolution = "pref_resolution";
+                break;
+            case "pref_resolution_1":
+                pref_resolution = "pref_resolution_1";
+                break;
+            case "pref_resolution_2":
+                pref_resolution = "pref_resolution_2";
+                break;
+            case "pref_resolution_3":
+                pref_resolution = "pref_resolution_3";
+                break;
+            default:
+                break;
+        }
+
+        switch (getArguments().getString("video_list")) {
+            case "video_list":
+                video_list = "video_list";
+                break;
+            case "video_list_1":
+                video_list = "video_list_1";
+                break;
+            case "video_list_2":
+                video_list = "video_list_2";
+                break;
+            case "video_list_3":
+                video_list = "video_list_3";
+                break;
+            default:
+                break;
+        }
+
+        switch (getArguments().getString("capture_list")) {
+            case "capture_list":
+                capture_list = "capture_list";
+                break;
+            case "capture_list_1":
+                capture_list = "capture_list_1";
+                break;
+            case "capture_list_2":
+                capture_list = "capture_list_2";
+                break;
+            case "capture_list_3":
+                capture_list = "capture_list_3";
+                break;
+
+            default:
+                break;
+        }
+
+        getSupportedSize(CameraId);
+
+        // Put in the summaries for the currently set values.
+        final PreferenceGroup Prf_Resolution = (PreferenceGroup)findPreference(pref_resolution);
+
+        fillEntriesAndSummaries(Prf_Resolution);
+
+        return v;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+
+        Log.d(TAG, " @@ SettingsFragment onResume @@" + CameraId);
+
+        getSupportedSize(CameraId);
+
+        // Put in the summaries for the currently set values.
+        final PreferenceGroup Prf_Resolution = (PreferenceGroup)findPreference(pref_resolution);
+
+        fillEntriesAndSummaries(Prf_Resolution);
+
+        getPreferenceScreen().getSharedPreferences().registerOnSharedPreferenceChangeListener(this);
+
+        Log.d(TAG, "SettingsFragment onResume end");
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+
+        Log.d(TAG, " @@ SettingsFragment onPause @@" + CameraId);
+        getPreferenceScreen().getSharedPreferences().unregisterOnSharedPreferenceChangeListener(
+                this);
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        Log.d(TAG, " @@ SettingsFragment onDestroy @@" + CameraId);
+    }
+
+    @Override
+    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String Key) {
+        setSummary(findPreference(Key));
+
+        switch (Key) {
+            case "capture_list":
+                sharedPreferences.edit().putString("pref_resolution", Key).apply();
+                break;
+            case "capture_list_1":
+                sharedPreferences.edit().putString("pref_resolution_1", Key).apply();
+                break;
+            case "capture_list_2":
+                sharedPreferences.edit().putString("pref_resolution_2", Key).apply();
+                break;
+            case "capture_list_3":
+                sharedPreferences.edit().putString("pref_resolution_3", Key).apply();
+                break;
+            case "video_list":
+                sharedPreferences.edit().putString("pref_resolution", Key).apply();
+                break;
+            case "video_list_1":
+                sharedPreferences.edit().putString("pref_resolution_1", Key).apply();
+                break;
+            case "video_list_2":
+                sharedPreferences.edit().putString("pref_resolution_2", Key).apply();
+                break;
+            case "video_list_3":
+                sharedPreferences.edit().putString("pref_resolution_3", Key).apply();
+                break;
+            default:
+                break;
+        }
+    }
+
+    /**
+     * Set the summary for the given preference. The given preference needs
+     * to be a {@link ListPreference}.
+     */
+    private void setSummary(Preference preference) {
+        if (!(preference instanceof ListPreference)) {
+            return;
+        }
+
+        ListPreference listPreference = (ListPreference)preference;
+        if (listPreference.getKey().equals(capture_list)) {
+            setSummaryForSelection(PictureSizes, listPreference);
+        } else if (listPreference.getKey().equals(video_list)) {
+            setSummaryForSelection(listPreference);
+        } else {
+            listPreference.setSummary(listPreference.getEntry());
+        }
+    }
+
+    /**
+     * This is used to serialize a size to a string for storage in settings
+     *
+     * @param size The size to serialize.
+     * @return the string to be saved in preferences
+     */
+    private static String sizeToSettingString(Size size) {
+        return size.getWidth() + SIZE_SETTING_STRING_DIMENSION_DELIMITER + size.getHeight();
+    }
+
+    /**
+     * Sets the summary for the given list preference.
+     *
+     * @param displayableSizes The human readable preferred sizes
+     * @param preference       The preference for which to set the summary.
+     */
+    private void setSummaryForSelection(List<Size> displayableSizes, ListPreference preference) {
+        String setting = preference.getValue();
+        if (setting == null || !setting.contains("x")) {
+            return;
+        }
+        Size settingSize = sizeFromSettingString(setting);
+        if (settingSize == null) {
+            return;
+        }
+        preference.setSummary(getSizeSummaryString(settingSize));
+    }
+
+    /**
+     * Sets the summary for the given list preference.
+     *
+     *
+     * @param preference        The preference for which to set the summary.
+     */
+    private void setSummaryForSelection(ListPreference preference) {
+        if (preference == null) {
+            return;
+        }
+
+        int selectedQuality = getFromSetting(preference.getValue());
+        Log.d(TAG, "SettingsFragment selectedQuality " + selectedQuality);
+        preference.setSummary(mCamcorderProfileNames[selectedQuality]);
+    }
+
+    /**
+     * This parses a setting string and returns the representative size.
+     *
+     * @param sizeSettingString The string that stored in settings to represent a size.
+     * @return the represented Size.
+     */
+    public static Size sizeFromSettingString(String sizeSettingString) {
+        if (sizeSettingString == null) {
+            return null;
+        }
+        String[] parts = sizeSettingString.split(SIZE_SETTING_STRING_DIMENSION_DELIMITER);
+        if (parts.length != 2) {
+            return null;
+        }
+
+        try {
+            int width = Integer.parseInt(parts[0]);
+            int height = Integer.parseInt(parts[1]);
+            return new Size(width, height);
+        } catch (NumberFormatException ex) {
+            return null;
+        }
+    }
+
+    /**
+     * @param size The photo resolution.
+     * @return A human readable and translated string for labeling the
+     * picture size in megapixels.
+     */
+    private String getSizeSummaryString(Size size) {
+        int width = size.getWidth();
+        int height = size.getHeight();
+        String result =
+                getResources().getString(R.string.setting_summary_width_and_height, width, height);
+        return result;
+    }
+
+    /**
+     * Recursively go through settings and fill entries and summaries of our
+     * preferences.
+     */
+
+    private void fillEntriesAndSummaries(PreferenceGroup group) {
+        for (int i = 0; i < group.getPreferenceCount(); ++i) {
+            Preference pref = group.getPreference(i);
+            if (pref instanceof PreferenceGroup) {
+                fillEntriesAndSummaries((PreferenceGroup)pref);
+            }
+            setSummary(pref);
+            setEntries(pref);
+        }
+    }
+
+    /**
+     * Set the entries for the given preference. The given preference needs
+     * to be a {@link ListPreference}
+     */
+    private void setEntries(Preference preference) {
+        if (!(preference instanceof ListPreference)) {
+            return;
+        }
+
+        ListPreference listPreference = (ListPreference)preference;
+        if (listPreference.getKey().equals(capture_list)) {
+            setEntriesForSelection(PictureSizes, listPreference);
+        } else if (listPreference.getKey().equals(video_list)) {
+            setEntriesForSelection(VideoEntries, listPreference);
+        }
+    }
+
+    /**
+     * Sets the entries for the given list preference.
+     *
+     * @param selectedSizes The possible S,M,L entries the user can choose
+     *                      from.
+     * @param preference    The preference to set the entries for.
+     */
+    private void setEntriesForSelection(List<Size> selectedSizes, ListPreference preference) {
+        if (selectedSizes == null) {
+            return;
+        }
+
+        String[] entries = new String[selectedSizes.size()];
+        String[] entryValues = new String[selectedSizes.size()];
+        for (int i = 0; i < selectedSizes.size(); i++) {
+            Size size = selectedSizes.get(i);
+            entries[i] = getSizeSummaryString(size);
+            entryValues[i] = sizeToSettingString(size);
+        }
+        preference.setEntries(entries);
+        preference.setEntryValues(entryValues);
+    }
+
+    /**
+     * Sets the entries for the given list preference.
+     *
+     * @param entries The possible S,M,L entries the user can
+     *                          choose from.
+     * @param preference        The preference to set the entries for.
+     */
+    private void setEntriesForSelection(ArrayList<String> entries, ListPreference preference) {
+        if (entries == null) {
+            return;
+        }
+
+        preference.setEntries(entries.toArray(new String[0]));
+    }
+}
diff --git a/camera/MultiCameraApplication/java/com/intel/multicamera/SurfaceUtil.java b/camera/MultiCameraApplication/java/com/intel/multicamera/SurfaceUtil.java
new file mode 100644
index 0000000..16ad523
--- /dev/null
+++ b/camera/MultiCameraApplication/java/com/intel/multicamera/SurfaceUtil.java
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2019 Intel Corporation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.intel.multicamera;
+
+import android.graphics.SurfaceTexture;
+import android.opengl.GLES20;
+import javax.microedition.khronos.egl.*;
+
+public class SurfaceUtil {
+    private static final int[] ATTRIB_LIST = new int[] {
+            EGL10.EGL_RED_SIZE,   8, EGL10.EGL_GREEN_SIZE, 8, EGL10.EGL_BLUE_SIZE, 8,
+            EGL10.EGL_ALPHA_SIZE, 8, EGL10.EGL_NONE,
+    };
+
+    // http://stackoverflow.com/a/21564236/2681195
+    public static void clear(SurfaceTexture mTexture) {
+        EGL10 egl = (EGL10)EGLContext.getEGL();
+        EGLDisplay display = egl.eglGetDisplay(EGL10.EGL_DEFAULT_DISPLAY);
+
+        int[] version = new int[2];
+        egl.eglInitialize(display, version);
+
+        EGLConfig[] configs = new EGLConfig[1];
+        int[] numConfig = new int[1];
+        egl.eglChooseConfig(display, ATTRIB_LIST, configs, 1, numConfig);
+
+        EGLSurface surface = egl.eglCreateWindowSurface(display, configs[0], mTexture, null);
+        EGLContext context = egl.eglCreateContext(display, configs[0], EGL10.EGL_NO_CONTEXT, null);
+
+        egl.eglMakeCurrent(display, surface, surface, context);
+
+        GLES20.glClearColor(0, 0, 1, 0);
+        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);
+
+        egl.eglSwapBuffers(display, surface);
+        egl.eglMakeCurrent(display, EGL10.EGL_NO_SURFACE, EGL10.EGL_NO_SURFACE,
+                           EGL10.EGL_NO_CONTEXT);
+        egl.eglDestroyContext(display, context);
+        egl.eglDestroySurface(display, surface);
+    }
+}
diff --git a/camera/MultiCameraApplication/java/com/intel/multicamera/Thumbnail.java b/camera/MultiCameraApplication/java/com/intel/multicamera/Thumbnail.java
new file mode 100644
index 0000000..1562766
--- /dev/null
+++ b/camera/MultiCameraApplication/java/com/intel/multicamera/Thumbnail.java
@@ -0,0 +1,67 @@
+/*
+ * Copyright (C) 2011 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.intel.multicamera;
+
+import android.graphics.Bitmap;
+import android.media.MediaMetadataRetriever;
+import java.io.FileDescriptor;
+
+public class Thumbnail {
+    public static Bitmap createVideoThumbnailBitmap(FileDescriptor fd, int targetWidth) {
+        return createVideoThumbnailBitmap(null, fd, targetWidth);
+    }
+
+    public static Bitmap createVideoThumbnailBitmap(String filePath, int targetWidth) {
+        return createVideoThumbnailBitmap(filePath, null, targetWidth);
+    }
+
+    private static Bitmap createVideoThumbnailBitmap(String filePath, FileDescriptor fd,
+                                                     int targetWidth) {
+        Bitmap bitmap = null;
+        MediaMetadataRetriever retriever = new MediaMetadataRetriever();
+        try {
+            if (filePath != null) {
+                retriever.setDataSource(filePath);
+            } else {
+                retriever.setDataSource(fd);
+            }
+            bitmap = retriever.getFrameAtTime(-1);
+        } catch (IllegalArgumentException ex) {
+            // Assume this is a corrupt video file
+        } catch (RuntimeException ex) {
+            // Assume this is a corrupt video file.
+        } finally {
+            try {
+                retriever.release();
+            } catch (RuntimeException ex) {
+                // Ignore failures while cleaning up.
+            }
+        }
+        if (bitmap == null) return null;
+
+        // Scale down the bitmap if it is bigger than we need.
+        int width = bitmap.getWidth();
+        int height = bitmap.getHeight();
+        if (width > targetWidth) {
+            float scale = (float)targetWidth / width;
+            int w = Math.round(scale * width);
+            int h = Math.round(scale * height);
+            bitmap = Bitmap.createScaledBitmap(bitmap, w, h, true);
+        }
+        return bitmap;
+    }
+}
diff --git a/camera/MultiCameraApplication/java/com/intel/multicamera/TopRightCam.java b/camera/MultiCameraApplication/java/com/intel/multicamera/TopRightCam.java
deleted file mode 100644
index 21e73c2..0000000
--- a/camera/MultiCameraApplication/java/com/intel/multicamera/TopRightCam.java
+++ /dev/null
@@ -1,649 +0,0 @@
-/*
- * Copyright 2014 The Android Open Source Project
- * Copyright (c) 2019 Intel Corporation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.intel.multicamera;
-
-import android.Manifest;
-import android.annotation.SuppressLint;
-import android.app.Activity;
-import android.content.*;
-import android.content.pm.PackageManager;
-import android.graphics.ImageFormat;
-import android.graphics.Matrix;
-import android.graphics.RectF;
-import android.graphics.SurfaceTexture;
-import android.hardware.camera2.*;
-import android.hardware.camera2.params.StreamConfigurationMap;
-import android.media.CamcorderProfile;
-import android.media.Image;
-import android.media.ImageReader;
-import android.media.MediaRecorder;
-import android.net.Uri;
-import android.os.Environment;
-import android.os.Handler;
-import android.os.HandlerThread;
-import android.provider.MediaStore;
-import android.util.Log;
-import android.util.Size;
-import android.util.SparseIntArray;
-import android.view.Surface;
-import android.view.TextureView;
-import android.view.View;
-import android.widget.Button;
-import android.widget.Toast;
-import androidx.annotation.NonNull;
-import androidx.core.app.ActivityCompat;
-import androidx.preference.PreferenceManager;
-import java.io.*;
-import java.nio.ByteBuffer;
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Date;
-import java.util.List;
-import java.util.concurrent.TimeUnit;
-
-public class TopRightCam {
-    Activity mActivity;
-    private static final String TAG = "TopRightCam";
-    private String mNextVideoAbsolutePath;
-    private CamcorderProfile mProfile;
-    /**
-     * An {@link AutoFitTextureView} for camera preview.
-     */
-    private AutoFitTextureView textureView;
-    private Button takePictureButton, TakeVideoButton;
-
-    private MediaRecorder mMediaRecorder;
-    private String cameraId;
-    protected CameraDevice cameraDevice;
-    protected CameraCaptureSession cameraCaptureSessions;
-    protected CaptureRequest captureRequest;
-    protected CaptureRequest.Builder captureRequestBuilder;
-    private Size imageDimension, previewSize;
-    private ImageReader imageReader;
-    private File file;
-    private Handler mBackgroundHandler;
-    private HandlerThread mBackgroundThread;
-    private static final int SENSOR_ORIENTATION_DEFAULT_DEGREES = 90;
-    private static final int SENSOR_ORIENTATION_INVERSE_DEGREES = 270;
-    private static final SparseIntArray DEFAULT_ORIENTATIONS = new SparseIntArray();
-    private static final SparseIntArray INVERSE_ORIENTATIONS = new SparseIntArray();
-    private static final SparseIntArray ORIENTATIONS = new SparseIntArray();
-    private SharedPreferences settings;
-    /**
-     * Whether the app is recording video now
-     */
-    private boolean mIsRecordingVideo;
-
-    // The video file that the hardware camera is about to record into
-    // (or is recording into.
-    private String mVideoFilename, mPictureFilename;
-    private ContentValues mCurrentVideoValues, mCurrentPictureValues;
-    byte[] jpegLength;
-
-    /**
-     * Orientation of the camera sensor
-     */
-    private int mSensorOrientation;
-
-    static {
-        ORIENTATIONS.append(Surface.ROTATION_0, 90);
-        ORIENTATIONS.append(Surface.ROTATION_90, 0);
-        ORIENTATIONS.append(Surface.ROTATION_180, 270);
-        ORIENTATIONS.append(Surface.ROTATION_270, 180);
-    }
-
-    public TopRightCam(Activity activity, AutoFitTextureView textureView, Button PictureButton,
-                       Button RecordButton) {
-        Log.e(TAG, "constructor called");
-        this.mActivity = activity;
-        this.textureView = textureView;
-        this.textureView.setSurfaceTextureListener(textureListener);
-        this.ClickListeners(PictureButton, RecordButton);
-        this.settings = PreferenceManager.getDefaultSharedPreferences(activity);
-    }
-
-    public void ClickListeners(Button PictureButton, Button RecordButton) {
-        TakePicureOnClicked(PictureButton);
-
-        StartVideoRecording(RecordButton);
-    }
-
-    private void TakePicureOnClicked(Button PictureButton) {
-        takePictureButton = PictureButton;
-        if (takePictureButton == null) return;
-
-        takePictureButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                takePicture();
-                Utils.broadcastNewPicture(mActivity.getApplicationContext(), mCurrentPictureValues);
-            }
-        });
-    }
-
-    private void StartVideoRecording(Button RecordButton) {
-        TakeVideoButton = RecordButton;
-        TakeVideoButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                // Intent i = new Intent(HomeScreenActivity.this, CameraActivity.class);
-                System.out.println(" onCreate Record0");
-                if (mIsRecordingVideo) {
-                    stopRecordingVideo();
-                    Utils.broadcastNewVideo(mActivity.getApplicationContext(), mCurrentVideoValues);
-                    takePictureButton.setVisibility(View.VISIBLE);
-                } else {
-                    startRecordingVideo();
-                    takePictureButton.setVisibility(View.GONE);
-                }
-            }
-        });
-    }
-
-    TextureView.SurfaceTextureListener textureListener = new TextureView.SurfaceTextureListener() {
-        @Override
-        public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {
-            // open your camera here
-            openCamera(width, height);
-        }
-        @Override
-        public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {
-            // Transform you image captured size according to the surface width and height
-            configureTransform(width, height);
-        }
-        @Override
-        public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {
-            return false;
-        }
-        @Override
-        public void onSurfaceTextureUpdated(SurfaceTexture surface) {
-        }
-    };
-
-    public void openCamera(int width, int height) {
-        CameraManager manager = (CameraManager)mActivity.getSystemService(Context.CAMERA_SERVICE);
-        Log.e(TAG, "is camera open");
-        try {
-            if (!((manager.getCameraIdList().length >= 2) &&
-                  (manager.getCameraIdList().length <= 4))) {
-                Log.e(TAG, "this camera is not connected ");
-                return;
-            }
-            cameraId = manager.getCameraIdList()[1];
-            Log.e(TAG, "is camera open ID" + cameraId);
-            CameraCharacteristics characteristics = manager.getCameraCharacteristics(cameraId);
-            StreamConfigurationMap map =
-                    characteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
-            if (map == null) return;
-            settings = PreferenceManager.getDefaultSharedPreferences(mActivity);
-            String Key = SettingsActivity.SettingsFragment.getchangedPrefKey();
-
-            if (Key.compareTo("video_list") == 0) {
-                String videoQuality = settings.getString("video_list", "medium");
-
-                int quality = SettingsActivity.SettingsFragment.getVideoQuality(0, videoQuality);
-                Log.d(TAG, "Selected video quality for '" + videoQuality + "' is " + quality);
-
-                mProfile = CamcorderProfile.get(0, quality);
-                previewSize = new Size(mProfile.videoFrameWidth, mProfile.videoFrameHeight);
-
-                configureTransform(width, height);
-            } else {
-                previewSize = SettingsActivity.SettingsFragment.sizeFromSettingString(
-                        settings.getString("capture_list", "640x480"));
-                Log.d(TAG,
-                      "Selected imageDimension" + previewSize.getWidth() + previewSize.getHeight());
-                configureTransform(width, height);
-            }
-
-            mSensorOrientation = characteristics.get(CameraCharacteristics.SENSOR_ORIENTATION);
-            configureTransform(width, height);
-            startBackgroundThread();
-
-            manager.openCamera(cameraId, stateCallback, null);
-
-        } catch (CameraAccessException e) {
-            e.printStackTrace();
-        }
-        Log.e(TAG, "openCamera X");
-    }
-
-    private final CameraDevice.StateCallback stateCallback = new CameraDevice.StateCallback() {
-        @Override
-        public void onOpened(CameraDevice camera) {
-            // This is called when the camera is open
-            Log.e(TAG, "onOpened");
-            cameraDevice = camera;
-            createCameraPreview();
-        }
-        @Override
-        public void onDisconnected(CameraDevice camera) {
-            Log.e(TAG, "onDisconnected");
-            closeCamera();
-        }
-        @Override
-        public void onError(CameraDevice camera, int error) {
-            Log.e(TAG, "onError");
-            closeCamera();
-        }
-    };
-
-    private void configureTransform(int viewWidth, int viewHeight) {
-        if (null == textureView || null == previewSize) {
-            return;
-        }
-        int rotation = mActivity.getWindowManager().getDefaultDisplay().getRotation();
-        Matrix matrix = new Matrix();
-        RectF viewRect = new RectF(0, 0, viewWidth, viewHeight);
-        Log.e(TAG, "configureTransform() viewWidth: " + viewWidth + " viewHeight: " + viewHeight);
-        RectF bufferRect = new RectF(0, 0, previewSize.getHeight(), previewSize.getWidth());
-        float centerX = viewRect.centerX();
-        float centerY = viewRect.centerY();
-        if (Surface.ROTATION_90 == rotation || Surface.ROTATION_270 == rotation) {
-            bufferRect.offset(centerX - bufferRect.centerX(), centerY - bufferRect.centerY());
-            matrix.setRectToRect(viewRect, bufferRect, Matrix.ScaleToFit.FILL);
-            float scale = Math.max((float)viewHeight / previewSize.getHeight(),
-                                   (float)viewWidth / previewSize.getWidth());
-            matrix.postScale(scale, scale, centerX, centerY);
-            matrix.postRotate(90 * (rotation - 2), centerX, centerY);
-        } else if (Surface.ROTATION_180 == rotation) {
-            matrix.postRotate(180, centerX, centerY);
-        }
-        textureView.setTransform(matrix);
-    }
-
-    protected void createCameraPreview() {
-        try {
-            closePreviewSession();
-            SurfaceTexture texture = textureView.getSurfaceTexture();
-            if (texture == null) return;
-
-            settings = PreferenceManager.getDefaultSharedPreferences(mActivity);
-            String Key = SettingsActivity.SettingsFragment.getchangedPrefKey();
-
-            imageDimension = SettingsActivity.SettingsFragment.sizeFromSettingString(
-                    settings.getString("capture_list", "640x480"));
-            String videoQuality = settings.getString("video_list", "medium");
-
-            int quality = SettingsActivity.SettingsFragment.getVideoQuality(0, videoQuality);
-            Log.d(TAG, "Selected video quality for '" + videoQuality + "' is " + quality);
-
-            mProfile = CamcorderProfile.get(0, quality);
-
-            if (Key.compareTo("video_list") == 0) {
-                texture.setDefaultBufferSize(mProfile.videoFrameWidth, mProfile.videoFrameHeight);
-            } else {
-                texture.setDefaultBufferSize(imageDimension.getWidth(), imageDimension.getHeight());
-            }
-
-            Surface surface = new Surface(texture);
-            captureRequestBuilder =
-                    cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);
-            captureRequestBuilder.addTarget(surface);
-            cameraDevice.createCaptureSession(
-                    Arrays.asList(surface), new CameraCaptureSession.StateCallback() {
-                        @Override
-                        public void onConfigured(CameraCaptureSession cameraCaptureSession) {
-                            // The camera is already closed
-                            if (null == cameraDevice) {
-                                return;
-                            }
-                            // When the session is ready, we start displaying the preview.
-                            cameraCaptureSessions = cameraCaptureSession;
-                            updatePreview();
-                        }
-                        @Override
-                        public void onConfigureFailed(CameraCaptureSession cameraCaptureSession) {
-                            Toast.makeText(mActivity, "Configuration change", Toast.LENGTH_SHORT)
-                                    .show();
-                        }
-                    }, null);
-        } catch (CameraAccessException e) {
-            e.printStackTrace();
-        }
-    }
-
-    public void releaseMedia() {
-        if (null != mMediaRecorder) {
-            try {
-                mMediaRecorder.stop();
-            } catch (IllegalStateException ex) {
-                Log.d(TAG, "Stop called before start");
-            }
-            mMediaRecorder.reset();
-            mMediaRecorder.release();
-            mMediaRecorder = null;
-        }
-    }
-
-    public void closeCamera() {
-        closePreviewSession();
-        if (null != cameraDevice) {
-            cameraDevice.close();
-            cameraDevice = null;
-        }
-        if (null != imageReader) {
-            imageReader.close();
-            imageReader = null;
-        }
-        releaseMedia();
-        stopBackgroundThread();
-    }
-
-    /**
-     * Starts a background thread and its {@link Handler}.
-     */
-    private void startBackgroundThread() {
-        mBackgroundThread = new HandlerThread("Camera_1");
-        mBackgroundThread.start();
-        mBackgroundHandler = new Handler(mBackgroundThread.getLooper());
-    }
-
-    /**
-     * Stops the background thread and its {@link Handler}.
-     */
-    private void stopBackgroundThread() {
-        if (mBackgroundThread != null) {
-            mBackgroundThread.quitSafely();
-            try {
-                mBackgroundThread.join();
-                mBackgroundThread = null;
-                mBackgroundHandler = null;
-            } catch (InterruptedException e) {
-                e.printStackTrace();
-            }
-        }
-    }
-
-    protected void updatePreview() {
-        if (null == cameraDevice) {
-            Log.e(TAG, "updatePreview error, return");
-        }
-        captureRequestBuilder.set(CaptureRequest.CONTROL_MODE, CameraMetadata.CONTROL_MODE_AUTO);
-        HandlerThread thread = new HandlerThread("Camera Preview");
-        thread.start();
-        Handler handler = new Handler(thread.getLooper());
-        try {
-            cameraCaptureSessions.setRepeatingRequest(captureRequestBuilder.build(), null, handler);
-        } catch (CameraAccessException e) {
-            e.printStackTrace();
-        }
-    }
-
-    /**
-     * Retrieves the JPEG orientation from the specified screen rotation.
-     *
-     * @param rotation The screen rotation.
-     * @return The JPEG orientation (one of 0, 90, 270, and 360)
-     */
-    private int getOrientation(int rotation) {
-        // Sensor orientation is 90 for most devices, or 270 for some devices (eg. Nexus 5X)
-        // We have to take that into account and rotate JPEG properly.
-        // For devices with orientation of 90, we simply return our mapping from ORIENTATIONS.
-        // For devices with orientation of 270, we need to rotate the JPEG 180 degrees.
-        return (ORIENTATIONS.get(rotation) + mSensorOrientation + 270) % 360;
-    }
-
-    protected void takePicture() {
-        if (null == cameraDevice) {
-            Log.e(TAG, "cameraDevice is null");
-            return;
-        }
-
-        try {
-            settings = PreferenceManager.getDefaultSharedPreferences(mActivity);
-            imageDimension = SettingsActivity.SettingsFragment.sizeFromSettingString(
-                    settings.getString("capture_list", "640x480"));
-            Log.d(TAG, "Selected imageDimension: " + imageDimension.getWidth() +
-                               imageDimension.getHeight());
-            ImageReader reader = ImageReader.newInstance(
-                    imageDimension.getWidth(), imageDimension.getHeight(), ImageFormat.JPEG, 1);
-            List<Surface> outputSurfaces = new ArrayList<Surface>(2);
-            outputSurfaces.add(reader.getSurface());
-            outputSurfaces.add(new Surface(textureView.getSurfaceTexture()));
-            captureRequestBuilder =
-                    cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_STILL_CAPTURE);
-            captureRequestBuilder.addTarget(reader.getSurface());
-            captureRequestBuilder.set(CaptureRequest.CONTROL_MODE,
-                                      CameraMetadata.CONTROL_MODE_AUTO);
-            // Orientation
-            int rotation = mActivity.getWindowManager().getDefaultDisplay().getRotation();
-            captureRequestBuilder.set(CaptureRequest.JPEG_ORIENTATION, getOrientation(rotation));
-
-            String fileDetails[] = Utils.generateFileDetails(Utils.MEDIA_TYPE_IMAGE);
-            if (fileDetails == null || fileDetails.length < 5) {
-                Log.e(TAG, "Invalid file details");
-                return;
-            }
-            mPictureFilename = fileDetails[3];
-            mCurrentPictureValues =
-                    Utils.getContentValues(Utils.MEDIA_TYPE_IMAGE, fileDetails,
-                                           imageDimension.getWidth(), imageDimension.getHeight());
-
-            file = new File(mPictureFilename);
-
-            ImageReader.OnImageAvailableListener readerListener =
-                    new ImageReader.OnImageAvailableListener() {
-                        @Override
-                        public void onImageAvailable(ImageReader reader) {
-                            Image image = null;
-                            try {
-                                image = reader.acquireLatestImage();
-                                ByteBuffer buffer = image.getPlanes()[0].getBuffer();
-                                byte[] bytes = new byte[buffer.capacity()];
-                                buffer.get(bytes);
-                                jpegLength = bytes;
-                                mCurrentPictureValues.put(MediaStore.Images.ImageColumns.SIZE,
-                                                          jpegLength);
-
-                                save(bytes);
-                            } catch (FileNotFoundException e) {
-                                e.printStackTrace();
-                            } catch (IOException e) {
-                                e.printStackTrace();
-                            } finally {
-                                if (image != null) {
-                                    image.close();
-                                }
-                            }
-                        }
-
-                        private void save(byte[] bytes) throws IOException {
-                            OutputStream output = null;
-                            try {
-                                output = new FileOutputStream(file);
-                                output.write(bytes);
-                            } finally {
-                                if (null != output) {
-                                    output.close();
-                                }
-                            }
-                        }
-                    };
-            reader.setOnImageAvailableListener(readerListener, mBackgroundHandler);
-            final CameraCaptureSession.CaptureCallback captureListener =
-                    new CameraCaptureSession.CaptureCallback() {
-                        @Override
-                        public void onCaptureCompleted(CameraCaptureSession session,
-                                                       CaptureRequest request,
-                                                       TotalCaptureResult result) {
-                            super.onCaptureCompleted(session, request, result);
-                            Toast.makeText(mActivity, "Saved:" + file, Toast.LENGTH_SHORT).show();
-
-                            createCameraPreview();
-                        }
-                    };
-            cameraDevice.createCaptureSession(
-                    outputSurfaces, new CameraCaptureSession.StateCallback() {
-                        @Override
-                        public void onConfigured(CameraCaptureSession session) {
-                            try {
-                                session.capture(captureRequestBuilder.build(), captureListener,
-                                                mBackgroundHandler);
-                            } catch (CameraAccessException e) {
-                                e.printStackTrace();
-                            }
-                        }
-
-                        @Override
-                        public void onConfigureFailed(CameraCaptureSession session) {
-                        }
-                    }, mBackgroundHandler);
-        } catch (CameraAccessException e) {
-            e.printStackTrace();
-        }
-    }
-
-    /* Recording Start*/
-    private void startRecordingVideo() {
-        if (null == cameraDevice || !textureView.isAvailable()) {
-            return;
-        }
-        try {
-            closePreviewSession();
-            settings = PreferenceManager.getDefaultSharedPreferences(mActivity);
-            String videoQuality = settings.getString("video_list", "medium");
-
-            int quality = SettingsActivity.SettingsFragment.getVideoQuality(0, videoQuality);
-            Log.d(TAG, "Selected video quality for '" + videoQuality + "' is " + quality);
-
-            mProfile = CamcorderProfile.get(0, quality);
-            setUpMediaRecorder();
-            SurfaceTexture texture = textureView.getSurfaceTexture();
-            if (texture == null) return;
-            texture.setDefaultBufferSize(mProfile.videoFrameWidth, mProfile.videoFrameHeight);
-
-            captureRequestBuilder = cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_RECORD);
-            List<Surface> surfaces = new ArrayList<>();
-
-            // Set up Surface for the camera preview
-            Surface previewSurface = new Surface(texture);
-            surfaces.add(previewSurface);
-            captureRequestBuilder.addTarget(previewSurface);
-
-            // Set up Surface for the MediaRecorder
-            Surface recorderSurface = mMediaRecorder.getSurface();
-            surfaces.add(recorderSurface);
-            captureRequestBuilder.addTarget(recorderSurface);
-
-            // Start a capture session
-            // Once the session starts, we can update the UI and start recording
-            cameraDevice.createCaptureSession(surfaces, new CameraCaptureSession.StateCallback() {
-                @Override
-                public void onConfigured(@NonNull CameraCaptureSession camCaptureSession) {
-                    cameraCaptureSessions = camCaptureSession;
-                    updatePreview();
-                    mActivity.runOnUiThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            // UI
-                            TakeVideoButton.setText(R.string.stop);
-                            mIsRecordingVideo = true;
-
-                            // Start recording
-                            mMediaRecorder.start();
-                        }
-                    });
-                }
-
-                @Override
-                public void onConfigureFailed(@NonNull CameraCaptureSession cameraCaptureSession) {
-                    if (null != mActivity) {
-                        Toast.makeText(mActivity, "Failed", Toast.LENGTH_SHORT).show();
-                    }
-                }
-            }, mBackgroundHandler);
-        } catch (CameraAccessException | IOException e) {
-            e.printStackTrace();
-        }
-    }
-
-    private void setUpMediaRecorder() throws IOException {
-        if (null == mActivity) {
-            return;
-        }
-
-        mMediaRecorder = new MediaRecorder();
-        mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
-        mMediaRecorder.setVideoSource(MediaRecorder.VideoSource.SURFACE);
-
-        String fileDetails[] = Utils.generateFileDetails(Utils.MEDIA_TYPE_VIDEO);
-        if (fileDetails == null || fileDetails.length < 5) {
-            Log.e(TAG, "Invalid file details");
-            return;
-        }
-        mVideoFilename = fileDetails[3];
-        mCurrentVideoValues =
-                Utils.getContentValues(Utils.MEDIA_TYPE_VIDEO, fileDetails,
-                                       mProfile.videoFrameWidth, mProfile.videoFrameHeight);
-
-        mMediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);
-        /**
-         * set output file in media recorder
-         */
-        mMediaRecorder.setOutputFile(mVideoFilename);
-
-        mMediaRecorder.setVideoEncodingBitRate(10000000);
-        mMediaRecorder.setVideoFrameRate(30);
-        mMediaRecorder.setVideoSize(mProfile.videoFrameWidth, mProfile.videoFrameHeight);
-        mMediaRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264);
-        mMediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);
-
-        int rotation = mActivity.getWindowManager().getDefaultDisplay().getRotation();
-        switch (mSensorOrientation) {
-            case SENSOR_ORIENTATION_DEFAULT_DEGREES:
-                mMediaRecorder.setOrientationHint(DEFAULT_ORIENTATIONS.get(rotation));
-                break;
-            case SENSOR_ORIENTATION_INVERSE_DEGREES:
-                mMediaRecorder.setOrientationHint(INVERSE_ORIENTATIONS.get(rotation));
-                break;
-        }
-        try {
-            mMediaRecorder.prepare();
-        } catch (IOException ex) {
-            Log.e(TAG, "prepare failed for " + mVideoFilename, ex);
-            releaseMedia();
-            throw new RuntimeException(ex);
-        }
-    }
-
-    private void closePreviewSession() {
-        System.out.println(" closePreviewSession");
-        if (cameraCaptureSessions != null) {
-            cameraCaptureSessions.close();
-            cameraCaptureSessions = null;
-        }
-    }
-
-    private void stopRecordingVideo() {
-        mIsRecordingVideo = false;
-        TakeVideoButton.setText(R.string.record);
-
-        // Stop recording
-        releaseMedia();
-
-        if (null != mActivity) {
-            Toast.makeText(mActivity, "Video saved: " + mVideoFilename, Toast.LENGTH_SHORT).show();
-            Log.d(TAG, "Video saved: " + mVideoFilename);
-        }
-        mVideoFilename = null;
-
-        createCameraPreview();
-    }
-}
diff --git a/camera/MultiCameraApplication/java/com/intel/multicamera/Utils.java b/camera/MultiCameraApplication/java/com/intel/multicamera/Utils.java
index 32a3289..a4c4b09 100644
--- a/camera/MultiCameraApplication/java/com/intel/multicamera/Utils.java
+++ b/camera/MultiCameraApplication/java/com/intel/multicamera/Utils.java
@@ -1,4 +1,5 @@
 /*
+ * Copyright (C) 2014 The Android Open Source Project
  * Copyright (c) 2019 Intel Corporation.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -16,28 +17,29 @@
 
 package com.intel.multicamera;
 
-import android.Manifest;
 import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.content.*;
-import android.content.pm.PackageManager;
-import android.graphics.ImageFormat;
-import android.hardware.camera2.*;
-import android.hardware.camera2.params.StreamConfigurationMap;
-import android.media.CamcorderProfile;
+import android.content.res.Resources;
+import android.database.Cursor;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.Matrix;
+import android.graphics.Point;
 import android.net.Uri;
 import android.os.Environment;
+import android.os.ParcelFileDescriptor;
 import android.provider.MediaStore;
 import android.util.Log;
-import android.util.Size;
-import android.util.SparseIntArray;
 import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.InputStream;
 import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Date;
-import java.util.List;
+import java.util.Optional;
 import java.util.concurrent.TimeUnit;
+import javax.microedition.khronos.opengles.GL11;
 
 public class Utils {
     private static final String TAG = "Utils";
@@ -48,13 +50,28 @@ public class Utils {
     public static final String IMAGE_FILE_NAME_FORMAT = "'IMG'_yyyyMMdd_HHmmss";
     public static final String VIDEO_FILE_NAME_FORMAT = "'VID'_yyyyMMdd_HHmmss";
 
-    /** See android.hardware.Camera.ACTION_NEW_PICTURE. */
+    /**
+     * See android.hardware.Camera.ACTION_NEW_PICTURE.
+     */
     public static final String ACTION_NEW_PICTURE = "android.hardware.action.NEW_PICTURE";
-    /** See android.hardware.Camera.ACTION_NEW_VIDEO. */
+    /**
+     * See android.hardware.Camera.ACTION_NEW_VIDEO.
+     */
     public static final String ACTION_NEW_VIDEO = "android.hardware.action.NEW_VIDEO";
 
     private static final String VIDEO_BASE_URI = "content://media/external/video/media";
 
+    private static final int MAX_PEEK_BITMAP_PIXELS = 1600000;  // 1.6 * 4 MBs.
+
+    private static Uri mCurrentPictureUri, mCurrentVideoUri;
+
+    /**
+     * Has to be in sync with the receiving MovieActivity.
+     */
+    public static final String KEY_TREAT_UP_AS_BACK = "treat-up-as-back";
+
+    private static final int DOWN_SAMPLE_FACTOR = 4;
+
     @SuppressLint("SimpleDateFormat")
     public static File createOutputmediaStorageDir() {
         // To be safe, you should check that the SDCard is mounted
@@ -100,9 +117,19 @@ public class Utils {
             Log.v(TAG, "Current Picture URI: " + uri);
         }
 
+        mCurrentPictureUri = uri;
+
         context.sendBroadcast(new Intent(ACTION_NEW_PICTURE, uri));
     }
 
+    public static Uri getCurrentPictureUri() {
+        return mCurrentPictureUri;
+    }
+
+    public static Uri getCurrentVideoUri() {
+        return mCurrentVideoUri;
+    }
+
     public static void broadcastNewVideo(Context context, ContentValues values) {
         Uri uri = null;
         ContentResolver resolver = context.getContentResolver();
@@ -117,6 +144,7 @@ public class Utils {
         } finally {
             Log.v(TAG, "Current video URI: " + uri);
         }
+        mCurrentVideoUri = uri;
 
         context.sendBroadcast(new Intent(ACTION_NEW_VIDEO, uri));
     }
@@ -164,7 +192,7 @@ public class Utils {
     }
 
     public static ContentValues getContentValues(int type, String fileDetails[], int width,
-                                                 int height) {
+                                                 int height, long duration, long size) {
         if (fileDetails.length < 5) {
             Log.e(TAG, "Invalid file details");
             return null;
@@ -185,6 +213,8 @@ public class Utils {
             contentValue.put(MediaStore.Images.ImageColumns.DATA, fileDetails[3]);
             contentValue.put(MediaStore.MediaColumns.WIDTH, width);
             contentValue.put(MediaStore.MediaColumns.HEIGHT, height);
+            contentValue.put(MediaStore.Images.ImageColumns.SIZE, size);
+
         } else if (MEDIA_TYPE_VIDEO == type) {
             contentValue = new ContentValues(9);
             contentValue.put(MediaStore.Video.Media.TITLE, fileDetails[0]);
@@ -198,7 +228,329 @@ public class Utils {
             contentValue.put(MediaStore.Video.Media.HEIGHT, height);
             contentValue.put(MediaStore.Video.Media.RESOLUTION,
                              Integer.toString(width) + "x" + Integer.toString(height));
+            contentValue.put(MediaStore.Video.Media.DURATION, duration);
+            contentValue.put(MediaStore.Video.Media.SIZE, size);
         }
         return contentValue;
     }
+
+    /**
+     * Returns the maximum video recording duration (in milliseconds).
+     */
+    public static int getMaxVideoDuration(Context context) {
+        int duration = 0;  // in milliseconds, 0 means unlimited.
+        try {
+            duration =
+                    0;  // context.getResources().getInteger(R.integer.max_video_recording_length);
+        } catch (Resources.NotFoundException ex) {
+        }
+        return duration;
+    }
+
+    public static String millisecondToTimeString(long milliSeconds, boolean displayCentiSeconds) {
+        long seconds = milliSeconds / 1000;  // round down to compute seconds
+        long minutes = seconds / 60;
+        long hours = minutes / 60;
+        long remainderMinutes = minutes - (hours * 60);
+        long remainderSeconds = seconds - (minutes * 60);
+
+        StringBuilder timeStringBuilder = new StringBuilder();
+
+        // Hours
+        if (hours > 0) {
+            if (hours < 10) {
+                timeStringBuilder.append('0');
+            }
+            timeStringBuilder.append(hours);
+
+            timeStringBuilder.append(':');
+        }
+
+        // Minutes
+        if (remainderMinutes < 10) {
+            timeStringBuilder.append('0');
+        }
+        timeStringBuilder.append(remainderMinutes);
+        timeStringBuilder.append(':');
+
+        // Seconds
+        if (remainderSeconds < 10) {
+            timeStringBuilder.append('0');
+        }
+        timeStringBuilder.append(remainderSeconds);
+
+        // Centi seconds
+        if (displayCentiSeconds) {
+            timeStringBuilder.append('.');
+            long remainderCentiSeconds = (milliSeconds - seconds * 1000) / 10;
+            if (remainderCentiSeconds < 10) {
+                timeStringBuilder.append('0');
+            }
+            timeStringBuilder.append(remainderCentiSeconds);
+        }
+
+        return timeStringBuilder.toString();
+    }
+
+    /**
+     * Load the thumbnail of an image from an {@link InputStream}.
+     *
+     * @param stream        The input stream of the image.
+     * @param imageWidth    Image width.
+     * @param imageHeight   Image height.
+     * @param widthBound    The bound of the width of the decoded image.
+     * @param heightBound   The bound of the height of the decoded image.
+     * @param orientation   The orientation of the image. The image will be rotated
+     *                      clockwise in degrees.
+     * @param maximumPixels The bound for the number of pixels of the decoded image.
+     * @return {@code null} if the decoding failed.
+     */
+    public static Bitmap loadImageThumbnailFromStream(InputStream stream, int imageWidth,
+                                                      int imageHeight, int widthBound,
+                                                      int heightBound, int orientation,
+                                                      int maximumPixels) {
+        /** 32K buffer. */
+        byte[] decodeBuffer = new byte[32 * 1024];
+
+        if (orientation % 180 != 0) {
+            int dummy = imageHeight;
+            imageHeight = imageWidth;
+            imageWidth = dummy;
+        }
+
+        // Generate Bitmap of maximum size that fits into widthBound x heightBound.
+        // Algorithm: start with full size and step down in powers of 2.
+        int targetWidth = imageWidth;
+        int targetHeight = imageHeight;
+        int sampleSize = 1;
+        while (targetHeight > heightBound || targetWidth > widthBound ||
+               targetHeight > GL11.GL_MAX_TEXTURE_SIZE || targetWidth > GL11.GL_MAX_TEXTURE_SIZE ||
+               targetHeight * targetWidth > maximumPixels) {
+            sampleSize <<= 1;
+            targetWidth = imageWidth / sampleSize;
+            targetHeight = imageWidth / sampleSize;
+        }
+
+        // For large (> MAXIMUM_TEXTURE_SIZE) high aspect ratio (panorama)
+        // Bitmap requests:
+        //   Step 1: ask for double size.
+        //   Step 2: scale maximum edge down to MAXIMUM_TEXTURE_SIZE.
+        //
+        // Here's the step 1: double size.
+        if ((heightBound > GL11.GL_MAX_TEXTURE_SIZE || widthBound > GL11.GL_MAX_TEXTURE_SIZE) &&
+            targetWidth * targetHeight < maximumPixels / 4 && sampleSize > 1) {
+            sampleSize >>= 2;
+        }
+
+        BitmapFactory.Options opts = new BitmapFactory.Options();
+        opts.inSampleSize = sampleSize;
+        opts.inTempStorage = decodeBuffer;
+        Bitmap b = BitmapFactory.decodeStream(stream, null, opts);
+
+        if (b == null) {
+            return null;
+        }
+
+        // Step 2: scale maximum edge down to maximum texture size.
+        // If Bitmap maximum edge > MAXIMUM_TEXTURE_SIZE, which can happen for panoramas,
+        // scale to fit in MAXIMUM_TEXTURE_SIZE.
+        if (b.getWidth() > GL11.GL_MAX_TEXTURE_SIZE || b.getHeight() > GL11.GL_MAX_TEXTURE_SIZE) {
+            int maxEdge = Math.max(b.getWidth(), b.getHeight());
+            b = Bitmap.createScaledBitmap(b, b.getWidth() * GL11.GL_MAX_TEXTURE_SIZE / maxEdge,
+                                          b.getHeight() * GL11.GL_MAX_TEXTURE_SIZE / maxEdge,
+                                          false);
+        }
+
+        // Not called often because most modes save image data non-rotated.
+        if (orientation != 0 && b != null) {
+            Matrix m = new Matrix();
+            m.setRotate(orientation);
+            b = Bitmap.createBitmap(b, 0, 0, b.getWidth(), b.getHeight(), m, false);
+        }
+
+        return b;
+    }
+
+    public static Optional<Bitmap> generateThumbnail(File path, int boundingWidthPx,
+                                                     int boundingHeightPx) {
+        final Bitmap bitmap;
+
+        /*if (getAttributes().isRendering()) {
+            return Storage.getPlaceholderForSession(data.getUri());
+        } else {*/
+
+        FileInputStream stream;
+
+        try {
+            stream = new FileInputStream(path);
+        } catch (FileNotFoundException e) {
+            Log.e(TAG, "### File not found ###:" + path.getPath());
+            return Optional.empty();
+        }
+        int width = 1280;
+        int height = 720;  //.getDimensions().getHeight();
+        int orientation = 0;
+
+        Point dim = resizeToFill(width, height, orientation, boundingWidthPx, boundingHeightPx);
+
+        // If the orientation is not vertical
+        if (orientation % 180 != 0) {
+            int dummy = dim.x;
+            dim.x = dim.y;
+            dim.y = dummy;
+        }
+
+        bitmap = loadImageThumbnailFromStream(stream, width, height, (int)(dim.x * 0.7f),
+                                              (int)(dim.y * 0.7), 0, MAX_PEEK_BITMAP_PIXELS);
+
+        return Optional.ofNullable(bitmap);
+        //}
+    }
+
+    /**
+     * Calculates a new dimension to fill the bound with the original aspect
+     * ratio preserved.
+     *
+     * @param imageWidth    The original width.
+     * @param imageHeight   The original height.
+     * @param imageRotation The clockwise rotation in degrees of the image which
+     *                      the original dimension comes from.
+     * @param boundWidth    The width of the bound.
+     * @param boundHeight   The height of the bound.
+     * @returns The final width/height stored in Point.x/Point.y to fill the
+     * bounds and preserve image aspect ratio.
+     */
+    public static Point resizeToFill(int imageWidth, int imageHeight, int imageRotation,
+                                     int boundWidth, int boundHeight) {
+        if (imageRotation % 180 != 0) {
+            // Swap width and height.
+            int savedWidth = imageWidth;
+            imageWidth = imageHeight;
+            imageHeight = savedWidth;
+        }
+
+        Point p = new Point();
+        p.x = boundWidth;
+        p.y = boundHeight;
+
+        // In some cases like automated testing, image height/width may not be
+        // loaded, to avoid divide by zero fall back to provided bounds.
+        if (imageWidth != 0 && imageHeight != 0) {
+            if (imageWidth * boundHeight > boundWidth * imageHeight) {
+                p.y = imageHeight * p.x / imageWidth;
+            } else {
+                p.x = imageWidth * p.y / imageHeight;
+            }
+        } else {
+            Log.w(TAG, "zero width/height, falling back to bounds (w|h|bw|bh):" + imageWidth + "|" +
+                               imageHeight + "|" + boundWidth + "|" + boundHeight);
+        }
+
+        return p;
+    }
+
+    /**
+     * Rotates and/or mirrors the bitmap. If a new bitmap is created, the
+     * original bitmap is recycled.
+     */
+    public static Bitmap rotateAndMirror(Bitmap b, int degrees, boolean mirror) {
+        if ((degrees != 0 || mirror) && b != null) {
+            Matrix m = new Matrix();
+            // Mirror first.
+            // horizontal flip + rotation = -rotation + horizontal flip
+            if (mirror) {
+                m.postScale(-1, 1);
+                degrees = (degrees + 360) % 360;
+                if (degrees == 0 || degrees == 180) {
+                    m.postTranslate(b.getWidth(), 0);
+                } else if (degrees == 90 || degrees == 270) {
+                    m.postTranslate(b.getHeight(), 0);
+                } else {
+                    throw new IllegalArgumentException("Invalid degrees=" + degrees);
+                }
+            }
+            if (degrees != 0) {
+                // clockwise
+                m.postRotate(degrees, (float)b.getWidth() / 2, (float)b.getHeight() / 2);
+            }
+
+            try {
+                Bitmap b2 = Bitmap.createBitmap(b, 0, 0, b.getWidth(), b.getHeight(), m, true);
+                if (b != b2) {
+                    b.recycle();
+                    b = b2;
+                }
+            } catch (OutOfMemoryError ex) {
+                // We have no memory to rotate. Return the original bitmap.
+            }
+        }
+        return b;
+    }
+
+    public static Optional<Bitmap> getVideoThumbnail(ContentResolver mContentResolver, Uri uri) {
+        Bitmap bitmap = null;
+        ParcelFileDescriptor mVideoFileDescriptor;
+
+        try {
+            mVideoFileDescriptor = mContentResolver.openFileDescriptor(uri, "r");
+            bitmap = Thumbnail.createVideoThumbnailBitmap(mVideoFileDescriptor.getFileDescriptor(),
+                                                          720);
+        } catch (java.io.FileNotFoundException ex) {
+            // invalid uri
+            Log.e(TAG, ex.toString());
+        }
+
+        if (bitmap != null) {
+            // MetadataRetriever already rotates the thumbnail. We should rotate
+            // it to match the UI orientation (and mirror if it is front-facing camera).
+            bitmap = rotateAndMirror(bitmap, 0, false);
+        }
+        return Optional.ofNullable(bitmap);
+    }
+
+    public static Intent getVideoPlayerIntent(Uri uri) {
+        return new Intent(Intent.ACTION_VIEW).setDataAndType(uri, "video/*");
+    }
+
+    public static void playVideo(Activity activity, Uri uri, String title) {
+        try {
+            Intent intent = getVideoPlayerIntent(uri)
+                                    .putExtra(Intent.EXTRA_TITLE, title)
+                                    .putExtra(KEY_TREAT_UP_AS_BACK, true);
+            activity.startActivity(intent);
+
+        } catch (ActivityNotFoundException e) {
+            Log.e(TAG, "cant play video");
+        }
+    }
+
+    public static String getRealPathFromURI(Context context, Uri contentUri) {
+        Cursor cursor = null;
+        int column_index;
+        try {
+            String[] proj = {MediaStore.Images.Media.DATA, MediaStore.Video.Media.DATA};
+            cursor = context.getContentResolver().query(contentUri, proj, null, null, null);
+
+            if (getMimeTypeFromURI(context, contentUri).compareTo("video/mp4") == 0) {
+                column_index = cursor.getColumnIndexOrThrow(MediaStore.Video.Media.DATA);
+                cursor.moveToFirst();
+
+            } else {
+                column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
+                cursor.moveToFirst();
+            }
+
+            return cursor.getString(column_index);
+        } finally {
+            if (cursor != null) {
+                cursor.close();
+            }
+        }
+    }
+
+    public static String getMimeTypeFromURI(Context context, Uri uri) {
+        ContentResolver cR = context.getContentResolver();
+        String type = cR.getType(uri);
+        return type;
+    }
 }
diff --git a/camera/MultiCameraApplication/res/drawable-v24/ic_launcher_foreground.xml b/camera/MultiCameraApplication/res/drawable-v24/ic_launcher_foreground.xml
deleted file mode 100644
index 1f6bb29..0000000
--- a/camera/MultiCameraApplication/res/drawable-v24/ic_launcher_foreground.xml
+++ /dev/null
@@ -1,34 +0,0 @@
-<vector xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:aapt="http://schemas.android.com/aapt"
-    android:width="108dp"
-    android:height="108dp"
-    android:viewportWidth="108"
-    android:viewportHeight="108">
-    <path
-        android:fillType="evenOdd"
-        android:pathData="M32,64C32,64 38.39,52.99 44.13,50.95C51.37,48.37 70.14,49.57 70.14,49.57L108.26,87.69L108,109.01L75.97,107.97L32,64Z"
-        android:strokeWidth="1"
-        android:strokeColor="#00000000">
-        <aapt:attr name="android:fillColor">
-            <gradient
-                android:endX="78.5885"
-                android:endY="90.9159"
-                android:startX="48.7653"
-                android:startY="61.0927"
-                android:type="linear">
-                <item
-                    android:color="#44000000"
-                    android:offset="0.0" />
-                <item
-                    android:color="#00000000"
-                    android:offset="1.0" />
-            </gradient>
-        </aapt:attr>
-    </path>
-    <path
-        android:fillColor="#FFFFFF"
-        android:fillType="nonZero"
-        android:pathData="M66.94,46.02L66.94,46.02C72.44,50.07 76,56.61 76,64L32,64C32,56.61 35.56,50.11 40.98,46.06L36.18,41.19C35.45,40.45 35.45,39.3 36.18,38.56C36.91,37.81 38.05,37.81 38.78,38.56L44.25,44.05C47.18,42.57 50.48,41.71 54,41.71C57.48,41.71 60.78,42.57 63.68,44.05L69.11,38.56C69.84,37.81 70.98,37.81 71.71,38.56C72.44,39.3 72.44,40.45 71.71,41.19L66.94,46.02ZM62.94,56.92C64.08,56.92 65,56.01 65,54.88C65,53.76 64.08,52.85 62.94,52.85C61.8,52.85 60.88,53.76 60.88,54.88C60.88,56.01 61.8,56.92 62.94,56.92ZM45.06,56.92C46.2,56.92 47.13,56.01 47.13,54.88C47.13,53.76 46.2,52.85 45.06,52.85C43.92,52.85 43,53.76 43,54.88C43,56.01 43.92,56.92 45.06,56.92Z"
-        android:strokeWidth="1"
-        android:strokeColor="#00000000" />
-</vector>
diff --git a/camera/MultiCameraApplication/res/drawable/bg_text_on_preview.xml b/camera/MultiCameraApplication/res/drawable/bg_text_on_preview.xml
new file mode 100644
index 0000000..cdc2b04
--- /dev/null
+++ b/camera/MultiCameraApplication/res/drawable/bg_text_on_preview.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2010 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+        android:shape="rectangle">
+   <solid android:color="@color/on_viewfinder_label_background_color"/>
+   <corners android:radius="3dp"/>
+</shape>
diff --git a/camera/MultiCameraApplication/res/drawable/ic_back_normal.png b/camera/MultiCameraApplication/res/drawable/ic_back_normal.png
new file mode 100644
index 0000000000000000000000000000000000000000..d326323c3851a9b2c682643456f660946a9dfa19
GIT binary patch
literal 918
zcmeAS@N?(olHy`uVBq!ia0vp^3LwnE1|*BCs=fdzmUKs7M+SzC{oH>NS%G}U;vjb?
zhIQv;UV>C6dj$D1FjT2AFf_C<F#G}vHN0S8C^cYUc$L7wU^Rn*LA+qju0R{01Y44~
zy9>jA5L~c#`DCC7XMsm#F_88EW4Dvpb_@(mX`U{QArXh)PTSbe8z^$D-uUyqs!Aax
zkxfE^W>bU$7YWrfO3jtp8n!6JL&Zz0*G*ID;%yI)un?!_1Y7SzZFkK-Yd(vq{x-|J
zI5+O-yp*E!XY;DxmGApKw^~2v*8jZ7uE{Fz_kWwH%A3D6?$Hqj)&Sq)q6Qno*Gw9X
zi43xhv-KFnZOSLlXL@IKZJD#9&Bkgj&zZK<LvM3?+P*#?Tc7y9I`7W=2x&$krZZku
z3rwR67&f)Ae9{w$lsRxy@`05BcTexH)CZjFgx2Is{@~cdGLPx=fk{Wtdx)+-U9)=0
z@o8WEJ(vDFch7s5VrGBzIybdh89ZC<m}8jrg1R>_xE;{_eQt%Tm2<4@?uNey6cZ92
zx*dpoF!5*DTAdwVPs_ZzJV{J<bNaSzuT35tdphZvO6<fhSC7?9E4g5NQPqK8i6d|Q
zl1k6@D!CgSYM1|+$1K(`f5Mle4tL59`K)S+IO`$hWtIPS*Vmpu#mt>cR<k`=yF_;K
zDs@(mc|k$E3;Hb+<#;##nX!krLD)O>kj@_$-G2)|Gk-XIZ#%oW{j#qHSsYPnm&0!h
zytw__YqIk^xz%@-!km)Yd$;BvnB6h=B#+CNWesOyv`?2Y#BBJ_eIUDfz0jlF8I2nz
zznffgpYy|=B}Q+O7O=}0NX>o{AF%!-!wt?ejK>=%A29p8lk<+D+GUd`MmKdcJ%dy;
zT`y&Q>5)Fyc<Pp`=X4um-)o_)Gk^ZrcG4?r;a=u>%>0ej2h{I``dyNL?vU)zzKvgI
z<4N_m4#^L!zaBJZ3R|qoRqgRu(PV0Ns7rogp|?=pg;<`JhPe`VQiAtx%fGche?No!
zo~zF9Z*^`4COy>>*NBpo#FA92<f2p{#b9J$Xsl~!q-$s%VrXb(VrFG*qHSPcWni#g
z_{j+r4Y~O#nQ4`{HQe)yDFJGb1lbUrpH@<ySd_}(n3A8As^FQMn4TJxnwU~qcrq1~
PKNvh+{an^LB{Ts5mx^^6

literal 0
HcmV?d00001

diff --git a/camera/MultiCameraApplication/res/drawable/ic_capture_camera_disabled.png b/camera/MultiCameraApplication/res/drawable/ic_capture_camera_disabled.png
new file mode 100644
index 0000000000000000000000000000000000000000..af6833f791aa6602bf11b0e45356d489d2b44e68
GIT binary patch
literal 343
zcmV-d0jU0oP)<h;3K|Lk000e1NJLTq002Ay0027(1ONa4jqo8s0003VNkl<ZcmeH}
z1HvpZ7{EGf+qRASA1!Np`@W~Y$pJD`tA8JZ!C){Lc%XdNB1+-PBzDBZ5r!;TTsR|(
z4Y`5cXXkgEkYb%aS2ye+M}y|xb@qW{S~T~T@#=<c6q%h3>img|Gh4Xy!afEMa?hO*
z)e8q74({_Ym=e<q2Ofk+G$^mFF?jID0^tc|{5Y`I+VPNKh<upwe&g8j;>U@?B1BI(
zygw=|qBQ9<piLS(iU<?gaC`fYDJEy9RslOU%Cg}!3J-&;NCZWgsa$wU7)65V)y67e
z;ibnyDm)^f6lrEx;W~EQbXoj&e=I-8@~c{YAIqOy|Ls{Ve>=(F$MP=_{WsThAHTWu
pUzyMSg|AEvA7C&T3<iV2umS|PhWhS$O633m002ovPDHLkV1ly)l@tH~

literal 0
HcmV?d00001

diff --git a/camera/MultiCameraApplication/res/drawable/ic_capture_camera_normal.png b/camera/MultiCameraApplication/res/drawable/ic_capture_camera_normal.png
new file mode 100644
index 0000000000000000000000000000000000000000..21bd15110ff885b5b4c050c0b953b9dcf5c1129d
GIT binary patch
literal 374
zcmV-+0g3*JP)<h;3K|Lk000e1NJLTq002Ay0027(1ONa4jqo8s0003!Nkl<ZcmeH}
z1B_ll90#|yjj*<jIJMozscpMqZN_X=o~`Jjvu)d&vwbi7apxC5%zFRA_)#bn3Wb7p
zB468w1H5RF(~Oj?rZ@YEr6q+tVjxlnb~n+qMJDGMglHPA;_*Dg0_(cO(jMtJHoWzX
z1zN=e`9LY%$BC)h#ES@~CuFcsn|LG9^n_fFX%lZ~N1VhzzE|ZZVU+7ioWl>+FoynB
z8P06(5~~YwDwi3IU?huJ&SV6A*o?PqaS;y~%m5ByLm(lzbD5C{c9SVr?7<`i7s+VS
zl-CSn5I^LKZ_t}LEw)%Ddl76WSDv_lEeK9fKvOFCL?7niD^DEHS|PYf3C;P<Fs9?F
zw;t<tj`hE)^}mnxe{$*ntk(bSr2qR^{}qV-Yp#}6X4j&<%0xpH3WY+UP$=4=67T#~
U9dmaB;s5{u07*qoM6N<$f+}XHkpKVy

literal 0
HcmV?d00001

diff --git a/camera/MultiCameraApplication/res/drawable/ic_capture_video.png b/camera/MultiCameraApplication/res/drawable/ic_capture_video.png
new file mode 100644
index 0000000000000000000000000000000000000000..6dba33723e2e89adc6bfa3ccdbee7cd532a4e970
GIT binary patch
literal 298
zcmV+_0oDGAP)<h;3K|Lk000e1NJLTq002Ay002A)1ONa4ko6Jy0002-Nkl<ZcmeIr
zB|rpG6h`5PySqERP-(bkG8uR86>m5coQPDUR~j_j^`INqedd0Dd~%d<KOuw=LI{55
zi=Wx~;P7k_W6UvYa&t5jiQ!Ece%KujWg1JIQ;PasA$`Q#AC6!dOI%U^o6TW|Ba&Pl
z&Sx7qA<=c=OKQnri+9(D+galiTpfPmj8|}d_?LuT5&q=UJ>feJxN=AMk_I}taeerT
zIs)kB#`WR)-`joMJ1V?_<zYoA{p^u!e>i{<UiskN#6I}slwy8g5J@#r_J<XTG%`S+
w$@Nk}Fork2_@L~D!pDLsln_D)A%yTOU*jmu-ihP~ZvX%Q07*qoM6N<$f<{M!fdBvi

literal 0
HcmV?d00001

diff --git a/camera/MultiCameraApplication/res/drawable/ic_capture_video_disabled.png b/camera/MultiCameraApplication/res/drawable/ic_capture_video_disabled.png
new file mode 100644
index 0000000000000000000000000000000000000000..299c01cbf8017bf8541cbbcd395d1a7123894bc7
GIT binary patch
literal 240
zcmV<M01y9(P)<h;3K|Lk000e1NJLTq002Ay002A)1ONa4ko6Jy0002DNkl<ZcmeI!
zMYe=M6a-Q9ySux#+y1u}ZN(IKGIIRRg;`ljDW#NBs`}W@j+{mA>>)3_MeYWd;Ksow
zGwkrnJjO<xU~RU`9bR_W<s%k6;mojK{Na}h8+Oir*?+vlC-d^*Tf>$NPZ=>QA2t)*
zYIw>IlPcgb7u+%}AD(cA%^edK<--;ZcT6jQ4gG_k9kzL376Tq|Oz^3vxY=O~k1OsY
qcE>3W<|e222(hP>Qc5YM>eUiLhmU1(i!y@%0000<MNUMnLSTX;b!IpK

literal 0
HcmV?d00001

diff --git a/camera/MultiCameraApplication/res/drawable/ic_confirm.png b/camera/MultiCameraApplication/res/drawable/ic_confirm.png
new file mode 100644
index 0000000000000000000000000000000000000000..6894bd2c7a4d98629a7f0f47f553e0d005109326
GIT binary patch
literal 1666
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
M07*qoM6N<$f@h@$o&W#<

literal 0
HcmV?d00001

diff --git a/camera/MultiCameraApplication/res/drawable/ic_control_play.png b/camera/MultiCameraApplication/res/drawable/ic_control_play.png
new file mode 100644
index 0000000000000000000000000000000000000000..2de5b4f619c29d92acd8de3f0e0e963cb84a073f
GIT binary patch
literal 6627
zcmV<9864(`P)<h;3K|Lk000e1NJLTq003bC003bK1ONa4Y!3%000002VoOIv0RM-N
z%)bBt010qNS#tmY07w7;07w8v$!k6U000Sga6xAP003bC003bCs+>Cz000>4Nkl<Z
zc-pO8X>=S{mHzIls@~L+y0uu6<3)~R$B7LI2_cz42+1K~J#ZM7Va~7&WLO4fIP7qM
zVau>2Fb6`y4gr!d4B;?mfPp~5nuIkFVmo%?-Lbq#maJAw>ZP`K=SRI)^{TohFPUz;
zT_sh&cfWhTd+)1vZ<%n$FV+VXoxBlW2I!vL)di799u6E>5C8y)00Dfo1NSHG7y97W
z<IBc3_2HSl&gh$_@NK>s@5Z^}zT$8%`q6`uES$(6%uPBqd){_QKqAlmK{Xij$K9$Y
zT4-Sr^`i^xTWx+BzWca=oc4DT@g)lYx7x3+SOeToy?gua>Hkab-k#%yxqRCWL}*Ep
zL|_OO(w3Gi`W1Jiy}ohD!Zr1E^SnUyVD>9>uMG=eqBDkZTGuDy*LVP+xxW4t7;030
zFmQKuYyXk*VnGT4iv<fNCS!00gGo|Ik|c!eZLeOquzqdr`L$9FGqY2J3&1>j=}cgp
z#<hC%I{u3%#e0YHD=~D};5SDe7@X=2Et_p=F@eBKj~WfZOd<JJ2s;>AymaPuQ&*kf
z8TaVlo!BV<jr!D8r!LqjUa7@z;(C5ee0@c6b#v%TBe$>IH{dxr=}1bAMN5pzoEnmu
zJj<uNw{iB>M_zwCH{F<c%5;(MqvC1V;*_q6Msz99!0h0_cyq<4#%^D8q#`IEh<Fr=
zaU_FAKhvUf{27B`uq4-Jxu*8oLvNdOre+Qf)%0AaCf-S}iRO|J1m02DwBA~I^VsLs
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

literal 0
HcmV?d00001

diff --git a/camera/MultiCameraApplication/res/drawable/ic_exitscreeen.png b/camera/MultiCameraApplication/res/drawable/ic_exitscreeen.png
new file mode 100644
index 0000000000000000000000000000000000000000..cbbdca57060ce946b656a3ce5031d3fd66e8f02d
GIT binary patch
literal 1190
zcmV;X1X=ruP)<h;3K|Lk000e1NJLTq001%o001%w1^@s69zTe&00006VoOIv0RI60
z0RN!9r;`8x1Y1c&K~!jg?U_$Z+h!QXU&jssgcKl&S15_Ip{k`C1gZ&bf>qj|Q|}x$
zts7Dko47T*4fW>34yy!GY1B*((WZ?_JLKG*Ds@`NdY}umblr&(!z79w44JZ$IB~um
zrb;7m5+_E8P5vG8eDCY$QS!yFKLc1;SkwYH+kj=+jzA!AI+;vn8m;Ad-Zn5W@apL3
zXkmGISvBLsW~Mk43SIB)>e@ed{`|A6*RDMchr?%$)&_&YfpmKJ_x>|y)}5W5`!r2|
zX2wg?OifLV&CbmsN!df`{R~=pyoSQz@RHGbmSrD2dh#1e?`P1?u7YOg=1L61yw$9q
zroRz{(D=~sFxYJWwD9_T;C6f7oS2wssaHEWIoaxVdqz+9^#K3?j^i*G2w(tku~|Q6
zg0vBY{m^HGov?X4p1MKW+uI48zz<#9Zf^mEP+PNpOzn}AgcanZVFfv95Y+^RVcr0M
z_e!Nwm!6Ig8b4|?2%+~wp-`)yhGE#B2%#Sr78ZWd({+Q;G(G)VfB((E$Oz_e==KEw
z03Ss)Wmpf&?}raBe>?^NV|sd_pu*$TRm3pNbwLnrl<O5iIF564baZ?%c_oP9xam>M
zFixiv28V`ft_ci}U^nMxKc{Ir5{t!N{9CKoBbug>UESSn#~H#XIF5tM<styUU9MFG
ziAJMaqA0G3snl_JYlyAQP1xAjc-q_B`$xH^yGQc5+@;u;(QiE@`L^9|ulk2jjx0&r
zBuVD#ts_Y?Cri@y?OXFbMtf^Ttt3f1O9-JWJkOWPb*xq~$8nBgvDj|-Vw#qX#bN~`
zYiXLc<2c@7w0Aa}RTmc*|1!GX!otGB!lDuWGdDznAYMcwk$g2>HweqJUQN@!aeF)$
zTUuHSPmi)BZM)rWAJ6l}TI+b8C(`NkriUaAk0^ygp(snzeH_O>iAJMa<+|=1h1qO(
zXqp+M{C=a?0RVv8x8{3xo<DB|fNZUGk|edha_Usi)#*<gX-|l$)H`3r7w!N+#k^lJ
z{jx0Ur6{W55XS-K_X9;ygTY|1uUxALg5$Wfrzi)SrX7#F2GBGO_7vqHlgUWsTE$N*
z5{cv)hMD;~zA!(0;X>U<U8mD|BqlSN3~Y*GRXv~2!D=#z6h)ayBoY-T_quyT5QGTB
zFb|%sufK~B>aNmz{DY4!j|~L^%{ebaOr_xa?-rK;;AcJEX0z>SnszrHkN>KtSAA#_
z1mPh7JglbEG|fYmgMwzkFzjwD7UP?#{okBxSwT)3R*;j1nKxEhRXsezsj6C#Wx4L#
zSy`4<RaFlSm#Ufvgiy`VrWR&`+<UaLf?iGlVk!k`S^i1yW>roikx+Nj>H9Aa0X0p7
z)npPOgzh!#r{)-651OW@T`t#+uI}zuQ54tmx!k3AJYI1Ms0YikUK@`8;Pd%j-&2$W
zMNwu1L5P^~V+xMr94yOvo2_SA*2{66<0w5@SXfl@H#JbS#goJc4gdfE07*qoM6N<$
Ef=yXAz5oCK

literal 0
HcmV?d00001

diff --git a/camera/MultiCameraApplication/res/drawable/ic_full_screen.png b/camera/MultiCameraApplication/res/drawable/ic_full_screen.png
new file mode 100644
index 0000000000000000000000000000000000000000..8cff8ff55f8178d5c8c555d9d37da7ea93931c45
GIT binary patch
literal 671
zcmV;Q0$}}#P)<h;3K|Lk000e1NJLTq0015U0015c1^@s6J20-I00006VoOIv0RI60
z0RN!9r;`8x0#r#vK~zYI?N&RB8c`TMGdr^qA}SIj+N22TC`{|0uojy%QJDe3GTBP3
zgs`m;6d9{+Hj*}lKS4wb<7=&~d_{E7#(8*CWL?zwSk1Caz*EgV^WAgqcQ4#~fHR&6
z)HX5@2wa-YW)1+m<Om_ZBuVP*6AOpK?<k6TvqGt|EI0G{ymHW35Cp%&;kfm9Jg*ss
zdEm$6F-oP<bvm8C+GZ+>;<eA``(&|L9ym?YP_Nf#y<RVv$z*=)TyZQGGb9p;siG)k
z8{+Z!aM#>;JU-kuM^O}#NF=6#K;Uw<o>?8t=W`dwaYmM9QLR?dZnxJu9t;N3F5}^F
zn9JpIpI19}I-THo9vsIR`~AKPz|XD50NCaBwpuL|3WX1ZkS1{WjMM4#m8z;=muE~-
z6t`F`Zg`#t!!TGZ7P~v%1VvGeY&KioSF?)yg>?Wx5CpQXmVT`0Q)A6o*Y%Ms%K(7M
zWCC5+N2dxO(z;k3R4NtOZnwWG7K>cF-A-k*+3%+sKc&_gXZ#<y*d#<z{Nnffzqwp4
zTe(~={EPUbwW87J+e{{-6GDh2NkkBY_otd3(ptN@G);3@tyUTUOePZmm`^o6r1fHV
z_1@Qs5aNkMBGmo&QPGDG!X0C*YMKTBaJ${0Y5HdQV>}*%W!a;mkJIS{@FxP%G`*I)
z){G4X!(Fr4oT;j6<ar)E&##GhI-L-Jt;RN+?PDku`ioap6^%w?IvS1cb{eNrsktbM
z!DKRd>-Bn#n_=(R=%Z;GYPH&|+wBH7lje)X+cTaGzX7f4aJJanT|EE*002ovPDHLk
FV1lyBII92v

literal 0
HcmV?d00001

diff --git a/camera/MultiCameraApplication/res/drawable/ic_launcher_foreground.xml b/camera/MultiCameraApplication/res/drawable/ic_launcher_foreground.xml
deleted file mode 100644
index f8e8dca..0000000
--- a/camera/MultiCameraApplication/res/drawable/ic_launcher_foreground.xml
+++ /dev/null
@@ -1,13 +0,0 @@
-<vector xmlns:android="http://schemas.android.com/apk/res/android"
-    android:width="108dp"
-    android:height="108dp"
-    android:viewportWidth="41.37931"
-    android:viewportHeight="41.37931"
-    android:tint="#000000">
-  <group android:translateX="8.689655"
-      android:translateY="8.689655">
-      <path
-          android:fillColor="#FF000000"
-          android:pathData="M17,10.5V7c0,-0.55 -0.45,-1 -1,-1H4c-0.55,0 -1,0.45 -1,1v10c0,0.55 0.45,1 1,1h12c0.55,0 1,-0.45 1,-1v-3.5l4,4v-11l-4,4z"/>
-  </group>
-</vector>
diff --git a/camera/MultiCameraApplication/res/drawable/ic_menu_cancel_holo_light.png b/camera/MultiCameraApplication/res/drawable/ic_menu_cancel_holo_light.png
new file mode 100644
index 0000000000000000000000000000000000000000..335deaa5ce162eb1706a038201a8ce1e4c9b6e7e
GIT binary patch
literal 1181
zcmV;O1Y-M%P)<h;3K|Lk000e1NJLTq001Ze001Zm1ONa4CiigW000DJNkl<ZcmeH}
zMS2@e5QeMAI8tkR%*>A@Gh-Me)5^Yrv&sd+S(%yH3gg;vh~y+8nZ4EjO}D}tg*HFU
zx2dPA=Iv^%rhoXyZ1e{(Evy(QY%9<2!4xR=3n}m~LlsWJ;-umsWrd+X36!8%h53X^
zphP8D3L8d407u8glCBxdWF{Hp2xD|uO1f%+C1W%LEwRy%8Uj-C3vaZQdnupN0Chqf
zazPw&LIynf<=z`@`Gu5%KQwz_3^URScdiCsZ{0DPG%saQ5(xlASg_ENrFliu)}7$%
zovUeu%%B*1U@V!}TZ6Acp`*8ths1d*r(9%{{DsocQZCLv89sU&3I$(XZzYprqs^dM
z>fOF;1s{HRFm7C8)l`5y(<u!~hgHC;jY|*44?kF)Zr>^MN+7deUl-+x<|jjk??a)3
z4;z!*Pjys+tg@h7SasaLF?j&o;rk~;qKWdzWw+J}s8cHQh;uRrAlIkOE@~tX6+j+p
zG`rTPB@X$EbIe1jq(=s-jT}n}=rNPZj7x#30}B~kn{{@xR;r>Z*6QqDn>`3x9R()E
zB`QOt3xC9_jUEXY2e$+3n8T{MAGriA<nlc4B|rIj@AABAS)b;9%x(@M9rz>84v6!i
zHZ2BHKy_v(^0BhqonLiaaa@^SJ=nFfTbngIsSXjT;mscxY0yj#I9>u>=s5!m(CF-5
znYSQ&dqXdWUheH#@RfOIH#NeWfhd;*#>+u}1JphNaS{-kh5>n4i>r5WRf0|qPC}vm
zy@gfY%UZ|-ZyKU-l0E^o?*=S^dKj3B2``{Zy6os1e7O%8a3_N=9es2etp)I=hJm^S
z%0WlS@C#rD<tyO8i~VB>JRW$Vfbe8|4OAIM0;)MQ5uQzM*1~({zZmk~-ux=>!I0hX
zrjn`VFfvdLS^+siGpLvvuqbl}!LJr2xH5-DX@EBaQT!7y%0AT5ZwdxgYj&*8sLj2w
z>gdz^7FN`zUY#*Js1^|^h}5I)Lp5jz3Cd=b+_yfZ04sC6hkWGYJ;+yfus+3otP;Z(
zh(>;PKusP!j=_|Qi-C!Q_c*h`wHap@Yo-dSV9n01wV6Y!llOrMagj<9$>q`0Y)`Yi
z9NgmULv=a4-<ZPi>d8&{kelkwj*ThV(T9iQ=2_;JmqU!rZ3D#;r(DtWbm&n2bZ>(D
zsD_F#xC|&8Rt@*vn>du$*V94KNV&xE7lZ6B*fP(~9d*Gz91|BYQ+bq*JW`-kSb3~c
zTzojDF4&#hWgd0G+Lr)vGh70m4w`4FjIseTzfcNV%FMG*2UQ8U*-FB;1Tdl)GSUmI
zBDHhJXw=-4fpFJXRnLW%49zVXcVv-DFCY{t7Nv|PT4nTBYlVk$DFpx>azIW<R%VF9
zlUw1r)hf$qqJ0@vmsnzq!2}Z$77rzS`Er2JW<jl(7z1tU;<86VUq6r3b3_UDSH75^
ve=_~d>x=&6NvEV>fBNWDScQrJ`~Uk3hc1D>Msl}i00000NkvXXu0mjf@2VY5

literal 0
HcmV?d00001

diff --git a/camera/MultiCameraApplication/res/drawable/ic_menu_trash.xml b/camera/MultiCameraApplication/res/drawable/ic_menu_trash.xml
new file mode 100644
index 0000000..cb94342
--- /dev/null
+++ b/camera/MultiCameraApplication/res/drawable/ic_menu_trash.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2011 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_enabled="false"
+          android:drawable="@drawable/ic_trash_disabled" />
+    <item android:state_enabled="true"
+          android:drawable="@drawable/ic_trash_normal" />
+</selector>
diff --git a/camera/MultiCameraApplication/res/drawable/ic_record.png b/camera/MultiCameraApplication/res/drawable/ic_record.png
new file mode 100644
index 0000000000000000000000000000000000000000..a36626a9be1586c6bb731bea7eb444ad76b64e20
GIT binary patch
literal 1701
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

literal 0
HcmV?d00001

diff --git a/camera/MultiCameraApplication/res/drawable/ic_recording_indicator.png b/camera/MultiCameraApplication/res/drawable/ic_recording_indicator.png
new file mode 100755
index 0000000000000000000000000000000000000000..aa8781d8087a86adb11c9a70342fb965c57f5f89
GIT binary patch
literal 700
zcmV;t0z>_YP)<h;3K|Lk000e1NJLTq000^Q000^Y1^@s6sY*=F0000PbVXQnQ*UN;
zcVTj606}DLVr3vnZDD6+Qe|Oed2z{QJOBU!UP(kjRCwCNR!wWvP!!F3FUe$*N!zKm
zqF7u=tEJ*bL{~yLb>m8K;X=f}AowQ~{0oA(apTIJ6x^wFQ;LFAbW^d?(yy6zCYgMB
zPq<IQs56~5wigb`WWqVQ_q}`W6Grb41W8Z~$v~uxgn|347tz0-gV-ii2o7JZE}@7J
z5(2(<STyS=Bp4uc3I0RBe(9R+T%9n@$+}Qyt5Tf6i|sVq*vgXcD{=hgLnl~x+T8j`
zkDG)Re?V3g6n`lbzTAJ{4PU%nt=*cktm~eT<Gt#;m!)gVQS|;*d-wITy`9f27#7Q^
z3hzrU(eRUzvDrIr?f#@?->`-7`mCdYcTOww!n9?do3iZSP0;#DkK<w)RUsQ&i_AIh
zy>Vqu8v}+f<*75uoH%dV4HEmoB}|J#CZR^<nn5N95z*laIeJp6QA+3AViay_F<HpQ
z$C^+HE*pmoaDWS(%q?_(c(l8&+^o8H_p>JZi6JTL#I^jc6Rcv}>t=MYh5PNUK>}Rh
z<PD~@Pz8NrlpM@i(L#WQW-MEXIdeDBLQ;2pnZcY=3mr*F?ZWV`vdNh<)qRw^FbuM6
zA?Ezuu<)Z0E?l+{bHZE`Efm1&;lgE!fD4>Fs}fzh5c339UzQNKct+*pLYr!C<&Ka$
zuzI-gVMJDwc<Fho`GQP!1$&}fD5XDkF;8IiaN&c9Y^2H8`LO-+adUHl2VmSi_;N7}
zEzA>G{h*m46No(8UVlqJ8+?ZNW5VhKM~tC`c~X}uV;A=NE&QjbGmmm{CJkPj>{t&c
iM|#})ZwJU<0t^5M%p!FBFv#2h0000<MNUMnLSTXuBueD~

literal 0
HcmV?d00001

diff --git a/camera/MultiCameraApplication/res/drawable/ic_settings_black_24dp.xml b/camera/MultiCameraApplication/res/drawable/ic_settings_black_24dp.xml
index 7f2f06c..314de0f 100644
--- a/camera/MultiCameraApplication/res/drawable/ic_settings_black_24dp.xml
+++ b/camera/MultiCameraApplication/res/drawable/ic_settings_black_24dp.xml
@@ -1,5 +1,5 @@
 <vector android:height="24dp" android:tint="#11090A"
     android:viewportHeight="24.0" android:viewportWidth="24.0"
-    android:width="24dp" xmlns:android="http://schemas.android.com/apk/res/android">
+    android:width="35dp" xmlns:android="http://schemas.android.com/apk/res/android">
     <path android:fillColor="#FF000000" android:pathData="M19.43,12.98c0.04,-0.32 0.07,-0.64 0.07,-0.98s-0.03,-0.66 -0.07,-0.98l2.11,-1.65c0.19,-0.15 0.24,-0.42 0.12,-0.64l-2,-3.46c-0.12,-0.22 -0.39,-0.3 -0.61,-0.22l-2.49,1c-0.52,-0.4 -1.08,-0.73 -1.69,-0.98l-0.38,-2.65C14.46,2.18 14.25,2 14,2h-4c-0.25,0 -0.46,0.18 -0.49,0.42l-0.38,2.65c-0.61,0.25 -1.17,0.59 -1.69,0.98l-2.49,-1c-0.23,-0.09 -0.49,0 -0.61,0.22l-2,3.46c-0.13,0.22 -0.07,0.49 0.12,0.64l2.11,1.65c-0.04,0.32 -0.07,0.65 -0.07,0.98s0.03,0.66 0.07,0.98l-2.11,1.65c-0.19,0.15 -0.24,0.42 -0.12,0.64l2,3.46c0.12,0.22 0.39,0.3 0.61,0.22l2.49,-1c0.52,0.4 1.08,0.73 1.69,0.98l0.38,2.65c0.03,0.24 0.24,0.42 0.49,0.42h4c0.25,0 0.46,-0.18 0.49,-0.42l0.38,-2.65c0.61,-0.25 1.17,-0.59 1.69,-0.98l2.49,1c0.23,0.09 0.49,0 0.61,-0.22l2,-3.46c0.12,-0.22 0.07,-0.49 -0.12,-0.64l-2.11,-1.65zM12,15.5c-1.93,0 -3.5,-1.57 -3.5,-3.5s1.57,-3.5 3.5,-3.5 3.5,1.57 3.5,3.5 -1.57,3.5 -3.5,3.5z"/>
 </vector>
diff --git a/camera/MultiCameraApplication/res/drawable/ic_settings_normal.png b/camera/MultiCameraApplication/res/drawable/ic_settings_normal.png
new file mode 100644
index 0000000000000000000000000000000000000000..61f70b49f80228773b7170aeff37ce52c44385aa
GIT binary patch
literal 1074
zcmV-21kL-2P)<h;3K|Lk000e1NJLTq0015U0015c1^@s6J20-I000B|Nkl<Zcmds4
z1CV4%5dCN0+TO8kPxsok?U`_lZ5weD=GnG6wr!jL^0nf(yU({7k<k@}_kLx)%F1T`
z7iMg1EcVCApMaw+?*CiN($bQ#u&`L}=;ZXk!^0zsJR6QS`Y?t$f4Q+N%kX%-fV7N^
zsqcUKnf>vXUj>df`gnZ4Kj!?UW@TlCpJz{<I`wIJbqzZ>I>ru+j0zlW^qo3&`curY
zwzmG$d{2-+vUSTAX61?%Pth43e&Fld+}_>8_6-e7Ir<*>_%s_E868@&eECzGH*aRJ
zmi$Rgh;W9Cj?UJnJv=;bA3J{h!vhBn7TDO>T->p9XL?X@NY^*t{{SL|jxo%^Tw7b)
ziw6!KEC7b5r{^sl9i69vt<-kz+{w_Q{Q-eNeT5~Z?B`#7&1U81&c6D_8}n^l-3YBx
zVvJ!9=4R6xtSu}pWdnkO`hW>+#pg(h)YH>jb>ig7k02TViM@Y#M2-l3%KEu$fBf|~
zmM}ji?A73qG76_awazZice3;Hrh5m6RPGGpt({$Pv{gm|<2iZx(=IM9cfr9GAHvJ5
zS+jc8m8(~Ot{{cttCfNLQdmSldDDSG!A<1NXroUVF|aCXYS_zHuKcuW<;s=Vq!jVS
zjT^V#y?3vsrM*KTF-YJ2;Dh;d=g)sbUwzuh$jE|}Zb3k2sPEf%KlpH788I+{y@@#N
z?CcncIXO8oix(|=oX_WnCnhIPG`6-$kt38p7Z$Q0rK@5X5fLF-8x<MJY~HlV2;|r~
z=5k4!+S=Kql++1eg9BU=b98h>u7$W>ptFd~&dr+v0C%_4H%&V|vt!2&BowLSvTOHl
z=;SQUvX7$=U;xY2)in~>-~gALdGmOTsi`S1E+KKKAH<@shKK^_ObrbUEkGn|5DbOh
zGB7x#xsB$EqXmq(goGhrdV6~_N)3aGhyfND9NYwOkf<c?>Q+E(!X?%&)KD*kw4Fi?
zB5tVn?A<F4^-Qlep|-cTXBI75^n_4cDGJ2};XptTQfzFDWNlnroJd?3zWueRSo%(j
z#Fd<?SX}s8wbu!bD+6-u4%Z2eHuZh?-iLqSIw4#u$u3_}oj~B&In+yM-V8_kmm)O@
zq*`GD;igO%jZ!AA3<L*9pSqNpO&{mXNtyrVBcc9T%+~T*eC72w=JAwb?QetuEb+6b
zrV!A1+Jhc%JmPrFX_3Z-0G)XkWwtarx(f#m9C(Q^KA=M2rmn8;Qz!(rDt%DKpqxQj
zgYrgY>0@ks2xSt=C9D--{27BFG${5y!5oUvUtiv$giTFPmn(14$N#I#Tkc(_b6QTB
s=ROtjnVf<?6MZzkjQpYb3-j08?{&(BY0sKy=l}o!07*qoM6N<$f*5-c9RL6T

literal 0
HcmV?d00001

diff --git a/camera/MultiCameraApplication/res/drawable/ic_settings_normal_disabled.png b/camera/MultiCameraApplication/res/drawable/ic_settings_normal_disabled.png
new file mode 100644
index 0000000000000000000000000000000000000000..aff3b0318324ee85ac8fed322946d9a4158984bb
GIT binary patch
literal 827
zcmV-B1H}A^P)<h;3K|Lk000e1NJLTq0015U0015c1^@s6J20-I00095Nkl<ZcmdT{
z1#&D$43!xQ!gK+jA#?&4rZ_o5IJrVn9OmQz;p9{CXJ$5jW|+}zOS3&|_Iy3#GMT&T
zEp$uoZFfr=Ep3V6htH8-AELlz+5>SNK;T?^crl^y@c7z@Mxqosd67jwHT-1w8Ng@E
zVGTB`I_}=SO#?@F5sQA#l1#FUrG>zpes<~L|FB&>VHPoDo@R-Uu#B6~L=iBDHP}dV
zBIA=WCF5~RAer7U3fej2DCBGpi@d{<y$_*sz#42qZ?-DL8Ey~N^@0nWRR^mQ$J))J
zAF#yx41e0^_w4;Q79ZkRD+^-{Hu0}4`aXQY0WNTYyX;6IDzQP|GJ;Ir{Y|svW<Xva
zU<)7k0^kB?TyeL+D`v2FVP~rZaDfxtTAC{9g$TR-h$WeT!|EcL1b2FSlnPQVa6*AN
z`$gHaWuvwvf)hJVF91H*;{)!<xtAj+CCA)ni`T1@jLn+OAd7w+iM|Qg=TB^I2x~Qj
zuSY6<QGSp;N^<nr`%aelOB_oT=fTkFYXj#}dK`Ly29Bo`ioOo<$~g{B{qm8|c0Njy
zJmCxzYfOR2vu5zE8BUeCr&;XI&E$xk<`tKiZa)fWzLe%lb`36Yg4;AqD=Jr^)FAz4
ztfd5Ac>ZW9P17YGe8$}Tv3o5etl-R#=!S)(3c?}$stRj=**p$J;B2UU)RK%*{;y{j
z(~b0g14qsI!IjWsyLdDBszz`PA&>?yT5xefLCAFT!ewG{2(IDk!4+F@c?+&waXLx8
z=`=K-Lh+jbb_&sY(g`UW>52*n>akY<$6Id!VW%&%%NCW)n^U-_57)G0ULSx~xre>r
zA+cxO9uf;_v5t?$>W#qOg+}0gJlyMS1Ol`DWubZaV}av+Rsknf9l3Ew*)fOKrw6SM
zi=)uj-TJ&8WaIA8e3&1%IpfHU`IfP9Pfd+b#8A80gAHs~wY?oWwv*UZZ*K?At!{gZ
z0a1gzXz!ntH1wF8U!ye{BY%0iby6vCuHY{W=CHOU#uMj@7mhbEr||#)002ovPDHLk
FV1fY%fkFTP

literal 0
HcmV?d00001

diff --git a/camera/MultiCameraApplication/res/drawable/ic_stop_normal.png b/camera/MultiCameraApplication/res/drawable/ic_stop_normal.png
new file mode 100644
index 0000000000000000000000000000000000000000..299aca398af73ba3b3911769b4f7bda1ff901593
GIT binary patch
literal 1256
zcmV<E1Q+{>P)<h;3K|Lk000e1NJLTq002Ay002A)1^@s6I{evk000E9Nkl<ZcmeI(
zg^%OL7YFcn%uJ$#75si>ro=N@k{TF~%goHJxG0v&%*@On+WR+-8SU{#%Ouz)?sv34
zz6*on&67S_G(3$nY-&a`no&@6TdmMGMG3Z4ne6`%Rg$If^#-`hcZ2`C2>f6FuRcZ}
z8~E6N6{Fz<BiCXxT*=lUft%nBSPz?_7c!6q&zFS^^!op^-aqC>C3p+YGix}`C~Yzd
zOziDINnT};BlrSk8VTI&o3I5&4<%Qmtbgow_z;qgh|N!nDD4uLQ(Z%e7`cMa$4y!A
z2lRqhVZHD>SgvU-bj>K$JlvE)>G-Ak^LZX_<TDrqugZqtYq)U#6@02KS&fo4nKl;}
zz8khd2D}={!Vb6(PuE-}qclbvtDfviU9r@tRCAOz?m_aEy;rr<pXaTkiia{eDaqF0
zLf^qScy%@oKPX|Wb1PYkcgNevmIf)o*ZP%57QBGS!XJ)gYrC(E(Z0lGRCcI|$9NUK
zeh(S&0wx1LD9QCbmfP%bh|Tlc)_=hZsBw5*nZ`UQv4ToOXnf%^UBdU~uAl;A5bn_l
z<7;V;GMo=v!D|p(m1O4w6%~%;n(je;4qk)#3>~BSt}u!zT?6<PL4K5T7*N8H1vgbr
zifaq}Cdg}0zuSV%2g(_JH=ajMGNwy7nR_4*cs)uQ30-)-H(r#ZW|js9?Z!+T@Gf`_
z?j1bVI+uJkGhbJ3&D{UObKdAbzm^5(s6>suE^oqc6O5K~F@3}32F_7#!Xt3QDHHA%
zjCNlUC4VI3HGaY%(fevUhtyT=C+kKU+EP8Q6qbac%dz-UNAgoX&ZoiV5GA|`{tt9a
zc=tSYDB&pdg(%@(h$z9x^Nvc`mTlyBx&>rHlrVBJl8(u#?~3z}O85#+y6@@NYS|Da
zj9iTCTr)<t898>Y%8`ux)c`Lv34@;#!ATRodr~B9UlAic*R13ud87|s)j81)n>;ls
zDlPApCys8GdP9_O&(Y1&$$DC$>v%Yl|KE`;XV<bTR9#DxErpZKbVMnARePug5Aa(0
znogZt&f(#WAsQZDpMN|oLNfudMVZE0e9gT&*ln_~O!2&pgl9sINxW;%$MfE*OFGf;
zlX#{P*SYjucP`}&N3=q0euGcb{%Ru!C~BF-f`JB1wqHqRD#1!xYWb`I6aK`NY#x-n
zn6{;XlHCmFmb4?lO>x?C>lywSxgpk=2H<Y*;Wgw4Uh0B)6e9EVVl#{fd_nv*JjQdO
z{4EcT;4AR;+W>EQ_+ANPWkoi(C@V_N#15XIZfg16!Mz={cxCrwDv6{8Tcb-lK--qS
zhaB6M%1$~4TyIQ!wa#ty5WKD=TVYE^9ulrvI40BP__g;I$kh1rx&`irxj;1u8-3K>
z?eQtf<Y()KzDA`z0G}$!&pmi;`xIrxsMawtwJVwKk(uyY6}J!nit7k`o$pu%)irjf
z;^bPFlC8U<(uh}KgLvYg8J(X_w$Zk0&JErx01B@F=z%xf;CEQMU{e9F0BnLT|Ck$;
zG}Z<06@VOJCnIDhE}Nn!(fk)UBKUgzOCHxl5+aUd|A!^E#ijri6wPQxGyVga5<&4&
S>(>eZ0000<MNUMnLSTYz5m~_i

literal 0
HcmV?d00001

diff --git a/camera/MultiCameraApplication/res/drawable/ic_trash_disabled.png b/camera/MultiCameraApplication/res/drawable/ic_trash_disabled.png
new file mode 100644
index 0000000000000000000000000000000000000000..1f1a2151d93285fd1ecafa491e9a986e1a140435
GIT binary patch
literal 210
zcmeAS@N?(olHy`uVBq!ia0vp^3LwnE1|*BCs=fdz&H|6fVg?3oVGw3ym^DWNC@5Lt
z8c`CQpH@<ySd_}(n3A8As^FQMn4TJxnwU~qcrw)ns3_jk#WAGfR#Jil>*53v9)kpx
z(8K@#|KHg#MM}VUvFBgbN6|e!J@;3<V_2~CSjx}7i63<oO??(;Hni+8Usm>kze_`+
z^uP*cH(7&M4T0=Dn(Q{qC*BG);Bq^7fT@9jnSr~K|6PaROmm=B44$rjF6*2UngC(@
BL*4)Y

literal 0
HcmV?d00001

diff --git a/camera/MultiCameraApplication/res/drawable/ic_trash_normal.png b/camera/MultiCameraApplication/res/drawable/ic_trash_normal.png
new file mode 100644
index 0000000000000000000000000000000000000000..e0a9ff6ce28b2876ac4061f4056692a9d465bd91
GIT binary patch
literal 201
zcmeAS@N?(olHy`uVBq!ia0vp^3LwnE1|*BCs=fdz&H|6fVg?3oVGw3ym^DWNC@5Lt
z8c`CQpH@<ySd_}(n3A8As^FQMn4TJxnwU~qcrw)ns3^?S#WAGf)|-h3c^MQrSe|Mv
za@F1^6ju8?Kwrw#eDViH7PTA>h63qHHrH3ry7c*C?X}8~_!QmCvnuQ4SMsK;zxm!?
siHSwPfq{`_olr-28e@XKX9FWc;D2@JuW3fdfi^IBy85}Sb4q9e0NV&W`~Uy|

literal 0
HcmV?d00001

diff --git a/camera/MultiCameraApplication/res/drawable/photo_selector.xml b/camera/MultiCameraApplication/res/drawable/photo_selector.xml
new file mode 100644
index 0000000..80ece7d
--- /dev/null
+++ b/camera/MultiCameraApplication/res/drawable/photo_selector.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_pressed="true" >
+        <shape android:shape="oval">
+            <solid android:color="@color/settings_cling_color"/>
+            <stroke android:width="3dp"
+                android:color="@color/settings_cling_color"/>
+            <!-- Set the same value for both width and height to get a circular shape -->
+            <size android:width="@dimen/mode_selector_icon_block_width"
+                android:height="@dimen/mode_selector_item_height"/>
+        </shape>
+    </item>
+
+
+    <item >
+        <shape android:shape="oval">
+            <solid android:color="@color/indicator_background"/>
+            <stroke android:width="3dp"
+                android:color="@color/focus_debug_text"/>
+            <!-- Set the same value for both width and height to get a circular shape -->
+            <size android:width="@dimen/mode_selector_icon_block_width"
+                android:height="@dimen/mode_selector_item_height"/>
+        </shape>
+
+    </item>
+
+
+</selector>
+
diff --git a/camera/MultiCameraApplication/res/drawable/transparent_button_background.xml b/camera/MultiCameraApplication/res/drawable/transparent_button_background.xml
new file mode 100644
index 0000000..fa35789
--- /dev/null
+++ b/camera/MultiCameraApplication/res/drawable/transparent_button_background.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@android:color/holo_blue_light" android:state_pressed="true"/>
+    <item android:drawable="@android:color/holo_blue_light" android:state_pressed="true"/>
+    <item android:drawable="@android:color/transparent" android:state_selected="false"/>
+</selector>
+
+
diff --git a/camera/MultiCameraApplication/res/drawable/video_selector.xml b/camera/MultiCameraApplication/res/drawable/video_selector.xml
new file mode 100644
index 0000000..4daeb16
--- /dev/null
+++ b/camera/MultiCameraApplication/res/drawable/video_selector.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_pressed="true" >
+        <shape android:shape="oval">
+            <solid android:color="@color/video_mode_color"/>
+            <stroke android:width="3dp"
+                android:color="@color/video_mode_color"/>
+            <!-- Set the same value for both width and height to get a circular shape -->
+            <size android:width="@dimen/mode_selector_icon_block_width"
+                android:height="@dimen/mode_selector_item_height"/>
+        </shape>
+    </item>
+
+
+    <item >
+        <shape android:shape="oval">
+            <solid android:color="@color/indicator_background"/>
+            <stroke android:width="3dp"
+                android:color="@color/focus_debug_text"/>
+            <!-- Set the same value for both width and height to get a circular shape -->
+            <size android:width="@dimen/mode_selector_icon_block_width"
+                android:height="@dimen/mode_selector_item_height"/>
+        </shape>
+
+    </item>
+
+
+</selector>
+
diff --git a/camera/MultiCameraApplication/res/layout/activity_itscameraintents.xml b/camera/MultiCameraApplication/res/layout/activity_itscameraintents.xml
new file mode 100644
index 0000000..3389cdc
--- /dev/null
+++ b/camera/MultiCameraApplication/res/layout/activity_itscameraintents.xml
@@ -0,0 +1,84 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:app="http://schemas.android.com/apk/res-auto"
+        xmlns:tools="http://schemas.android.com/tools"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        app:layout_behavior="@string/appbar_scrolling_view_behavior">
+
+    <LinearLayout
+            android:id="@+id/gridview1"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:orientation="vertical">
+
+        <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="match_parent">
+
+
+            <FrameLayout
+                    android:id="@+id/control1"
+                    android:layout_weight="1"
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent">
+
+
+                <com.intel.multicamera.AutoFitTextureView
+                    android:id="@+id/textureview0"
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent" />
+
+                <TextView android:id="@+id/recording_time"
+                    style="@style/OnViewfinderLabel"
+                    android:gravity="center"
+                    android:drawableLeft="@drawable/ic_recording_indicator"
+                    android:drawablePadding="5dp"
+                    android:visibility="gone" />
+
+                <ImageView
+                    android:id="@+id/SettingView0"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="bottom|end"
+                    android:layout_margin="15dp"
+                    android:onClick="settingView"
+                    app:srcCompat="@drawable/ic_settings_normal" />
+
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent"
+                    android:gravity="bottom|center"
+                    android:orientation="horizontal">
+
+
+                    <ImageView
+                        android:id="@+id/Record0"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_gravity="bottom|end"
+                        android:layout_margin="15dp"
+                        android:background="@drawable/video_selector"
+                        app:srcCompat="@drawable/ic_capture_video" />
+
+                    <ImageView
+                        android:id="@+id/Picture0"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_gravity="bottom|end"
+                        android:layout_margin="15dp"
+                        android:background="@drawable/photo_selector"
+                        app:srcCompat="@drawable/ic_capture_camera_normal" />
+
+                </LinearLayout>
+
+            </FrameLayout>
+        </LinearLayout>
+    </LinearLayout>
+
+
+
+    <include layout="@layout/intentpreview" />
+
+</androidx.constraintlayout.widget.ConstraintLayout>
diff --git a/camera/MultiCameraApplication/res/layout/activity_main.xml b/camera/MultiCameraApplication/res/layout/activity_multiview.xml
similarity index 61%
rename from camera/MultiCameraApplication/res/layout/activity_main.xml
rename to camera/MultiCameraApplication/res/layout/activity_multiview.xml
index 33bb882..7651273 100644
--- a/camera/MultiCameraApplication/res/layout/activity_main.xml
+++ b/camera/MultiCameraApplication/res/layout/activity_multiview.xml
@@ -4,7 +4,7 @@
     xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    tools:context=".MainActivity">
+    tools:context=".MultiViewActivity">
 
     <com.google.android.material.appbar.AppBarLayout
         android:layout_width="match_parent"
@@ -12,18 +12,19 @@
         android:gravity="bottom"
         android:theme="@style/AppTheme.AppBarOverlay">
 
-        <androidx.appcompat.widget.Toolbar
-            android:id="@+id/toolbar"
-            android:layout_width="match_parent"
-            android:layout_height="?attr/actionBarSize"
-            android:background="?attr/colorPrimary"
-            app:buttonGravity="top"
-            app:popupTheme="@style/AppTheme.PopupOverlay" />
 
     </com.google.android.material.appbar.AppBarLayout>
 
 
     <include layout="@layout/content_main" />
 
+    <include layout="@layout/photopreview" />
+
+
+</androidx.coordinatorlayout.widget.CoordinatorLayout>
+
+
+
+
+
 
-</androidx.coordinatorlayout.widget.CoordinatorLayout>
\ No newline at end of file
diff --git a/camera/MultiCameraApplication/res/layout/botmleftcam.xml b/camera/MultiCameraApplication/res/layout/botmleftcam.xml
new file mode 100644
index 0000000..9f6c1f4
--- /dev/null
+++ b/camera/MultiCameraApplication/res/layout/botmleftcam.xml
@@ -0,0 +1,110 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout android:id="@+id/control3"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:layout_weight="1"
+    android:visibility="invisible"
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <com.intel.multicamera.AutoFitTextureView
+        android:id="@+id/textureview2"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" />
+
+    <com.intel.multicamera.RoundedThumbnailView
+        android:id="@+id/rounded_thumbnail_view1"
+        android:layout_width="146dp"
+        android:layout_height="198dp"
+        android:layout_gravity="end"
+        android:layout_marginRight="75dp"
+        android:visibility="invisible"
+        tools:layout_editor_absoluteX="108dp"
+        tools:layout_editor_absoluteY="38dp" />
+
+
+    <TextView android:id="@+id/recording_time1"
+        style="@style/OnViewfinderLabel"
+        android:gravity="center"
+        android:drawableLeft="@drawable/ic_recording_indicator"
+        android:drawablePadding="5dp"
+        android:visibility="gone" />
+
+    <ImageButton
+        android:id="@+id/imageView2"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="end"
+        android:layout_margin="15dp"
+        android:onClick="enterFullScreen"
+        android:background="@android:color/transparent"
+        app:srcCompat="@drawable/ic_full_screen" />
+
+    <ImageButton
+        android:id="@+id/exitFullScreen2"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="end"
+        android:layout_margin="15dp"
+        android:onClick="enterFullScreen"
+        android:visibility="invisible"
+        android:background="@android:color/transparent"
+        app:srcCompat="@drawable/ic_exitscreeen" />
+
+    <ImageButton
+        android:id="@+id/SettingView2"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="bottom|end"
+        android:layout_margin="15dp"
+        android:onClick="settingView"
+        android:background="@android:color/transparent"
+        app:srcCompat="@drawable/ic_settings_normal" />
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:gravity="bottom|center"
+        android:orientation="horizontal">
+
+        <ImageButton
+            android:id="@+id/Record2"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="bottom|end"
+            android:layout_margin="15dp"
+            android:background="@drawable/video_selector"
+            app:srcCompat="@drawable/ic_capture_video" />
+
+        <ImageButton
+            android:id="@+id/Picture2"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="bottom|end"
+            android:layout_margin="15dp"
+            android:background="@drawable/photo_selector"
+            app:srcCompat="@drawable/ic_capture_camera_normal" />
+    </LinearLayout>
+
+    <FrameLayout
+        android:id="@+id/PrefScrnSettings2"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+    </FrameLayout>
+
+    <ImageButton
+        android:id="@+id/mSettingClose2"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="right"
+        android:layout_margin="15dp"
+        android:onClick="settingClose"
+        android:visibility="invisible"
+        android:background="@android:color/transparent"
+        app:srcCompat="@drawable/ic_menu_cancel_holo_light" />
+</FrameLayout>
+
+
+
diff --git a/camera/MultiCameraApplication/res/layout/botmrightcam.xml b/camera/MultiCameraApplication/res/layout/botmrightcam.xml
new file mode 100644
index 0000000..9572d22
--- /dev/null
+++ b/camera/MultiCameraApplication/res/layout/botmrightcam.xml
@@ -0,0 +1,111 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout android:id="@+id/control4"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:layout_weight="1"
+    android:visibility="invisible"
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <com.intel.multicamera.AutoFitTextureView
+        android:id="@+id/textureview3"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" />
+
+
+    <com.intel.multicamera.RoundedThumbnailView
+        android:id="@+id/rounded_thumbnail_view2"
+        android:layout_width="146dp"
+        android:layout_height="198dp"
+        android:layout_gravity="end"
+        android:layout_marginRight="75dp"
+        android:visibility="invisible"
+        tools:layout_editor_absoluteX="108dp"
+        tools:layout_editor_absoluteY="38dp" />
+
+    <TextView android:id="@+id/recording_time2"
+        style="@style/OnViewfinderLabel"
+        android:gravity="center"
+        android:drawableLeft="@drawable/ic_recording_indicator"
+        android:drawablePadding="5dp"
+        android:visibility="gone" />
+
+    <ImageButton
+        android:id="@+id/imageView3"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="end"
+        android:layout_margin="15dp"
+        android:onClick="enterFullScreen"
+        android:background="@android:color/transparent"
+        app:srcCompat="@drawable/ic_full_screen" />
+
+    <ImageButton
+        android:id="@+id/exitFullScreen3"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="end"
+        android:layout_margin="15dp"
+        android:onClick="enterFullScreen"
+        android:visibility="invisible"
+        android:background="@android:color/transparent"
+        app:srcCompat="@drawable/ic_exitscreeen" />
+
+    <ImageButton
+        android:id="@+id/SettingView3"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="bottom|end"
+        android:layout_margin="15dp"
+        android:onClick="settingView"
+        android:background="@android:color/transparent"
+        app:srcCompat="@drawable/ic_settings_normal" />
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:gravity="bottom|center"
+        android:orientation="horizontal">
+
+
+        <ImageButton
+            android:id="@+id/Record3"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="bottom|end"
+            android:layout_margin="15dp"
+            android:background="@drawable/video_selector"
+            app:srcCompat="@drawable/ic_capture_video" />
+
+        <ImageButton
+            android:id="@+id/Picture3"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="bottom|end"
+            android:layout_margin="15dp"
+            android:background="@drawable/photo_selector"
+            app:srcCompat="@drawable/ic_capture_camera_normal" />
+    </LinearLayout>
+
+    <FrameLayout
+        android:id="@+id/PrefScrnSettings3"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+    </FrameLayout>
+
+    <ImageButton
+        android:id="@+id/mSettingClose3"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="right"
+        android:layout_margin="15dp"
+        android:onClick="settingClose"
+        android:visibility="invisible"
+        android:background="@android:color/transparent"
+        app:srcCompat="@drawable/ic_menu_cancel_holo_light" />
+</FrameLayout>
+
+
+
diff --git a/camera/MultiCameraApplication/res/layout/content_main.xml b/camera/MultiCameraApplication/res/layout/content_main.xml
index f11fad7..b4c895a 100644
--- a/camera/MultiCameraApplication/res/layout/content_main.xml
+++ b/camera/MultiCameraApplication/res/layout/content_main.xml
@@ -5,7 +5,7 @@
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     app:layout_behavior="@string/appbar_scrolling_view_behavior"
-    tools:context=".MainActivity"
+    tools:context=".MultiViewActivity"
     tools:showIn="@layout/activity_main">
 
     <LinearLayout
@@ -15,151 +15,32 @@
         android:orientation="vertical">
 
         <LinearLayout
+            android:id="@+id/TopLayout"
             android:layout_width="match_parent"
             android:layout_height="match_parent"
             android:layout_weight="1"
-            android:orientation="horizontal"
-            android:baselineAligned="false">
+            android:baselineAligned="false"
+            android:orientation="horizontal">
 
-            <FrameLayout
-                android:id="@+id/control1"
-                android:layout_weight="1"
-                android:layout_width="match_parent"
-                android:layout_height="match_parent">
+            <include layout="@layout/topleftcam" />
 
-                <com.intel.multicamera.AutoFitTextureView
-                    android:id="@+id/textureview0"
-                    android:layout_width="match_parent"
-                    android:layout_height="match_parent" />
+            <include layout="@layout/toprightcam" />
 
-                <LinearLayout
-                    android:layout_width="match_parent"
-                    android:layout_height="match_parent"
-                    android:gravity="bottom|center"
-                    android:orientation="horizontal">
-
-                    <Button
-                        android:id="@+id/Record0"
-
-                        style='"?android:attr/buttonBarButtonStyle"'
-                        android:layout_width="wrap_content"
-                        android:layout_height="wrap_content"
-                        android:text="@string/record"/>
-
-                    <Button
-                        android:id="@+id/Picture0"
-
-                        style='"?android:attr/buttonBarButtonStyle"'
-                        android:layout_width="wrap_content"
-                        android:layout_height="wrap_content"
-                        android:text="@string/picture" />
-                </LinearLayout>
-
-            </FrameLayout>
-
-            <FrameLayout
-                android:id="@+id/control2"
-                android:layout_weight="1"
-                android:layout_width="match_parent"
-                android:layout_height="match_parent">
-
-                <com.intel.multicamera.AutoFitTextureView
-                    android:id="@+id/textureview1"
-                    android:layout_width="match_parent"
-                    android:layout_height="match_parent" />
-
-                <LinearLayout
-                    android:layout_width="match_parent"
-                    android:layout_height="match_parent"
-                    android:gravity="bottom|center"
-                    android:orientation="horizontal">
-
-                    <Button
-                        android:id="@+id/Record1"
-                        style='"?android:attr/buttonBarButtonStyle"'
-                        android:layout_width="wrap_content"
-                        android:layout_height="wrap_content"
-                        android:text="@string/record" />
-
-                    <Button
-                        android:id="@+id/Picture1"
-                        style='"?android:attr/buttonBarButtonStyle"'
-                        android:layout_width="wrap_content"
-                        android:layout_height="wrap_content"
-                        android:text="@string/picture" />
-                </LinearLayout>
-
-            </FrameLayout>
 
         </LinearLayout>
-            <LinearLayout
+
+        <LinearLayout
+            android:id="@+id/BtmLayout"
             android:layout_width="match_parent"
             android:layout_height="match_parent"
             android:layout_weight="1"
-            android:orientation="horizontal"
-            android:baselineAligned="false">
-            <FrameLayout
-                android:id="@+id/control3"
-                android:layout_weight="1"
-                android:layout_width="match_parent"
-                android:layout_height="match_parent">
-                <com.intel.multicamera.AutoFitTextureView
-                    android:id="@+id/textureview2"
-                    android:layout_width="match_parent"
-                    android:layout_height="match_parent" />
-                <LinearLayout
-                    android:layout_width="match_parent"
-                    android:layout_height="match_parent"
-                    android:gravity="bottom|center"
-                    android:orientation="horizontal">
-
-                    <Button
-                        android:id="@+id/Record2"
-                        style='"?android:attr/buttonBarButtonStyle"'
-                        android:layout_width="wrap_content"
-                        android:layout_height="wrap_content"
-                        android:text="@string/record" />
-
-                    <Button
-                        android:id="@+id/Picture2"
-                        style='"?android:attr/buttonBarButtonStyle"'
-                        android:layout_width="wrap_content"
-                        android:layout_height="wrap_content"
-                        android:text="@string/picture" />
-                </LinearLayout>
-            </FrameLayout>
-
+            android:baselineAligned="false"
+            android:orientation="horizontal">
 
-            <FrameLayout
-                android:id="@+id/control4"
-                android:layout_weight="1"
-                android:layout_width="match_parent"
-                android:layout_height="match_parent">
-                <com.intel.multicamera.AutoFitTextureView
-                    android:id="@+id/textureview3"
-                    android:layout_width="match_parent"
-                    android:layout_height="match_parent" />
-                <LinearLayout
-                    android:layout_width="match_parent"
-                    android:layout_height="match_parent"
-                    android:gravity="bottom|center"
-                    android:orientation="horizontal">
+            <include layout="@layout/botmleftcam" />
 
-                    <Button
-                        android:id="@+id/Record3"
-                        style='"?android:attr/buttonBarButtonStyle"'
-                        android:layout_width="wrap_content"
-                        android:layout_height="wrap_content"
-                        android:text="@string/record" />
+            <include layout="@layout/botmrightcam" />
 
-                    <Button
-                        android:id="@+id/Picture3"
-                        style='"?android:attr/buttonBarButtonStyle"'
-                        android:layout_width="wrap_content"
-                        android:layout_height="wrap_content"
-                        android:text="@string/picture" />
-                </LinearLayout>
-            </FrameLayout>
 
         </LinearLayout>
 
diff --git a/camera/MultiCameraApplication/res/layout/intentpreview.xml b/camera/MultiCameraApplication/res/layout/intentpreview.xml
new file mode 100644
index 0000000..21d0a5f
--- /dev/null
+++ b/camera/MultiCameraApplication/res/layout/intentpreview.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/intentPreviewLayout"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:visibility="invisible">
+
+
+    <ImageView
+        android:id="@+id/IntentPreview"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:scaleType="fitCenter"
+        android:background="@android:color/black"
+        android:visibility="visible" />
+
+
+    <ImageButton
+        android:id="@+id/IntentDone"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="bottom|center"
+        android:background="@drawable/transparent_button_background"
+        android:src="@drawable/ic_confirm"
+        android:visibility="visible"/>
+
+
+
+</FrameLayout>
+
+
diff --git a/camera/MultiCameraApplication/res/layout/permissions.xml b/camera/MultiCameraApplication/res/layout/permissions.xml
index eec475b..46034e0 100644
--- a/camera/MultiCameraApplication/res/layout/permissions.xml
+++ b/camera/MultiCameraApplication/res/layout/permissions.xml
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2015 The Android Open Source Project
+<!-- Copyright (c) 2019 Intel Corporation.
 
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
diff --git a/camera/MultiCameraApplication/res/layout/photopreview.xml b/camera/MultiCameraApplication/res/layout/photopreview.xml
new file mode 100644
index 0000000..cda9dd0
--- /dev/null
+++ b/camera/MultiCameraApplication/res/layout/photopreview.xml
@@ -0,0 +1,47 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/previewLayout"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:visibility="gone">
+
+
+    <ImageView
+        android:id="@+id/preview"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:scaleType="fitCenter"
+        android:background="@android:color/black"
+        android:visibility="visible" />
+
+    <ImageButton
+        android:id="@+id/control_back"
+        style="@style/FilmstripBottomControlButton"
+        android:src="@drawable/ic_back_normal"
+        android:layout_gravity="left"
+        android:layout_marginVertical="20dp"
+        android:visibility="visible" />
+
+    <ImageButton
+        android:id="@+id/play_button"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center"
+        android:contentDescription="@string/video_control_play"
+        android:background="@drawable/transparent_button_background"
+        android:src="@drawable/ic_control_play"
+        android:visibility="visible"/>
+
+    <ImageButton
+        android:id="@+id/control_delete"
+        style="@style/FilmstripBottomControlButton"
+        android:src="@drawable/ic_trash_normal"
+        android:visibility="visible"
+        android:background="@drawable/video_selector"
+        android:layout_gravity="center|bottom"
+        android:layout_marginBottom="40dp"
+        android:contentDescription="@string/delete_button_description" />
+
+
+</FrameLayout>
+
diff --git a/camera/MultiCameraApplication/res/layout/topleftcam.xml b/camera/MultiCameraApplication/res/layout/topleftcam.xml
new file mode 100644
index 0000000..15812ad
--- /dev/null
+++ b/camera/MultiCameraApplication/res/layout/topleftcam.xml
@@ -0,0 +1,116 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout android:id="@+id/control1"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:layout_weight="1"
+    android:visibility="invisible"
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <com.intel.multicamera.AutoFitTextureView
+        android:id="@+id/textureview0"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" />
+
+
+    <com.intel.multicamera.RoundedThumbnailView
+        android:id="@+id/rounded_thumbnail_view"
+        android:layout_width="146dp"
+        android:layout_height="198dp"
+        android:layout_gravity="end"
+        android:layout_marginRight="75dp"
+        android:visibility="invisible"
+        tools:layout_editor_absoluteX="108dp"
+        tools:layout_editor_absoluteY="38dp" />
+
+    <TextView android:id="@+id/recording_time"
+        style="@style/OnViewfinderLabel"
+        android:gravity="center"
+        android:drawableLeft="@drawable/ic_recording_indicator"
+        android:drawablePadding="5dp"
+        android:visibility="gone" />
+
+    <ImageButton
+        android:id="@+id/imageView0"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="end"
+        android:layout_margin="15dp"
+        android:onClick="enterFullScreen"
+        android:background="@android:color/transparent"
+        app:srcCompat="@drawable/ic_full_screen" />
+
+    <ImageButton
+        android:id="@+id/exitFullScreen0"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="end"
+        android:layout_margin="15dp"
+        android:onClick="enterFullScreen"
+        android:background="@android:color/transparent"
+        android:visibility="invisible"
+        android:src="@drawable/ic_exitscreeen" />
+
+    <ImageButton
+        android:id="@+id/SettingView0"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="bottom|end"
+        android:layout_margin="15dp"
+        android:onClick="settingView"
+        android:background="@android:color/transparent"
+        app:srcCompat="@drawable/ic_settings_normal" />
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:gravity="bottom|center"
+        android:orientation="horizontal">
+
+
+        <ImageButton
+            android:id="@+id/Record0"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="bottom|end"
+            android:layout_margin="15dp"
+            android:background="@drawable/video_selector"
+            android:src="@drawable/ic_capture_video" />
+
+        <ImageButton
+            android:id="@+id/Picture0"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="bottom|end"
+            android:layout_margin="15dp"
+            android:background="@drawable/photo_selector"
+            android:src="@drawable/ic_capture_camera_normal"
+            android:clickable="true"/>
+
+
+    </LinearLayout>
+
+
+    <FrameLayout
+        android:id="@+id/PrefScrnSettings0"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+    </FrameLayout>
+
+    <ImageButton
+        android:id="@+id/mSettingClose0"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="right"
+        android:layout_margin="15dp"
+        android:onClick="settingClose"
+        android:visibility="invisible"
+        android:background="@android:color/transparent"
+        app:srcCompat="@drawable/ic_menu_cancel_holo_light" />
+
+
+
+</FrameLayout>
+
diff --git a/camera/MultiCameraApplication/res/layout/toprightcam.xml b/camera/MultiCameraApplication/res/layout/toprightcam.xml
new file mode 100644
index 0000000..3da8a45
--- /dev/null
+++ b/camera/MultiCameraApplication/res/layout/toprightcam.xml
@@ -0,0 +1,108 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout android:id="@+id/control2"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:layout_weight="1"
+    android:visibility="invisible"
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <com.intel.multicamera.AutoFitTextureView
+        android:id="@+id/textureview1"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" />
+
+    <com.intel.multicamera.RoundedThumbnailView
+        android:id="@+id/rounded_thumbnail_view0"
+        android:layout_width="146dp"
+        android:layout_height="198dp"
+        android:layout_gravity="end"
+        android:layout_marginRight="75dp"
+        android:visibility="invisible"
+        tools:layout_editor_absoluteX="108dp"
+        tools:layout_editor_absoluteY="38dp" />
+
+    <TextView android:id="@+id/recording_time0"
+        style="@style/OnViewfinderLabel"
+        android:gravity="center"
+        android:drawableLeft="@drawable/ic_recording_indicator"
+        android:drawablePadding="5dp"
+        android:visibility="gone" />
+
+    <ImageButton
+        android:id="@+id/imageView1"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="end"
+        android:layout_margin="15dp"
+        android:onClick="enterFullScreen"
+        android:background="@android:color/transparent"
+        app:srcCompat="@drawable/ic_full_screen" />
+
+    <ImageButton
+        android:id="@+id/exitFullScreen1"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="end"
+        android:layout_margin="15dp"
+        android:onClick="enterFullScreen"
+        android:visibility="invisible"
+        android:background="@android:color/transparent"
+        app:srcCompat="@drawable/ic_exitscreeen" />
+
+    <ImageButton
+        android:id="@+id/SettingView1"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="bottom|end"
+        android:layout_margin="15dp"
+        android:onClick="settingView"
+        android:background="@android:color/transparent"
+        app:srcCompat="@drawable/ic_settings_normal" />
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:gravity="bottom|center"
+        android:orientation="horizontal">
+
+        <ImageButton
+            android:id="@+id/Record1"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="bottom|end"
+            android:layout_margin="15dp"
+            android:background="@drawable/video_selector"
+            app:srcCompat="@drawable/ic_capture_video" />
+
+        <ImageButton
+            android:id="@+id/Picture1"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="bottom|end"
+            android:layout_margin="15dp"
+            android:background="@drawable/photo_selector"
+            android:src="@drawable/ic_capture_camera_normal" />
+    </LinearLayout>
+
+    <FrameLayout
+        android:id="@+id/PrefScrnSettings1"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+    </FrameLayout>
+
+    <ImageButton
+        android:id="@+id/mSettingClose1"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="right"
+        android:layout_margin="15dp"
+        android:onClick="settingClose"
+        android:visibility="invisible"
+        android:background="@android:color/transparent"
+        app:srcCompat="@drawable/ic_menu_cancel_holo_light" />
+
+</FrameLayout>
+
diff --git a/camera/MultiCameraApplication/res/menu/menu_main.xml b/camera/MultiCameraApplication/res/menu/menu_main.xml
deleted file mode 100644
index 453a298..0000000
--- a/camera/MultiCameraApplication/res/menu/menu_main.xml
+++ /dev/null
@@ -1,12 +0,0 @@
-<menu xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:app="http://schemas.android.com/apk/res-auto"
-    xmlns:tools="http://schemas.android.com/tools"
-    tools:context="com.intel.multicamera.MainActivity">
-
-    <item
-        android:id="@+id/action_settings"
-        android:icon="@drawable/ic_settings_black_24dp"
-        android:title="@string/action_settings"
-        app:showAsAction="ifRoom"/>
-
-</menu>
diff --git a/camera/MultiCameraApplication/res/mipmap-anydpi-v26/ic_launcher.xml b/camera/MultiCameraApplication/res/mipmap-anydpi-v26/ic_launcher.xml
index bbd3e02..c4a603d 100644
--- a/camera/MultiCameraApplication/res/mipmap-anydpi-v26/ic_launcher.xml
+++ b/camera/MultiCameraApplication/res/mipmap-anydpi-v26/ic_launcher.xml
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="utf-8"?>
 <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
     <background android:drawable="@drawable/ic_launcher_background"/>
-    <foreground android:drawable="@drawable/ic_launcher_foreground"/>
+    <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
 </adaptive-icon>
\ No newline at end of file
diff --git a/camera/MultiCameraApplication/res/mipmap-anydpi-v26/ic_launcher_round.xml b/camera/MultiCameraApplication/res/mipmap-anydpi-v26/ic_launcher_round.xml
index bbd3e02..c4a603d 100644
--- a/camera/MultiCameraApplication/res/mipmap-anydpi-v26/ic_launcher_round.xml
+++ b/camera/MultiCameraApplication/res/mipmap-anydpi-v26/ic_launcher_round.xml
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="utf-8"?>
 <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
     <background android:drawable="@drawable/ic_launcher_background"/>
-    <foreground android:drawable="@drawable/ic_launcher_foreground"/>
+    <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
 </adaptive-icon>
\ No newline at end of file
diff --git a/camera/MultiCameraApplication/res/mipmap-hdpi/ic_launcher.png b/camera/MultiCameraApplication/res/mipmap-hdpi/ic_launcher.png
index 9ab222f065819216240510b8a6f659845c14030d..f792446302316545d90c18250fc084dd9d159084 100644
GIT binary patch
delta 1414
zcmV;11$p|?3z-X$B!6H@L_t(|+U=Z4NGnMg$JJ4o<?;?P8}B-&H^_h|Pb1?RG4A5U
z<)EPBa?^tw2F4YAV_aZ-Dzh9snCFOVKrwMaV?-ku1yK)CK~Uqq;a*e!!hj<_O}Zo6
zWf%PEPIuMU_5Jd7ZRw7Si=5;nCppPU+KCY2O6AU(T%85Sjep}W-py$S=za**Z&bfi
zRZ+c{n5u5-4j)29L$Vd5TTiON>+5R*U0q#CUN^oB9vmEa3W9X|{-lP6VDR$t@`5M9
zCkkkUy6AS-XL|s-V|#jf8ft^XL*(3vqKlK06EZh97jxTZM*z7V9UWEh3W)0B{QR8E
z&(GJuS0RAh_J8*F{(vza0l_Dl0O(KnDg=<b)oN|v6%Zl_fXrs|U+`5ZpbxJA(BFaq
zZES2b@(yTbX67FmkkkO7Vk;{vq@$yQG&VMphK7cFg>%S*yeRW3039D6lluC45)u+Z
z{QUgv67r%9%5n_|6)Gw!BL4pVcEhm=WmGDaGb8Ec0e>187$AXxfeyp531xLU9iM>c
zyoaQxrwfK-6KueiWB_5fzO=MNrl+Srso~*alAD_==+?ULR?ExFV>TbUChCN`Ju4tw
zptG}+L`O%H;NV~q6clu?0s;a=gSji%{M7YO7u2b%tLvdQ>*)c}xf;pH$Z(3ohzvLe
zIU~{_)PD_id^SK^TU#V0B}K3UfRU7xMAT|E>FMbqBO@bB*vGNN#6*@ysD0FJdwW}Y
zfDj=lhaL$H?%LWK(d+f3wY8NA`#6Sk==qY9lLbYUWC0;M5c)==kz{9Q-`n-$7|u;h
zOpx8(T~b|L{W<_OH#f6N*Vfh&g+lRYe&ngEtAAr<nwpyU22@Z`z@nkNyxgGyBl1>M
zRIsx7`T2YT3JVJ(%gf8GjX_uJ=<R|s8jXfnEEb|vD)|FcRaHecH#bR4OpM@O31zKT
zE2*rk<O>km5j4ncZEd2)I4IlR-cH8H$L(srBm*ciGLlsk(+#nMKeR!(E^KlG2!p}1
zvwt%ZA0ICoP(nfivxPw<H-OU8(wI|GQBk4+VU7h`si~>_0K&Hor||8I1>}e=Nwq=f
zeJ~CZ3#hQLklBieh~TRi8yg#A3-DrlF)U$>j*i+jiIvnisI07vRW>dzPB0*p-Pze8
zrKP3(4HQE|L)j`HqDaUR2BHv)bBl|M%zqY_bFrM999H3)ni_|u8_0_?C<_~0&*m{R
z$CLxJ`tb1ZNAn{O@}dk@0JvZ7Ktqe!JbEIN$;5gk+%lN4;~a#29K$&*zyl7-INHEV
zcEQXxp3!Qx<nZv2!7>;Oq`SMD3HvyPbG^O2g2zvi24st-*w|Q7Qc}W}LHhgqNq=8o
zAKNc3E@rcLF~fpq2ZUwQ%*;%u{i=am%XX_d!)8`i7TMq5e?CC;IQzyiKC%5|^HPL5
zAtF)7XZ>Xr7g=3hB?}7+FG{G>BM&;r4^YWZn8|=-Kr$d1kPJu$Bm<HGJsqGAuK<wn
zcQve5E4LA3dmU<ac2;-<t*@`Ed4GSQ&S*3?3I=2_7!qy99+(wNF?!f5nRvvnrKROp
z_&PN;<>BZ{y`NEiXR%nO5sEMfP&^2}z$cT*G(&xS3tt`nqXCUZ13+(-O6AXHvv~$j
zci|^r7?!edTVbJZa&pqFP$+(Zk1CbQ-9<?9_4WOnZoa4bNv&4rX|>vxp?{&Fe|0+D
z$HBqDw%gL{_5a(y``O++Phs<B`w?}A5AX#(!8actpD)Dx`GTvrxA&KH`z_TERPU&M
zl(^pA`0|aHm)BSDQS^UYP)Hs$n%>Z@CpG%Dlm#DdeDQF3g5=7H<Rm9K$w?CFKemsQ
UCYN9a)&Kwi07*qoM6N<$f~+j1Q~&?~

delta 1472
zcmV;x1wZ<k3(^aaB!8JnL_t(|+U;CxQ&U$Iy+AY%XeYe#KrBq5pn?T_wlhw_ju!0r
zU^?n_C^{|3OI`wns00cGLkI~F5?(<8+uARszrjv_KxgdVxgU1Vx*&vjPc2E!l*`#O
z3&LH8eb!#NC->ysoJf)g5h6s0*ylk~k~A`+(-ctCe-a}j$$y%C;^VF@B7w>4{L<td
za;18m(?+k;mpVD*x6F+B^Fkg!9;?9?822BY<MZ}_+ka%v&E>(N4Ub1|^ugny4I1%S
z(af}?2GkP2Nn8I|wCu~W&bnS&XT~TR#}|Ecel<jD98kJEO=q9Yarv_F44qmDaCvZO
z!{d<~eeif_gMUVK-u1G`=gW%Cq=@m!lKn1?J4kX3$kE95kIF?MudK!aw&^jsAn4)p
zIkV&P(K$Dl2ZuI19=Xv6kB2sBROMMsmPzLyti<H#n*Yt&qf>^J`_Wany_s-;qLDp4
zMnwx#q{adE85b3VCb@iW;0fggC%8N~wBhl{jXrohw0}XPI`5DzQ^REJYq=R&^Ii-}
zGLAVWHEWQ|AzS?;WbC~kK&`PDlx!O5U(~Ka1G05`luUhXtI9Bo!62PsxOYj@XAm>!
z@Pno`)EbjPrXTv2wQi89r+GbQgR)$X@bM)d>ts}B^9hQ^3C4Z879uqcILR)-=T?JU
zzI<hdPJcfQaCvZO!{d<~eeif_gGN=J)pTreiqiY<Kabg<T#qyS37bn4&wJ%!mMj_&
zQ2onOQsaON&ll*@ixn<k`Qsv8{AroXgF_o0kKE{k$3q)5s`3k7`TVmW*&lbuZjfoX
zH>~*~_Mk}^Bn%P;34??|nl#8V{wR#)1l!CQdw*B$qG(_aa$$XeY^)<gb3LV8xkxG1
zmD@01{erS@T-kLj5*gR3Df4;_mj{P7k;in`FVp*ucCxenaS6vfNlhC7ZP2L3*;!2`
zOMc39bi{5@j@uc=noD8OBNxt3QZz78yYzFI@>;(oonBAMqCo<XX17s+dr+At!6Y?p
z1%DGxy2N;BRO1Un9{CKLh}s^$>v<4{P}zxunX`@C*Z4#1?oE=;mQm51=YQ}T#6(CX
zMTs}4wnp8c?{1T1&?}mRLD2@`%rR^YbzxA1K`y4}o3BVR8g_VLP=rBswIrpPcJsoZ
z8u~EkA?v+*lHN;ulTU;}*73nGZo3=_;D7GJ6N(1rAfK&<$XHgAaD&pnt|fa@J?YcU
zsysA78#JnEM@=8IIa0QxGj@aQ?!oXWHdpu{=$7+C6BG?BXjQGvlc~Hk@dlkKCxh9{
z<)I1MpixabYN}Y7CCkH3jSjK5;lRHJ34??|!XRPLK{rTT=EX!YzKNoEt0CU3ihtz}
zVUSob+wV)R2YJz6-1ZSS4&%FVC~iFqgM>lCAYqU&X#W}{J_am4NFLt@$;A+R+h&%b
zo@MQCX1TX6&Y*wV4i(QCWOVk-YJEeUp`#%j`w;7FxVvePLsnMpv|^BJYfI*&lk|19
zZHht7&4>27sW*keo;BS2r{wBa5`S(QwF6~S@4WYo<F8@g-qfqk?`-N-=XW;ss`JQg
zS2p#k^U$`rsW*yKYU!tp@7rFn8grFe_xwczw{F28b6Um8%8Y^bSC)xEvanMU<MuU<
zv1jNUn@dC<iv*Svu;#+!aoeRLJj><5p$(5mZuG(9p$!^$9cMLIJcE?c+kg63T1oNe
zs8On_(n&Eze!hYI%wZ@u+^BwhxUueqzU9tu`j+}%_04xS%<T;umhR>aJXS+SN8^U2
zi_d4aH*REiHSzhb#*NGlK9AfPEC-kGZc;QVf44HtOgm~oEvQMUEjQN~&v!2*NjW(t
z_S?qr5km<>={`rvRxMV^YB^0+YK%KhONZFmWM*b%v80xL4b*^IP}4hzB#l6X2oWOo
aMf?p+ckg0E5g-fz0000<MNUMnLSTX&Pu!3I

diff --git a/camera/MultiCameraApplication/res/mipmap-hdpi/ic_launcher_foreground.png b/camera/MultiCameraApplication/res/mipmap-hdpi/ic_launcher_foreground.png
new file mode 100644
index 0000000000000000000000000000000000000000..f83edab9bdfb3c8bf5b6e1a71b31bbe03b6f972f
GIT binary patch
literal 2621
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
B@Ld1^

literal 0
HcmV?d00001

diff --git a/camera/MultiCameraApplication/res/mipmap-hdpi/ic_launcher_round.png b/camera/MultiCameraApplication/res/mipmap-hdpi/ic_launcher_round.png
index 773247c21025ed92051e47188315390153f3dbd3..7ab9eee9d90933bab9abe98319ba009107c1c08e 100644
GIT binary patch
delta 3261
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

delta 3374
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
Eg0d5YKmY&$

diff --git a/camera/MultiCameraApplication/res/mipmap-mdpi/ic_launcher.png b/camera/MultiCameraApplication/res/mipmap-mdpi/ic_launcher.png
index 61cae0dac423c7cea25c7a5bc567cfd608a020b0..07d954ae156f1c69fa3a3ced0b817edc95c7c0ba 100644
GIT binary patch
delta 958
zcmV;v13~=a3eyLWBYy*$Nkl<Zc-rk*%S#(U9JY-uwL&lUQfLb;w3OQZ0pc<7Z9oM*
zsTT!r9(<tS+l!zV4<d#708x>MF)f}%RHB%Jf*0|SYc8dUNh*RwjlcfBAzNaa-K^5=
zjwJ&hlb!iy=KE&nm7T1tOprJbk%f_MGAwry{t%F;BlYWvCx7zqJjQFrE0ch>^O9-P
z6wmQf#^m+&^^a&YdSWJG8YZDBr3oeT>gwtX7bGqy4Z`8@SC;lb)qpZtPESvtvw@!|
z#Bqe<D95HC)^-G)$-4Y*xBErB)<gr@h>wqt-(6l_hGGVyX7@Za#0-R8F4xC+tw{~+
z?CiW}13?)LEPpO8=Ib>e<r|oroBL#lfk-4mXJ==B0qIg3I6pt9&CN|38XBUGjt**X
zZ~p^4BOUqRNoRn|(9FyXm6Vi_)oN7*@@Hpf1z#!yM@L6gRaK=aUIBRE8*Tuv{_yaS
zJRZ*tY;0^$OG}F`@e064xx~6qfBX>prv|2`rl_>ERDTSEcoY{G-%7j!luN7&^-oVv
zr^i5FU!N{vH8nLfI5<cP3k$TiwkG0%fdP@Or##w8i-F$W-jow`czBq0cX!F*a8Q4L
zKee{DiWtvG$4ZoHqN5$d4HOj>(fIhd7}rfrO=Pp#Zsg;+xw%>7g9pA;2HM)%XlrYW
z>gwt=dw&=C+uPfMFO328CVCc|m7XyU9{6f+!EghOjg4Z5wcG8w41fnd%1L3Mv$K<&
zPUo$bQ1I2>nBfMxySv3Ia~lK8%gfZ&)g^}k?5gYQ>nWE<1=y^>SKGY}H&9+)F4lM~
zpLz^{2Yy*unLNwr=;){z*J`2^Ab)jrRq&<S2Y)ImDugf`sVgfhlX8%bqcnKnOJxA4
zuCAt~r6sY(_w@8oeSJOE*49!(LxXrmI`YAj?kEv|9>Ol`a=FAfce~vpMz14X&qPm~
z0j+VXwnJmsXq|hKVQg$HJqCO}pE#>eOiZK=s2}Z^`c>lIe^$vD$Qbw!4BX$3yL)?k
zAAe+h1M~CqpS28#OM{h_m6sP67XcKK<${B?Q7{-h85tRQ3yu8WJ6r3D>513tb+8GP
zBN#C&C~f1b_QAn{leOjOxg)a_78d63@9%%}`~AUCDD;cnhY=eIrOiMf5cGIF-wO%~
zFnla}Zz^*bZ}<#j<v$;GK24eev~A-6EjKB9KhXpqgCFzHT*fn#kqa$%x_HNA;j#C~
gOsG!SOpqk}22_Vx<#~*03jhEB07*qoM6N<$g3z7Iy8r+H

delta 1360
zcmV-W1+V(k2jU8lBYy=cNkl<Zc-rk*TTdHD6kZzxz67wr*a3Vg7n_TLrqEQRN=g)}
zs7-_vrAjIkB?LvFMr~8dHDF`bcx`;aHy{oPNm`|9AM#MC{Z&<4WAoSt>vU%9b$0Cq
zOfbb%Ug^`$`Fv*Pe7kdIXFL>Dx{CRFbE}M^X~~HK$8hM2rhml*#c~}g9<HN%p^oy*
z8z{!A$7l>NdbZ4>7ICsHPL}4geH-)SWPub&-#7-L*!B&crsbNjGfFY@e^AcZ7z<6%
z5#!nzs<q`<xod&PRd^O-O2lXT3e^|ls{Hnt%xg>8I0n~z6vuS1i1d%@!17kdQ$MJK
z4jw*yxt_!IJbw>DQ-tAhx^)+HKMUklUx+hD{m{JW;q$AD+bA^A-U8TUp{LapGxw(^
zv;vfK?jKZ6qB}u*)R!r<Fs{3k($z&CC->Nr`iLvXSE#-arwuxiD!)CM?i<B052EF%
zztocx4ZK*hp1y?KAKf=mD>L!50Ne<$z;A_XV;DD9L4WF5<Z*JZ4fN~o9ABaOLYx-$
zjfQ5*CNUrZ^i<-^*qtt3tbzi@@0n4>ouU*lI%3IBK(W4oyI*!6D4^==aWhKdc>jwC
zv~7BmrYAmNarKuMz_l?3UvH6w<#N3!u|IkJG{;w{z7TiehfTo!<1!mVTga8rKe*fd
z|9=A|0e>X{M^55<W~JXA?|BvkeS}Hs(N~qlAWBTd=xw0dnt^ID5J=6fAZ|5gY>cwj
z_n^|$!s9UH?QNN|c%Too%mNJlv<2Kg^kD`**bbA4f!J&eembGeH;E<8TwE7%0sg|`
zr^})@vI=EJ9U!kGLnIbM#mEgbV}&y9OX+ElUVj?`gLetehMXym#9#%Pb1tDe@(@~c
z0M(!=hya2cpS>MIOOrsIvjEk2mb{tc$${e%zy>c8k@ioO08<e4)8G4+JF0+6Bmk}N
z<9HU4d#p*h*9t7&54%9zpe>kyvd^!8Y@naV;r5N5C1^y+O!_4;*g(O|CsYseoP}!8
zEPsS&fu^uCiP!opE=Jd&ys4pJ0;KA?91geN8)BeqYc16;8-wo<v(SGwgoJRaa-byO
zqy;Fe3ol^5{lL)kFjVRq3nrlc=5?sOG{EC<`yXw1k7++}8omRiFL6<?g@R6?3{8az
z9<4^H+r#|*fbBb=t`36MwRlXM`k%L<`G4UU)L1&9y2DJMM&+8$_Kc08M7Ema!$Q;D
zl__g4Ujmbl&fU~+df>vVjnbyRB%mbVo%aK1Ieo@wi?^eO>jQMMKIi}zAOH9SxHd)~
zN;bUd=5odjH=IKo^K4(C`a)dS7XGKto3hg}sJ*uQmeW{()cts;1<eLZpFOGc+kb(@
z`Iqa!wK4Gd0DfXzt|9CM3))X)`wG<;;!IH=d9%bOF)V}9y^yFK&*#tGiII+C9YTux
zw|e##z#bahxv8U^vws)W0f!3-SelI0d~v-cCE&7Tzau6oH8t@@6QBWC#Olc%p#yF6
z*fI+v8fsFscja<&-xBE2o5}VSs(&xUY0(f=;r`jaS7t!;&DgIfHd#JrWM!1WV5yt_
z>Nk<~+Z~a8a#v*gK7sG1kaL&V92nQ=U8!S+$0=53clG||9ABaOLY&5J+f^}-NuMI?
zqaD%1(cdYZu7|{y=Sigup;^*p9;!UwH(c45g6bl^_wrDMewSx)@-(0At4SKjhwB@z
zLYy4)s0~S{`BNOr!B0P1gvC;UN(zMP6NZAs@=gcuI9Vnp%1;z~CT!^{j_Y6iwj(;p
S$g=bR0000<MNUMnLSTY6I;;o)

diff --git a/camera/MultiCameraApplication/res/mipmap-mdpi/ic_launcher_foreground.png b/camera/MultiCameraApplication/res/mipmap-mdpi/ic_launcher_foreground.png
new file mode 100644
index 0000000000000000000000000000000000000000..06a205b0d6afef683cbaffa6603533699ed70df2
GIT binary patch
literal 1705
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

literal 0
HcmV?d00001

diff --git a/camera/MultiCameraApplication/res/mipmap-mdpi/ic_launcher_round.png b/camera/MultiCameraApplication/res/mipmap-mdpi/ic_launcher_round.png
index e66671ee6bfaa7cc279af45630c78ba77f29fdb0..eb55f9bb13b8fa46b417b4ee591c64dddb65195e 100644
GIT binary patch
delta 2005
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

delta 2122
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
AfB*mh

diff --git a/camera/MultiCameraApplication/res/mipmap-xhdpi/ic_launcher.png b/camera/MultiCameraApplication/res/mipmap-xhdpi/ic_launcher.png
index a95c2e16f348ba6e6c722fa582ffaefd1353add2..63a406a10fe9b1afea468a5299aa0fcba5fc46ca 100644
GIT binary patch
delta 2051
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

delta 2782
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

diff --git a/camera/MultiCameraApplication/res/mipmap-xhdpi/ic_launcher_foreground.png b/camera/MultiCameraApplication/res/mipmap-xhdpi/ic_launcher_foreground.png
new file mode 100644
index 0000000000000000000000000000000000000000..9ccf2b9db9a691726db84cc1a54546cc76e35e62
GIT binary patch
literal 4220
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
HK+*pL8^;ls

literal 0
HcmV?d00001

diff --git a/camera/MultiCameraApplication/res/mipmap-xhdpi/ic_launcher_round.png b/camera/MultiCameraApplication/res/mipmap-xhdpi/ic_launcher_round.png
index dca13f8d241f16c0a5047a0523903090b162bcb6..9fdaecb9da510be4a5acfd452a957c91f57845bf 100644
GIT binary patch
literal 4688
zcmV-W60hxvP)<h;3K|Lk000e1NJLTq003YB003YJ1^@s6;+S_h000sfNkl<Zc-rk<
z30PKD8jc?!0XLXbLQMsg3~?DXbJTg-TnqPdv_`Eot7jUMF@44@GSe(Ab=1&M$x*=t
z#U*k>$x1-P6$(Q(Q3PBdH7m9|-+THFbNS(iANcQOz0dPK|90<L-tV0ETh6)nf8c@o
zqy8xCP!z?A#K2-*hRE}*>XEBB-~g}zi*+T+u~wC1s7JQ+5e~3yN&}pJvnOdm(w4-X
z#Dm41zr%0#WhlgkU+ZUxYJ^%DeQ!(BnPfD{JQ9DBP?C!zsU){a?vdPQxyRpK;d4Uy
znt5CX%Cap%>6MycH5vF~9jDJOB;!bYNzRhoB~c0r3JN7ZKi_OoU&m#g;j&SOOGyKv
zu8eqV)#t_}V@S4<q^ki}ftg2=tCBnx<0H?+xy6*ib#3Fi8=GohZ3f<z#E0Zk381S1
zE-25aHz5T^3Nlv4C2osrty6^LS=DDZlK+roN#Gfv918+&u0nETeXNKqZkwACRa(_p
zo>#qhBw0j~tpZ-sg&v@nri?<WVnt+gTOCX4OHCQ|Hmc8mBS}yJUyPfpiO2yV6@fO7
zSM|fD+Rp|Vsq*`lB!Md6CCw<+TqHdye4r04Rkp!UZ4IsJ{V?{|Wv6m$0Px15o(+gE
zhLzOUYRC7~==nyYzMuwzueK36(qqca&0RoUw5nEiK{f=Vf*QM7f}fX{ms^8@FCwxp
z=vPio&VP>|Ki;5PC_x%q1T)mQLrgjOHH7OcVjJ>V35OFB5}K+psLGMwj2ace;OEwG
z$}!7rg%W=M{rAY!)KsS`nF+GO8#iuX<c9<N+C(|#P!g1I|Ni|5qN8TIDnaFDT2mtq
z)-~{r?ZVx=cMq>yx6Vcv??~+fQ{`W3Njua*bWXW^`Lc5K=uu_+_U%ewV4zvDW5*70
z4e_)n17&GJM|9+(?5wP;Eh_KGp!w)0cWj=@;94Af;#VasEKGU#-FKD2g9j_mJo8M2
z1lP`*HA|F*GBr{{J{e`@`t|ERn$7}g?FsxLDnH-i-p<cI|EzrS$tQ}Jmsf>>Hx`t&
zY}qnVwiezI+XE#rF>$yio{=;#_wL<mNtIpE%FhQ~tX{p^V!#{A+O=y%9U9PO9xx#)
zN{xt!Xl+rW%*i$In-$d)prz5>y?eJZXwV?d6o9h#?AfDP>VghX(JsQupu){Eqn|i*
zoGQ0tao*3!$WUH=^;ONlmx4MnGcz@@2f*i-Uw%<8UAi>UBC|jml-sv&H>D{S&(xEr
zg~zjR-#%sN(4m?u0Cnu&zh4v2NK(<QTelLZj)y93l=)&S8vP5IdMpk;Jc!e$Pb;HG
zkJcP~DPzWrQKF-xMctO}4=Et;x8Ht)`}{GmtFQv(h1uEJu2kr49{nc0o?n0cRY^)p
zQo_T-mG8g*zD)V<yYH0H&`{;mPd`;&eDOuyz?U*^+&Ja4&ps1vKwHddGx~-;qOYaQ
z0<n-lvmoo6Z@%da3}y1JBHV99qhv){qaVg+<Hn83s8OSI2U2fAAN~FP%c3wj3w(JN
zG^mi_C5zsUM*hvRMn6W!uwlb$J@``4SImaeW&tp}dGqEivIUO<OQKnua&tdTwfU-u
z*JOoXeDQ_y?6c3-83mxP8#Zhx)fNCY1ZT0av5U)P3uG>Xc&iZ=6kC?(gQ=)x@MP@A
zPn<YWnLmHNvSP&wW!<`ULhv5n;WsVg2;-oxERP7UX=!P3K0ZE9X6K0{_usj5XQVlP
zzt##sK4;35DT<$;pYr36Kf<^v6p@SE4r~tu@8N&rH=KhRiEAp8N3wtdL|i~PDv^<q
z6U?#&s_4x?^s~jBl!I0Zz%(B_cC5&3UcGu%)C2DW0o#caCq#A>N`c@#zQb=g2j}7%
zd=HmX3wkU|0Wvy<tNYVWKkXz;t;>v#<rE>_a;A%~mSudkQoz801C{sQdrwJ8NfG6f
zF;jwrgOwRGW++333@J6p^7i&t_U_#)W&^HGPEJ-9ELb4Q)LQ}4B~4FHPy77y&)Wf8
z8c^0{Wjw8@@ng+RJ6Ku)ppEtG*9!n)#10=mti18Y8>IqoEI9YgH{Vo_962J&Kv}RA
zmZT&z6;Mb+6l+WZwluhH%kq8<#HVY_8U2=401PMsGx*TRT0#+(Nl(CCggro6D0BJp
z<rXv2W>S#wAYr2j_>G*Tvo4i>diLyTL%bDL6$<$1qmP6!1?7<EV6oBq{`>D28t)}b
zmguSgi6K$pSr-=<dy_OIy`Q+aICr`rOMS5(3V7|c*92c<q+&tFl5~Nxupoo7kxH;c
z*0nqe01ahkW@c~Qy0tqnE-@&R3Lw9Al#2g#Q2+o62?-G{C3ss4uLWgdofvf-IB=lS
zR8$@c0-jin3k?nZyGeIc^8fAIxBsnLZY<D40Wh+1bWWNyNi*Ml^5n^4mcdn>Hf@?-
z3Mi0Kaa2^)q7v<Z%0F#D7JEZ^^8S@o0Nlf%pdeAs=FOWmO=+O)EnBvTx_0f_RVmlB
z910LAY8c`R7cOiijBSd=1F8_&mW<$GJryuv!UO~=SWneuMGUqkJ3AYzR-$e_6oBj~
za3cE}Mi|={OH1$vs~28)p%GERIdv{WYX!`lIaB!RCr_SKh7TXExdKo}L_~z}wh*-G
zp#X^`(O*p8zI~AwvMS;U$?PZj%q__UP1I8XD_5=*Wne><9vM~84pJ1T6ALnWDFB8z
zH8nM5`t<3K6w8iE1?<_g$BoWSH`fKVgaW|-$d|xP)GM8gfDCo++__UP1qe^*`t|FX
zAAa~@7gGu_kPFzEPR`O(0dPCv0U=+bmjV#v!6+U&bVyePWMpJy6IOpN<_Sp!eEs#;
zUFm{5dMe=9v1393bLY<0O#xUtK%G#&o(iB~>@H!|$CLuB_wV1|O>YHYI|@eQ;>C+~
zQvgyPs1sRJy%n%()v6~rHC<c*<QseFO+i@NLv)I~zFrDIooIJu>Z~XQEnT{_mq`Vz
zU%$Q+fuXArM&2I^K-yW4jakT$f_h+tK}C8hAT2E|bN1}n-ApQA)~s2ri5rvjbVCss
zVfE_Dl`G2l@#8gD0D>=a2ZdB7@T-U$nv|53La|l{U|nRd5C>ug4-XF~3Q%+n#GZft
zdF9)0zZJ9KgAYE?Tmj?;in_3b`P_5Q=@tp&H9kH*rd_*s&cNC@5EJXbBuywxKcZ(U
zLgwpH&Y3f3G>wKwj2NMuJ$qKv1?tl&8CRH!xNzYDQW1!R4de<JNkv%E7nl-_$WUz3
zTLG8_F)=YBC86aGi#2Q3h&nD_yeR6_X+5AY85a=|5l9#}2G+$E=XsI9o~FqH)njCI
zNk=0Ev2fu+ku%3?820yQk%~syr~@;uvT2WUC;;i`0<6YSoP`a$_9ZUJ@RtpVkH@PX
zo}}A~7;-d75rdy&V`BwimID8kS6)$m_~8dpHnzD~VuwU|7i5s_-Lz@bRA5YPur;+J
zX1j9b%AVBFTY4`^LdZi9kuiWGz7z{Jl^LnH7P})*7Rp4~s6+2HVJLt+y{s8CW()wv
zrj{hZN%*1pojZ4;szL!$3Fpq86M(@rg|A+b<wIP9{1VDQSunoX=%w?<tU?UQ?wluV
zTLI%D23UPinEW8UIHshetgDJ$5mH8u94YP>L(U!nQ)FbMGH1>lvpgi6gS-;1!L=v@
z8CQ5fRj@M-1~?x}prN6mSPgSzj7vU3LPGFkqoYTUPEy%{f~we>2rmUbdtzduSi{BU
zCU{EVaE$D!Q>O}J4SD_b*Tr}E4d>uoB-?PKHp-~1$5YvjS-dgqAHbIEKtq!X;NZaS
zrI%iMjNG*==FpJVn{#m|3*1L6TY^f|H-*5nfEa&|<wmp#*H+c$Ts8kw+pi5CJQ!(c
zJ9hU?A47)@#Vlx%oSYn>ekMXyZcm3XMGgl>8OlK32+N8H+#q<5+&+H8IXGAA)ipDA
zM}vNHF?-4Q2NR|(8Qani(hyvvX2HS16IHk2l)60~jnVrC3D62|7lI(Ap!W?TzP`R@
z(a((=H*o*LTfnqb{x_l_`!;RbxDj{7nv)m8&SkxBjHnKRzG5B2ocz!E^XD%;{P4rL
zS<k*q`jH12HEf+|aq85mB|HmC-K2#e<DGZjvG^A7>L}<Vw#j2_OBtg-ALs1cxpNh;
zWK7LFn1-5=hw(Uh6zS%;q(~`m+qO-F`ABqO-L<v}(k194`f8@}%_O(@ufX!{x8HuS
zJU2>;Jwo*A5*;1w%U(upd=8uzcgqXkAFeP_^OwMou`J(nBUodOFTecqUuY_2m>ZbY
zE8vgOPp<F{8vRcJ!^x8;H>}9b@>c!&^~0mxTc0>_VmShv`dMJ!=!Z=V2nbjU>=?s}
zJvD`<4s3xFc|=`OQ&Z#2i3{quh=muT?fABB+amCCGRyZbZ5Gfpf(Bdp`T4ztTYb#A
zal0;4Pg+`<vUKUve*rTBze$Bhzv^hvx^-(Tqq&h=8U!lB3Qs-g#aF#BK=;!DtQa$k
zJT=S8%gYNstaJD7-Fqh|Cns`jP)|h+KCs|5?PO0+&%VIw$tRy|WQox)4@3X{{qcte
zk1ScTWHN=<x%FOAQR+!dOw64<d-gP7#8_GU>4`R7yLN3suN`*p-u*EweO<Q)svEKK
zxSkcjhB4CQdD2$IYjzF}4%pZ7=&@tR0ugLL2ME3EAowEPfL#BsUAuyS39#W?Q8oLg
z4MT?x9h&gcnrC=;_+jMZVSwtA68?BJTtOaoSR6cf@EBpy6__wKn*YOwH5nRV4{U5~
zx<^Gtovcerkl<tXhlYkm5(Yhi1!JPiKWm7)DSPzj(VSk}+1uOqjEIN`mvmH{Z31(C
zKHu|u%FfR2abUn$G|-ZIN>YL}%I!&dgoTA2k%k!!)#!oQRpx4{9>%A9_0?CP9c(ji
zuQIy2|HBe0wC&QR3;tmU|3cR-BqU@9p4lUxs$LtEApLy4#|!y=7+gGZz?J)MTNU6J
zQ34sC<~$QT{r&xyQLvVSEg>8+*T~r*M?Kp%JOMGs*Vh-WrYHK!eXdgQi_lT4R;~Wj
zv}sc)!DG&xIa4SqOaxcf#Mz)8_2@%nWMq=Jw>N?;5A+dztt#3nRSAxcj!oOqLGL?v
z>eQ+KfddDEuU)&Q@N5vN!s@ID9`$+LR&f(YP*BjmjvYH<RjV`l){Kto2EJMeaKjwj
z+}zsGYe)FUixw^NK7IOh9Cjx2|8eEBkuIoCt|ilrFtlhZjrvPIK0Y(q$M48}a^OBz
z>%TNaAkwgX`}Qqcv}l2UCVkAw$?1vBn>VkHiHS*vr^NqGSHSu6DzOog<Ix7RMf{6r
zb~g5Krf=N1aV^@6wxbW|3;Lu-kY!Oy!p#V-uC9;pZ15Z~V8GzOz`#wUi0c?-SZn5g
z<H%)tD$r6H40-|6OfI|3!nH)30s;d3`}ONLlnrf1ZhPbEN;&3IQbT8F=jLtOwuOOq
z$CU2Vr_Uf7Wh-f#$HGQ%BrTPZ&z_TfEnwiv3$(&CS6G&$82OxkxRq$bh7B85_3qt!
z2-A%_+KM*wsJE_(;1`RW!JjmpTas~hWkq;W82|XZdGn?R2M6ytfBt+50KuY$oEh=}
zaO~3N86DD|{QnC&2j{B6mLnaCMw~)*C8JK%O>OAIBi<ctLmQdv8`N~*OR^1^$`0UE
z_Le|R9t1)+cX#)v=Fgw+O@YpqlP6C`V^=|Xdb(KP#%RSoR=o10m^yfkLU>)c7Yv-9
znVFd%A0M9?9v&WzvQY=>LY=4^Z9rR?=N-6>h6if#Ar)Z{f10E<`POn)bOA6Vy$1~%
z<VEqsbU#18<$L$;-F}>osHmv3#MPJM;^M9)BqU^{q@>)0;5{kq8h*n$VPRp%_wCyk
zNYt`??%cWmL|G`4LC4cd+)*d$W}n`^E&y-JMu>Y7z_~Db*prHd4dmAutggtqBI^jc
zpx^)6t5>gqPe1*%7ab!Yc#rSsw*feZ&+X2f-i6ERfU;2s^Lrz%+q$+<O+^%8V9o^~
z4m3I)aYHkFZ_oqJ5I3eQcLo&FStXD1Z#c&d*Wg+%!x?2V#XQJ$8R|Ol<|qWY7CQik
zC>uKsTwGipVjJSD7JP@_a1PF8u<f{vdcZ5G5UCUcQ-(EzsuuaZK?QcT2mF8XBa}VM
SH8WfQ0000<MNUMnLSTZUbJwN-

literal 5250
zcmV-|6n*Q7P)<h;3K|Lk000e1NJLTq003YB003YJ1^@s6;+S_h000z8Nkl<Zc-rk<
zc~n$an!mLdP*4TR5+#U$vMUKjP238j!6n)%Dr!^|ktiZ4OBGbH6chy%n+uD83hrBy
zPNp-N(_>Dz{nvE&^yx{@>CQRH>FIPQnM~X1#hmFr^G9mAbHDrEg92)KC>1HGcg`0~
zz3<)k?(cW+_kH(!_uhw)|L`9k4~zuJU=UKdw@c(!I6aI7e&8PWU_ca80Z<?JU<eVj
zBJ>06u7v|w1BDW|fEx^fsJ<csHI>gpMol7W)TUB_f5UHZ4s_fR!rcSzIpYtmg^mZq
zV3119HObQE>K)?N>YDH_<CTO9?LU&4^}iOk=)RP+=>A6JA4L9-m4C3meL>{ciuT$c
zC12>c64<7%fij>hDAS2qd$JzptB3l5LA>kUy)hL}>^9Gd?`_K^(x1@R_EAD#``^i5
zoX~5=ONYAg>vx9nLiYbX$)dq7yzSmqoYLRP{6@<%{|A%}_keqiZ3y>7>IV<RGo!^j
zwm7pUSlXh`k(#S-Nm_LerL8(FZQ-Pv6YKo$R*U+2za^kmZ-M`3#Wqg3-z~E{8!Xwk
zE?JcAbykORM#`r5BKL%Q!!tM%@oe^paloe!ory~u=rkac_ERDlHF2T=v9e+#Vu#<N
z&zbP5s~51Sxr)<qD+GA_>Wx7hXx3x444Xr_tR8z$@(glwjbYu*p*WWf#mB?P(XMT*
zj7QB?-5Hn8JxV2Jf(0D_`qmNf@$!TOj2DiOZ@K%)TlIL|&5MszorZ4ujHA9t?7Pm|
z5%`v>P-LoVBCYKkXz>{r&*Id9PH2r5SD<^5fbnEl<gGd@=&L&FG4qV%S>c(T)x{@T
zJ%oDPVbbm)^1D$}qp=VItb_nwV0xJV%=7>qUUy^AN(iuwm?wDVrmDRo^?*7}``*Bf
zR4MSfNYt#k;{ZHoX1E?Otq2(D0i)&#(`To3AaxlHo2Ti3&M~ZPuHHl*{!0dYT1ksz
zg{L_I<DMCMgXRlbCr2ke-QxODlcT8}*Xk$Ocpo9aAwb~jQ&~r9D40;^Y2j?42Q+D}
zjeu_)+v<Ik07i@sy`i!4Ix?tfoz+j>IkV1o#pTPvk!Otm%9<P-XX~FC0vKWIrNx3K
z&Hc>QR;42bPp##v&KOi{Zw&ry?)hdcZmzNru@k}WWXa|8c=6yF>`9N4*zOj*=6XMt
z5uo_!&+0Vb*KS?HA%qA%`iiz%sz1A{!ILi3%>tw8S1xz|JlbFgdn#cnXa81QHV0>2
zAN*<Q{U6}1_pVx2U%P<$NdEh8;e-El7xUHM@%D9m;)m~H_4NT>`WtRv#;5MTkJsP4
z$V>lKq6hjLZx8X(UvsU`a{OPuk9Xd=`m+qfDb;uD6S!!H{GD~C;fK!=^8nyO;tN_3
z9|0i2r0~^WM0(5SyTh26IbQm4J!V4MHT*p3m3;KU#DRW%ubG#A#F<7y@<mG~>B(Vc
z{e4u(nxSzCM(@P=BWVTgRj~Pz=4uNu4|V{DuTA$+A21?9Qt#!%z4rM%trp^-F{(Lr
zgNu&5J5J!@-=@kM&fyXQ>|mc~8UZg4_hLc-2~)K;5*cBnD>is{jKFz&W90^iI3EbW
zGnfF(MMlU_j#1h1t=@@@I4`d&jU+ex!ZFVG69B(eS}7*ArC*|gH=?IDGJ*sYlY|lw
z&~MY$?=Z;n6Tl7Dw8S3}Q&d&_Ho;2hfZG(c{)Wn2hun_cPrx_=029E+P)1Bq!NIBN
z1)M|CYL%q$-?I4-tK-A?32;2enj(Ga@6g`8v!C24GZza`Lq#Lg`p1IrC!lrWd6ULU
z@WQCPu#IB(*aUDF8cxR%@c+g-UYnl)4+H>4&{%6qAEBZH$qa^S@#ETl;&?01x@!F{
z38*`T(aFOY9Xse$7V67zT=glJ=f_J#c@fU2*J9D}JYM=iB?WkCqYlf9^CzA!B4y}K
zdXE6w3o4mjP*K=VF`TR~;PM(tXAH6F7tj6$QUPfLT{ieTUS7O(j^=hCy^z-1hE+Q@
zV?jtTMiL1Tu~QL}b3!-g$BO{;rIXPYyVsY=aL}4paAG@?=6LDyd0g<p+jzy5KJ2WH
z<7F}F!TaC4Lvv2f&U09$oHhM5wzx0}u*{sy*npihB}nWw*CrEFk<{N|OYZN$&Ln-X
zize1qUhTtiC52clmtz{dPID28#dyw^4YUqm5)Z$B4=)?)#;)o~rLPSqHdN6GUwhuY
z1v4pJ>kf3<l1LAUYtS?Umb-Z8iMU)w(JlosJ0ClXd|aBK7t(wJ{1KTIicw<)KNCds
zP|ik-7A1Q&K_d|n`CC==3CeysjDMbpwf$0~W}CCP-z@=&@xDbsu!4+UPkAPwp&X;_
z8;I$Wk~+rmC4d<h)Sbqt_`p7XzF>6pCX_Z+-SG5kaUub6&mI9Vy4^uqeo!ED4Q~S2
z(J>_IP9J@XTq~k$7Tk`G*)9@msEm@e=>FSP=s9BuXkg6_IBxEmNfE$?q}9d$quR4A
zmT|D|#s!S07R>K3?v%CaJ({0qngGu11dIzRCPRRO8B(1-lE;{#T~bejFJZ!2Q?IN=
z@3Hki(*)#f!YD9c;x&^ZfSMs2IPfrS@eobYxf~gD9y$|A61rP|F=GjUmJi?y1<tRT
zGyx2TVfE!7p*eE`U7H~``jKglCnof?Jt96}<`H17Wz3GVmj5IK5dB$A+Hb-S?aH8L
zsL<J<j0->YCEFMDwPQ*^)65}YEg8v&?A<=m=07O`O$-6EiA9-p;>ZEl;V5hWrFCW1
z3wqmt02`mF<Ie&CG7{}AEI2?@9v-imJOSW{ZL`~Iab(4@Cg*-&H2xQdwdgKGZX~9=
z#X9F~6ZRxA=bP!g9msviQWAZN08vOVj%?QBpxxiYB1I6dYoLyE&zbP+cZc!v;U3Hf
zqdDhH))Zn@5^5`Nk}@O{-<FLIk);Xen(uGEGlbPw`>l|i@+7OT_0vgHo9_(c(8a!$
zijWclQV#9Il7Il-*FYU1?^XE0J2;0lJU$q$7`|Z5zIh2RX>0rmDI;)VT7vl>0ZL6(
zknZ@aM8Z};tIjGiRbfv8_A~3o0Dg`zE%3Eegg}4=Qt70wfjYu8MF197VDiC8WYStA
z&otsW2F-6!baWWSdQ2q5z4_X@HBxHQe#ZEKYAc`IxKI0l$C1hV0GgN!2Lg;$pQDv4
zV<x^S;|R#x7Eb_uNC{}x+57}d5dkC=r39F&zebzYX|4zmqJmslo&LyAfOiO(+pPNr
zZCU%`#7KxE;9$-oX-oD0`U&t-4`|l^9c{{5=86Cj+P{6Vp8zituu;97V(pZGy*a6V
z6XazRv|hc$H38c<EtE7@`JJ%0dO#C#!dWX9yCy)rESiL&zxRisUJ64SHJ_swQxYiF
zW9AAm12G|r4hfSQHNToM1dxFkl1jW!fQb;$)qtO?EB_4&4~n8#j~R%u?}3Sg1R1p-
zrVn(%LN{x0TP^k^p&bUgwki%rg-Hv1iU5Hk2nTN4hy`*P|NIfDBP{+~dt(sh|6o2C
z1-I8&W6w9^=WEI!6%j_UHXw&o1iUO((=MS{&}JBh&5p8fUa~@p!IP|K7r5<s>l&Vw
zk?vCj$W%(adf+ThDmaKGkQwE14b&09hy2&xcW-&bCyQ7IqHlfu)@8h;zWNR+BbZ`6
zVN*foB|)IP@<d%qe+SI3w98xdAlRJ%!|QKd!t=UYurMjXw|YQ`0?QjJu#(gx>F7aT
z>1e29pt**c-J}a0*b_eTR-IjLuCdQ0mLlpzej823Iej6+{3w^cnYWjHAK-r>GnFr7
znsqqrjhv%^F|q$rS8v3mlFhGWF6cJ@)&ELzYF|l)87dwHzq(=-VC=jHFpd~bgvXz0
z`o)YSz>6>CLp3M<lUzTSVm!tHJ02T1%E*61=QrsG{L@mVXj%#^V<n_2j~{}!VWBL>
zE{>D*q+)JKVIC#GKQU`+CT7)?Vny!OV!#$1Qp?@UOQ(Z_0L8KwQe;M0j;irbO`M9U
ziRFb~Ns^Nx4IRLS`)-be1n313Qf=|=v3uqCC+ALz03$U&7TS}J?0Jt|8_8npX>~>_
zgh(n$UhYAr5dZY_Cz_tFFTrT@t3`mRd;34u3<V;kGM-%g@tDO1{skKR7igGR%!>0r
zMG8eS#Z=96vEH1_%s^^}it}4!WB>t^w20UtG#xLBwi>!r2eyWh9?r!AnbbE%!6Ffs
ztXoa%0IMoty%)?}a8}0=F;!t%*_$|kjBwXn>&J-~+Fj^Y+hwhKo6JywC2#CF4_G1w
zQ+`J(Gg1qQTJ`eM)tAmaTzg{xuf5i9^OOrxU+Kf?dHb+brNjcMgbwYU2`r!!x;Z~V
zpNL2*<*hI9pf8lmas0;hc+G__T8HdgmvQ-r|BScXy@L7VzdYrF0IRh(2l4XGrmw?a
zNM8+DCh#&pqX(TM1f4-~s<1z#trmy0)!QHoI9_0TuuXS{=o}gDx8No%4meF(%E^4E
zvZzjjQ)(()o*yqU+7i6XsK-GiM|kPaE<1)-n(DCXRN=()r3F}FC@1w9twTgtBLyFN
zv9mgk7iD`r-DN9%@XW;XwA^}Iu&Ejc=I34o3|TBExo^Zq>ajynM%pXHQT@rkP<xUK
zwNDrRnFJ+S6hn2a{BhRG3sB;0*xEfB9o^SSV`5lr;3vQ}0Y-M@OCl?jyS0yE$6)xF
zyQZYlkTeX1D$<aq=o4q-0zU!cA|D{3DDSr<ihPk`$1C=C+Y1tdX%cD2<|0&o8awO_
z>L*~#enG71sXBpCwz`~RmXHwg_^p5R5TlR~c#Rg1iVnU*O_6EzLkNBXSknWTKm*O&
z`98&p!E8!)%@UwYy0$3_MMb@YDvy6gZwPB({RH3<Ea2~nLw`UK5ie7$Qo|Kf(fYYV
zh+<;kg9b5ZgZdECl~}l_$WH)kdMb`v(CU}pq!=++P5JJL5)>I30qHv78#!&%(=+>q
z+GZ*NvE41)LToI|*>o1LVKMT`e$oOGR0W_Q1oK*w(2+fNU;(nEMQ0<!@|m}B>rk(K
zey`aExqh^7`#Tg9z-A6z0pqnVZ3t0VSP1)SEnRTzz<p_BCC<7&XpK5+v<t|C@e$Z#
z2<FuA)rS!(?AZ+Fj*mV73HhlYa}6*305koF51r%0M_**p+F!ZSXN~P_#Dc@Se@w7g
zL@{Bo@%k4wL`u#dNF*5<hN^!nc=t9;&ay5Y>ai~y>cO4_Hapt${acuiE(k1$JNm&p
zwA=I1&th{muzrn?KJ+fohhE@G7wWitxYwHZ_I13<Q2ld)K_+0K^pf3oZi*nhii!${
zeLdg-)|rhz&FJmG^Lkos^N3x9IYRCPGLO*WJn3<=Y`BLmhy$m`M<03@B+4LL$wz--
zUpv)@&8OVy#hh=pK^<c{8t@83)xVRvFQphTSctu8dYqBKIpz68UQnIP|B!RcG%_$g
zLq5PbW-~r4$lC>GX9=zQsMGz<zpx~rb6g@K;0r_W6}rXfz|MPgLp(|X8yovN0bHC<
zN4doq?b!wn7q%RT3u5XneH!48Awj`(LFftT!rhxYNKE`K-KfaKev;7Wg9MDUdJU7`
zDSPu<;r46@HPfN4Y@MGf_+!mcaPTZ7mjel@BK7hDRD9?&x_zaS-Z1S6aBTHZhvRv_
z7p_<egRE3qN2u#lGCS@`2t`VyQo+tp$>Q+vmBb{yhqNa!?G2EoZDO*8)0O~o9lQN7
z(`z+FB*x$N15y`wtCdXarb4Re2EHQ+5QYVjc=&npcLBu5!u4y)P|=}J=<ERIdt9)m
zrY&Wl(>{F&sJ5@WHee$?z&0|I;rPK%h3i&SurdAuwoXB89jEmt4TW?Da70ifQp(`V
zq$!e+faSv7ulJzRf`<?((H=0^WoPr}ZX+hI5inxoE3I;~-VR~0(nQKHIr31Lv#}4J
z8J?Zi0qO#E`VIzJQ)`l7F+yl)4BH#h#j($43-@drPHL$7V-ln;VA2!wH4Y2Y^(*bp
z$e1z$jO=_J#>`mQkQvMB%kXlu;g3Q4cU}?Ai{8jO+6C;h2Txa%!`CFqkwOuUluB^W
ziO{8$^XI=7oww&4ac&<|A3*?MzhKJv3L~|_?1$4T?a^nO@X9NF{0V3y1Y92=1nBH+
z6vmVZWt-Uhz&`&FR+49s?cRJoEIxJvYi<(hv%)hotzP7d;7=SmgZ&I5T{%)2#}bh)
zAtOnldSxlvpYtv{dH8b*2)xwbdIl?`2iR6!?YD|rv{tsKSXqb866Nq4F)7N9I_tU{
zgSNo7n$dEg^#jo`PC1$X2e>EPn>@oZw#6rsK~)@mM#k2QeI0mbz5%*&5DZ}CQ8Zct
z)09d;SS*i<$_m<$RTgq6_lEN1(O;^nO8y+$P-zP@RpXQ%GtMR^C8D!|PJ@}%)!<y<
z90?`o!G=o2rq40g;m}5nO{FXOT3LGZmryp`1MUU)q+umI1Bq_fK~)g@j6(Db9~=>Z
zG@cF%izcx(*DKNh7$PqPCM9eM$yS%n-j~xEb0YulV*Tj{k(DPtiqw_<S7c4uSI^Z~
z{3)tI^A`~KcVun(SM(gwnS1)!gGFV<cOv%Zc7|-oDuJ?~OcwMsdM~&q+?$E%17`y8
zu6zVtlR#}QI6at?3NJPwzs`WQhya&CBooYqSfyGmj)_?>N|?Vzl#=j0D&*hrn>aLd
z73i?K8LUlDW6MgQWy3uf`>tT`Eqc~W&EpUuWNogDngJyl(!qjeh`nL(!}O4N)?_8J
zfF{ww(WoS`=N3?1xCX9;GN3FdlQA(e_Flr74m=-1q;ydO02dmnq%#eIgJ;vY96)sx
z_zlj14vfedumjjK{D40pAsi_})?|oSP#uN)UFZPzv<LkE0oFs6%u{6&(*OVf07*qo
IM6N<$g2nI#y#N3J

diff --git a/camera/MultiCameraApplication/res/mipmap-xxhdpi/ic_launcher.png b/camera/MultiCameraApplication/res/mipmap-xxhdpi/ic_launcher.png
index c49449a461e46d85180deb2cd92317cb327ce5b1..ef86631494f45f8cdf1e0d8e96ff0ec93efa473e 100644
GIT binary patch
literal 3282
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

literal 3755
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

diff --git a/camera/MultiCameraApplication/res/mipmap-xxhdpi/ic_launcher_foreground.png b/camera/MultiCameraApplication/res/mipmap-xxhdpi/ic_launcher_foreground.png
new file mode 100644
index 0000000000000000000000000000000000000000..7509a52004f7c767954400858fc540e09e7bce22
GIT binary patch
literal 7893
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

literal 0
HcmV?d00001

diff --git a/camera/MultiCameraApplication/res/mipmap-xxhdpi/ic_launcher_round.png b/camera/MultiCameraApplication/res/mipmap-xxhdpi/ic_launcher_round.png
index 4b15907cec7a28f02111ed465fe6bf47dc40aa39..a97bb5e92f9f66e0b1efe1055a263dca9acbdf25 100644
GIT binary patch
literal 7545
zcmXY0WmHt}*PQ_d5Po#`NF$v}58YiucOzZW-5^~`r*uezlyr)82_q@pp}>3pYrS{f
z_;5cwan9NM?ES>5tIA<vkYj*AAS?xWX-(jp{J#es6?pH<BHBS9Dwu+_gtqVMi7^_S
zXsI=mgSHY~5`_rQe{jd%Vod2H`;c93v4S#pxg8s~Y}z_pbKWs_nA)*U)Y~$)F}$!4
ziI#R4BhJDJo+9A$bhRkvA|g1xJx})e;oFVd_rb~ho@f0dQ|mJpEm`qvssF#f`pKv6
zNFv4&x(P979S6L3W??8$S6jDcRP+GV-&coQZ>&R7h#ZG~0u{pK9g^qi>=iG$l(e3W
zv7VD$+@KmDCA9Qm*l%ynzS%Qm1%qTyCNf!`EGtX}{4ti)3HmmLO9hOw7jcXSpSB0#
zihGyVbHS(!LATSszo2myv@}`Rpqg0Cup#|Vd4zlu1A&}|M#_){qL1G~q5QIi8&!`=
z`44i^aehJ&+R|L6mB^S_D`|O%ro5b(5;*={TpXTTOfSJcOE+4B^A&vfYB?Zr_}KYB
zt|!;R7ITP*3Qx{X_NzWZ<`7yC?TSJi;Z|zB{eU9X??$n*0FY<3Rq**be}}SNbZRMS
zC~7n)L9|~JUwteD(Z~}0Y2Z$M@c#7=erNHmuZ#~FJ5ecRWBV1RnjM5Z+39tssK2xv
zspMNBNpm`)N=+-HtLRE}_SzBFnw!L@7ajgn;X&CW9_j0a3}b!-eJpcauF4&PmeB2d
zLozqfJQ^ZoY6jPV<r>yQl^_<RsUG@YG0f)J1Ikk=LD>yL_sVJakf%uvXvG#7G%ddV
z2}w>+go&e*pQqo8u)xr5y7X)38%N`{AiB1_+rsb>sf!O015S<%#qRK(sAvUlaXRIx
zZR9N6of&=wZ*qMqD!#itIg2VTTYi-?A;rK~k^vmd%)WWgfjZ`1ah}P9XN!c32Y>Q}
zeKxuH+i;M6k(C)zt-(wF{rmTWuZ*KCmxQI5O|A1HBW~7cUuaRr!F|5q)2FUK^}WxR
zZ!(I$LHz^;1)tY-i@Ml^+rM^qcZ(h#9)io_jN&V{Z%@|b|10PAz4RPfGrHtz{2rTR
zWo0%0hA2~h9kih>_4v6ge8e0&K0Z0=RBVs?ia_!0&k(VfsR%i=kKr(B;ul0L0aLES
zTpr6hv7h(!pDj1+80XFIoQ%}eVs;<KfzfKcdfnogFG9Yb(P*V@3EN9gR$Exr30{Ab
zw<;?yr`7(b#k<eK%$z)wxv#Y*8i#f_p22$Yd*tJtu2+*rilR?ZD5oBUZ=qSP{2{QO
z)WsToI+a{L1#$tW?CYtwzu*jm(KuN_&kwc_pGT6Y(nc?<FqA<WK|$Zr^YVJ4Jbycs
zvMzLRe6<LuAHAxyz<1f`WO%>&Re_w(F8O)@lT&_1<SM}!W&arw&si$|e2+}8s{$RL
znVQOIYHAvml&kWv4%_{ib{A*PkdKiX(SQ;g8#}jO5X{l?er?gYPh-4!MvPVT<=+(#
zJS{bK-Xd`)cjV@1sjNiqqqmNZ72~Y(DL8gO$-y2pF)@+W>hg<2Mn*;u<z0EH|J~`_
zbe`~TV`Z7d2@lneA3wabC8`pAXH;7VWiRH>mK&x1%zsJy*+++BS;#C;l!@L6&YsB^
zrBD*`@DQRwtcPKyeBE}~7FE}FcW;_6k;AD7mm4*7>0u}<Ev-b7p8b(X@pfx`n2W~U
z=Z!sM*kfg`FV5&umTAxz@^f@DAy4KvdsW*~Ssccx`1ttw5!ho3UBVMy9jW^3C5%hJ
z@&uys_EOP@QQE2)^}P2cbDm12aH6|-wma=`pXLdh_IGyVO@p6W{`Ar9n7%w_d7iBD
z>qOknk`1Tk<_gUh)g|!eaOmsnFT5JdTJic)%yQfpitIgg1!v{_c3(`nT3xAODir+u
zFT?9-alr<+Ln!WVdn!wQ8RJqUn`^yEk2WUtYnq_@B2UEkR}1Yt^!gtu1)Fe%TKwUh
zF}xjd#1?3rO0mtAGWvA#KT13sf?t9T!*Rrt^Zic+7m(2{QD#%NzAwAsv}R*EqTfVf
zl3>KjuN9~_$A;hNTYtHcKqsT2;e5JXbD2wJP-4p*iYHOxwV6y-LZcG)))sX=)w#_U
z^e7MDT$~)b+@07J?D=q2K4hJAeSMucinTJ8`0B`GcRZs)S}H&RHI6A!xop16$K^}l
z-`mSHyV^phLjJAnH-XC*99$JNf!BDK!k0!_$?7E5wzhO0FJT)s$peoymP<Ot?n8$^
zE6P5KKf|vu^tu8b4=XffWo2V0C>td0?d^kChcJMFE)YY+nT%Nb(|Ogb%Mv`n&jIo6
zvmGA$vn}W8Q?<!4-Ite_HU<`fu*=8m!xGjdiOUt+f{bi<2?!fI<MU^ywHW1{z!<AY
zc<!CV;?;)FuLVLT2_@8~5!`@9{C&Tdr#q#|aA}j6%Hak5W*ZsU{zN9bN3+i2N=9)-
zXlAQJB^3;$0Hj`-OYf6zu8>z1<w7AC>ja7$AUhxPA|*if3sO1nCw|s*XA%oWiI<TB
zcMAMQAfhDp|K6TlHONe1B2<xAZDapxvW6rR$x6R-*%ayU17iQ7WBX4~kMO;C>Faaj
ze^Z|YJ$Akqt~UM31j)B^CuQQKPEWXduMRn!dTb9w3Rt|=R>F^VK$`ujCeH4|?7Y#b
zQzuX15t&MVeD3nu5}5QHkYfBeP>J%3kQ&q8Z&aQxL^(DDd)`NjwT+9O<W*qU7AFuQ
zem)<T{t!>G+!HVgJR^lpPVwpQUDi)*+<@UTTm^*ieciza;(a_7r}n7kj#MI0>INyB
zo22A`=fS4MTgLUJbQZ1gpRroCEV)7yFwUOqRKEACe4Yq0##^AE?Rc{EwEm+Of&W=;
zsh%&Ainf@EJlpCz5H#rWuBCiL7}4tc?M;&9ux{rXpd@!siHZJqom~3!!#{R!%Yncj
zD57Pqrm2gd>tPBPc?toi_UgUsyI;Xdn8a+!!jM|gmo=AOc6Ot7^-kXlgfV~TuizJB
zzo(m}7Idh>PQ<~s-<ZYQ;ou$B(hD@DvF2uQgx#y!(lAoGnb1m%snb@rZiLZ0CZp_1
zx$Ru&>RI<y(jEw<D$Jy4d3kxP4;Bk9jrk^GPiyfN9eOP-6>34tY5L8{XX)~Cf^(t{
ze+i!h>q#7xwFpAVqXG~llxxcv*pWXb04lZ|S_x*#noc9(t}kx(_+#y47R%d@CcnnE
zzk>y#Kh3zNA)bMxp!_pk14)h<R?QRg%6sQZ-=JPxS{(C@`Llo8gIZCG<5x-uRJ-i0
z%chg7VNOmC&$gG9RfHp08aj`7PDyZDs>@>peODNg6!E2a>wFAh!wnHp8V?p3#YxKg
zEhO|61chh+D3O~m7p#kSC3IZM`(YR5m_*7gNgXav^zVES2b(M&i!J$hnCo_<%jX4&
zEqf|_>&V3agg=|Letmtt)&L1to>$VNu^Vm5V46*EYqj^^W&CSfl=vNV&G(p~&?`w7
zX-n^LG%$h91++hSIEjh^);?zTT;fL(<wxu;M4OI!2J0AD(Kk=_KIi7H)2Y^730z4@
z1ksb|eWVu6B?7K-B0oKkjVuZoF5eBW{1%i|4Upt8DT}WW&MqXKbzai|c2pHJnQSVt
zU$_dEHp`0T)1Ue$=&>gPR-Vk}9vn16Itc<QU5|)DP{{#p_VMNjYss+DBC@J#x8WT?
zxB~FkRt@|hsQwdlj<4Vhm@1w<YVtmSalKa0T9w|Qew`vL33|*%NvZej#FhUr-EkbP
zW-z|hf>72%Gw6b!AND`?Md*VNoF8^~c9a_-q24GVxF<2iHcn18g9Ez&E0j*E6xGY`
zQjX4+ky24Tv2vLcheTmfpknW+1h>m#g2F7+kHR!@PZB8Js%GSclm3i&MX-ZK%%wX&
zek@b|9s-rNU?v<H87W!$Mrrx`c_d9uES58a&iWV<s@sJr74?>%U*{WkQ?K2*reg(k
zw0Ts$L{_e-u?mc`fqbmsiOU#3M!|8{EQbDbosO3FpZuY{0SNaVyO_fWEl_Awx|#@P
z2kFOmN+4SBXErziA)#Ue`O5b09jPIti&yq^EO`B1sh=-I*>ET17z=uR8Pf!Lb8_%b
z+hb6ed{tUJwMP?6z|-8_Mb6L9PZx-r1CPLZJaY2L{1>gkSAirgphArjSu%9KO!Vr&
zq3?5LN?2E6b5X<~fUROD0El^y;*^aHoso$rUMT79agL`i?g8@!K6(y%%_<gogUm&H
zNzVWnnLizn)_ER&`zzooW(8DSkoZcZtpx<V=88Xpj%x^qG_Z7#a{jS00I374a2kV0
zXMjX;2f?kV!aI}0_dT@(!<ubp1a@>8RX<nyfmHHER=7BsZymrepmZKk3K#oO!K2M^
z5MGvDIS~lVhY$j#t%4&msKT08CM;I_k#=(+PyscQtNj@l$*qnu2&m|n95c!dV+*p~
zMyHqejO-dYtU|5eo2b<&ZaWvi%6=aRF`=~OSO+LeUvVSNsWL0MPuAMhZa@RmR>d~9
z^;k?!IcNyx<3|9AKYhX~1i*E%T>RM(6ErYK`L#Cgc0tcHP^V=}V$tYphea>F|NAKC
zBd+KBi{DxD!7A~P<OAvBm1f%(VV_egV0FG3efgsPR#_qA+<q?e7|?4QOIC{nA{o;f
z#4J(>HjUWlg*xM|&OX#E-cuZC>Uc*-M|6w&I4lL9;!P|h5WZ6}JSD)*cx=l|{4Pv+
zt@^<6NK@9`{gQj&yHp>l<xYOIBOFfZZGFx}LsbC*#nyTZMdXQmm~&QZZOPPh5{+)O
zz@cer^MGBvQ<IdGq&25aZgl(As!PJ7aj#i6k;PfRs3?w`?@Xu}>5iN81q-(PS%R5g
zRCJ?`ovGDnANF@FiAs2OdV6NMT|6X)KBJ_7XeLkitqv<F?BDfIwWtLgIM!;J63Idc
z+ItE#9BMwcGl`j0VgrMrxqK`N0kgHPxP-*Nb(5}#zk0<pn{*2+tSWVZzYf~8{+BoB
z^MxGcQNuh5;2WWf@_eai?3KWbDt1GIA8(pH59flB2^hf1rk<XjdWJm%V;V;T09rX_
zzjN9R^Rk#m#XY64#G?-e5G5B*!kGJ~aoYKEXN(3w3vi`cfmqByfbI0>l{i&TL)HmD
zX%A78J9<VOPE$7<6ZASv3K8^3Gd(`J8lC3drhK4Z-^ZpFX=mrUm=-=uXD5bH?*IMj
zuuz4Xvys*s^PRFofcgj4qKSlgI|ng^(C>w;cE-%Jm<B4frXC^O6BMXm1e4f@a)mU;
zQSgJv<tQEX5Ewn$P+dJ4=jp#r_ucV={|b?6LGpY#ug#h6abY{78RT}=5MPutiLjq0
zQ<k?ztCM)7nF8Y4Ee;Fr2+`^xsyZvbiJvneX-sOWvvaGyyOLsGRm|jcM4s$uhLWh3
zbEh|#P8Vw_7B$B15*#i6OJh`VKai9&Jf03k|IhJ6x6Viq4Q{5KeS?9bcli_cN&F(V
z%}Js(ud$zyd^x2^mh=s}lcZ#rQ9w&HkK1(6)8iP#c)Qj0y%U|&^k)2<_02MLFJYu$
zQ?pQR02z%&QNrc*NV&{lyyT+{j*b@7s|ajG8FY5tS__M<)!DZZ4Zn1kK3q+`-JO<q
z!elZ~`krJr4YzoYOv1R-r>Uh??|ruU<YpF{7GrawxrfxWb9QznS0H6~>0_W&n%6PL
zxK1YEKVXQIA^bI8$V)Mo-!W5!L+KvR7n=~mRoukk?J(4XFkt>HbhO*s3IOE{p!*t!
zjJ?eIjga0$=V}exZp#Y#qj6}c%dA1MR@96{uf-l+)4RSDLr{80hPCam`g6TNirsWl
z-Mq-XgD=~{qq|!!W{8Zg-mo(>8vFHX-n8sRkUTwZqx1V8#WK8j%A$`4B|&@mcE~uz
zu~PKJTt27kB>khcV`yKjEBrv<6KY?Xa%O*KpNbK!XhP7X90)yAS?ZiD(QH`^HFMZ^
z#P2iay6tSCM3wJudj=@=N*s`PtoMJa>x)Cc?xr>bcHtE9F)<*VDtUZaXSNk`*3woV
zYp7hf%G;D>sZ97QMh{3ZGG>HFpRpj_l2v`;a8doi!2w;VfA>@et!0t)r^E?Pxc$#^
z6^8RdpmGv9RY01lPW05<sb==G7_<W7Tnr$rd#qd9u!->E`TIp`C2*;yDbR*xV{NoK
zt>AYpbY&636sfhX2O?gb*u#7j2Pbsn{P8f2)U~zKx2edI)x;j8pQ)bJPLwKYQPlA`
zt*1-S|6v_$;y+t%NgTkgZf<J-dz+b;_uef$r-!1_v%~P*z)i^nf_;RHsq9SF<u-4z
z;h&NI!n~1<_Nf7vHdP9QqI8$={CHIFwJRjwU^F_{Q}kfXT~c^O%x(aJQD?SuhEq5$
zH@qhGC9*)I=+&Eu+S+U43ESFTJe?X4Og1iqOG|gi#0l{6IYe%kEk8=`1LEtZWj=6Y
zcNoZ-s2+0%dIp9mn_mWqRZ^b5O0_SqC)sPmjEKk&lkwV0ZzHGbfswuvb~?|MDiArY
zFB$(J75H3Spu=MH-skD@MmTeEBw4CoY|OWd#?M;F=d>ms3xz5vTdQW0h|EoC)WhA~
zo!V_-de+O=*B7ExQXkyTeVhYtwwZ!HlI3S+whn8u(xda|<3_~6x;Yjx_wYR&WDYp=
zHV?ODuL9m3t*#l|d6DEWa-i@~3Ayi#s`4!d7}kDT8akvkEJ#mJ4-*S~gkDh^01K}k
zYvv9K`R>l|FyDu0iuwNidxp~+OizfNUc`;W?|)6!69N)#HI_d_YzRQFcuvU3$uU^9
zp8#d?Ud`sJ+&NM)`bN-otFQJHXcI%7r6eWI0!3;WX6~9K#k~H^zXEHPl$7kB*O7J-
z%{AOeg!(@Jdx+^~){W~^(g|>q$ybTGPMG~ObvQaY`fkFjSkjm!m*B&SyR!1+!|15I
z6SYncfR5l+^o=u$Ipm^*d4qToPHK$XX&02GjN;cv$a&^7e;O@Ef^dvi*B;l0BGnOh
zx3_h&;ztZjOlKB)nf0u4ymhQJIM1ssj=vS6Z}hW>PWl5+$x<RCBO!FQ=ly6j-N`vQ
zAL8SEIvM6djs|A#@9)=)ySyQ8*ll_{UgE3~l%X`C%n3n@#@_-SKFZta|8+MprnCse
z0J@#Hlc?aZQ+RYxjn)zm_PYq8)H}Q?^&+I!J{MdHimpggu4*~!H%Xo6h4t`8T5=)F
zjfZ9qDvQ8piArQ7B(rA+e&_XeYXgH-GLytF;qsAN5^}o$;xzwRs(<O7B|EIEqKolx
zi|7n<wFc~)GlinSqUq@Q5r1571_lPA+p}LUmIraZI5lbzIoy4O5m}sbhLn^Pof$C+
zhta)@6Mf&A!9w%=beq_y011_#J4&^3a8wdpFM|l8mBphf^k3b7Sn@$ZL8R~!fJE6Q
zrl%K;a}<q8h&84^y>(&t92BZTC@*<&>g^fU8Ff^36P9v6te)8M_F)~2ds6#uVP&!#
z5=#m7i_Nt3^z>-NU3!%t@mNP12|`R#lE}{+=~KFV&Ne?r5aH`(@_jh6FmA%dTl%w5
zjg!i8URB;%^C>RQJyMA*gHlm!hlY@lFp14eT3UKS)c=-p==q&c3?(MD(<w|F0Th8R
z#X*=Cq8@cqi;_lCmNz8U;AyeeP+SHo^qMWD&T1sY7C@*9VAjuUp0G|(ExOr8do`Yj
zj~6G81SVk$8H|vCAg#`W_OC}iCJ9I1C8gzgOblzX7oy1KoHR>lXBU?6j0%vVLyz@D
z=F@?=Iqu=>Z&*@ZlPrs#wLt7TY^HKQ^7=Y>eAn4bDZ?-fLw6Eqrl&8(esVh4-o7{o
zv_+fw#7psuFou_jRo=ojy*b|EF{eqlFUi!!i&@==>2Nq2wFBMMo~%uN0CGPV3~nz%
z^$brT)P0UJAv8HOC=4HU&x&ldaB2_(C_sm=ZHj9|WT{_vyVIu6gA*6xhF>kVVfPcT
zK|T&Df}F-nuV^Rw!o_MLA|k@veh;e*e711@kQDwEn_3GRMuW{}*y^Mb9Q+b>-J#GM
z^tAagDQOzENKWP6sl>ZxO%$dCxQ`FYXPZ6ZNWNSZd~Msx*%Q?)8g@#mJA>O+H(Og~
zA(h;hgsggX>v7aXY(#TXPk*Bi?sGCTqZmeo2L=Z6`zUp*b!+kV()SnT;y;fVDed%k
zpc7tJ;l+>_iXofu+0T`71HMLA=rN1@>wLZq@(q>r6jVR~cW~QGW?y9UPEv`-EcmKU
zWXPUpD+<t3#BIz}Jw84ze$oD-X_>vPXYyfpm)~*m`&OXA`I$04jXd<#mKnBLj=2}}
zeay*nqowU6(cXU^(Skc2*Lxja>{{bE)^a5@1m7A83!&NOpf4*2KT3KxS{(Hl2LkcF
zm~+seKrcjzW6?3YMgddg=J<SjP|h`dA$$K#!v6FO8C9eMI0d@I)mwBey>N4Jky4BI
za5J($_35qv00qZo!3>|-an9O06?3=C?Lj;^(17o+CXn$GM@2=6g$nks&r&W78eM#T
z)$|V*Izq^Kx%bAcA%#EA>DRZw3cy*b6LsB!anRzRYKDSRGy6+PdylI?l&*b%sj~k+
zvg&PfTskEp&}GWrAMg5lm6vKj$2n~bO+~-CysXkHQ_NsQzvGV8(9qZ*1`;bY=2j)!
z>l_JJiM{h}*(XVP?6-+0Q2=E*bHE$SESG?OpVu|l44aF@$qUIhshe86+Om$ns_(f+
zNLfIIHq}an`wKJ$pp?fMz>S%Keo72<>m!1-e$Y>O)Bk<3Jf=2ry(EGDjUsM)Rt~Q%
z$H8oo6bY)T);e!jHMs~0k!Q6QkMqvp4~VjNBH;Wj$?d#m!&h-Vq6z+YAsn}g80#6+
zeO1qG)~sFW>Y)lw$1}q~v1{N#T4dzrzF-`F2JE#!8dB0_Svci7-DyTB!KBC571V=D
zsWwIU)1S+A^vGQ)bElLD$9Vb=rAmPP%A}SrV)=VGaZEu$p$)GmHV`QhT!xa-LOE_n
zcS*Zxh2ZGx6B?KU@d5gvJCWO>1~>>fjcW7|lk?VbavQied3xCFA>8i3rltTXw90Qm
zq}eF6tdN!%yWVOScL4-%320I+-CBbdVF3XF3PFZzNId%%VYIqu=zswc25!tuc@UE;
z^E2^2J`)kAF?f5V>zF%gp;~XmO!@oo&2nym{YKg<hd6(;Bs#Vvkg7h_yH+$!{rq*s
z^?f7@GF8T2aK4$Enwoh=VPP}{zr*#v5HRwi>L-Esd%*tv*bh!vH^wH!%!-ad>kBi)
z`-@5J(^tIJ1&77<4xO4baEyGU8R@L1G(uh);QxDf_M$%+g|*gH)}KwwEt^1OIlTNp
zU3D&cNIW6|yWIKOLnFtC<HlZ@2}&E_Ap^-=F7wWa{QP3t8x$y;NY3wfd%SW*0`w?B
zz&V4PVVkoGP$x@c?d|QngtDekE+g734}fEK6#)^*fV3Ie<A0YQo0KHh_<pT*9@wiP
zcKs$R(P?hK>jRB<Ow%W)r<<wu3kmh?hU5@ChYL6jqET<l|6)G$HyqmGCQVzT34vs*
zQ&cI`6>+4@$*NO75q6J}YU4CV+F|cTM?{Fo=$07A6SE7o+W*{>K^Ob&b1#l6kJ+v?
z^oyczK)U^vX*1q%NaJ~SdLf?kc=(wNS`tBsl~YE#S=HpWi%t*%T)9d)HC9LqlcqJ&
zg|n7PlaCp{%;=V}6iA_BPA58YnN?l2g!{57&XO8ZP`!Ht(Gpbc*0FLYAC=~hV3)+w
z6=;`dXQm-WhMC#-X%_TrWPvr~U&<K^O2`X%v+K8KmaccX4+?)UXRpKUsg+fG1S>T2
zAJRa&*52%)%68$T|0%vgykPE}>FR=pKF%BtE}bJBJ1IJtsQAdy(($#C;Q2M@O*H{7
zt>op>|AO_ODbyh9>1IE`S0N$eq(*hJFs-;RXQT!Dp~BCYpzqhE5(I<&z>z9QK}J=&
JPSPyw{{VBcUMT<o

literal 7642
zcmV<09VOz4P)<h;3K|Lk000e1NJLTq0058x0058(1^@s6=SJeV0014KNkl<Zc-rlq
z2~?ZMwSY%LNPs|y9kVaS>|h)3J88Tn#^8n6#*S^gV1ogJ0SPb$42Z=x;C;b6PU3h;
z(kyP?X%;tamcG8`ye_A&?K^qxdu{6Xx};6oq;8GGyt(tw4}xG2k^q6`Kj$9F_}6IW
z-cR@5S^gP>_{A@N@rz&l;@7ynFp{9!S}B#=nGS=BcprR*Uv>zI0D%l7^Y(2Ai$H+S
zlJb_Y@_GQ{a7`$$A{ch4ds{SaNLT5H8cIS@V?_*V)+Qre*>o!K9{vXZ2lv3eLqXCD
zDhFy@K_iBmfv(01AJm|kg>>32VW*mE<IlHWl{9MKMh)5@Azk@@lfVC&$U`DsL<~eQ
z69fC(L*X8BFa3=6ZFOtS)uapUwW`)bTWHzv9ghPFgu`TO&|m@$2}K~r7y0Ffoob8;
zKhwN5>`cqKuv5(+g`IBxJrNADpz|DFe)BSpIMad&OlC{+#pC#?7q8&Nj&{t-Cg0KW
zA$dJZznj#7dZ9irvHC*Y`87rtF$&E+jIQX*EpG80$CoE|w6!I4wEr-nqwOIP+#?rS
zsl;DsHDtbYqbuj$-LB-0c0Ku<9{$FpdkCTT!Dm2HpF7```{v7Ci>{wDh~-o1{oaRA
z7pN1|4eDrI=Otp8<JahfC`f!WjlB&qfUK$f329@+X(FFU8_RKz=-^eWmy+;91YQk9
zx{2U<*UsSd+t;zYsRF~l%@y!M>+asbK__&Wm2F_(#lF+1K2)HN6{lso%2Z_h10dlo
zlY6BRy!z)4G}+ZwBAw=^M!5<RO*hF;x=22vCqmw9@IW%>>S>&I>l&63qdx8)QzYbM
zBVKc-69*h`c-%eRtS()wZpL-}DQyF^rB6s6BI)Os`QWU5>Dv71mrr&Q1AN(Ihz2SE
zjlopIk0L<*#Xw<dVD%Q-@TI)vU?;TgYaIf9Spbf)0_)44RJ0uYb_Ow4%H@+HIHIQ+
zw&BMRAY;*sFp;)l+O{hvzD+#S(#Pt7UnY&;$c(z)bBU7g0WdvEzI38%u<$gF0O|>I
ziss6$43d-e{y0dR8?^I`b3Hx;Fm%tV7o4W@Fw{`qX_Vg(B_Hg9#FqeMk<o1sAWQ(F
zNqx%26GE=k6P}3<Ko<k)h+hME9eCfM)ez-<VU%p@`zU!L1Jv6#y-|+z1=We@fw(v7
zm+SQOtcc6jX@6*x9QO%Tb_S5xgX=N^>Ek|O&F*uf3ptKG?{(#MM&W9}9+e#eWYlw`
zQz=Y8L{|gp(C+4}Xz!{toG9hJeqP5MB~N64L^1Y8?@`?iG)6YjryzRX*J+<2iul~f
z>vUT|$rBkM7S?*a(dX!J*@gjiJ2CSeqbUfTrr8v)!vQkE8`YJx5RFPEbY8UN{(Twy
zmB>lMUlzOO<h@}8l{}FF5_)Rl^hjOVE2yAAA?SL7b@fv&T%d_wP+P4hf#xGqLly_f
zv_Z(8kXBdveN>X;4Z6-@I-f9ugBdrkh6S9^{hYz`Xq1&akpU9r5rgO#DM#ufC&r*7
zYd}a_UHsa+Hy#jx%!Y>pWI9B%FP(U>;_UIHaSf3ewupk`=3P7U$35SA8PB?M`cdeq
zMr^K3IeP@}dgCsB`o*i*l5#*`-f8C>cW}h%W{b+1OF+!I_Y!H_DQqKcdjvpdfAi*_
z!t1oj#<m!D3G>?LFNLmu>BjH&5_pb&_?<_fptW~9&6W)>KaZQ=e;1d%eb1tDKq}sS
z6E~5vGGBVmqH^{Sc#eE<AKO^l9yNb>AFsQ4^}$LO&U!jA<E5(}(p2sdbW-=Tz>_-a
zc|gJ7o&!%bm@VKfvR}WASKPd8Q8^%Kx31#tuieI>Bm`Mf4tO4$Y}+?)J%Y9c9I5`f
ze?hj-*M?DSdXTU-lXTTJVsGn_jpYdwIS1<7wx)6+->lmI1C%+}*|rB8dxz3tHvO(~
zZ;JyohHcZ4#Jau=ql$u8iEX6)Y-Mw^>Hv?<Xq*RgfNY^{#1@B3G1BZiMr~wsqt)V!
za6{>u-sy?nK|&7Dn72(>pjK0iQOT}Nwl#|{(p*~<Mk@K4@d7XokWIBsSfEz5|IcXO
z)+x3zZ`L>OdGB!(qZ}YxX&bRk9m$8v^FJgua~S)4NEqdmkV+lypZ9QpY_x4)qnZO4
z73UnGwi~mNYB6c9E1f-1-opX1*|rJ!P}P2n^0zM$AX*|DtI#DSmHGZqYkD|9w$?Tl
z%C!4FCN^{&{ZQ5ux=M=%3tb!_8*UreteW)7_V1`1-B2csWJ-{Be+b)82M_f~F$c&d
z+h(A>vdV(LpzT>v3?k`h<vvnWueoIEa#RkGt+tKWuC@dc>gTCVN4#4vCeAg*vwC*$
zGGSFA2gqjICM49A1qQTh%P1t&f{O$1^U81*!*hUaxovEkqd4bHIyN+7VNCQs)rG0O
z3*zlX$rHS7V9Uw^jCOBWHF92vc^~Jdir1Z54q~U43cV9)v?&sG<_KLd6@I$8=WhyK
zIhO3(j?t2N7{x_l6cs+CNT)<#->HdMl@M#v{ey{`l;NA4h$T@G7M0@^I|ciZIw@jI
zXhT9YM#~msNzpE>XsYO=Bln}#c>PN^@Z76su&H`|oGj`*M|VwAwp5w+8L%a>hg0d^
zw?@PZu`T5!tFE7$wdQUo2FbW{y_*O&MPR`dthU?n`W^c3)h}Gei94RfG8bn|M<DD>
z<SI8jv!np0-@4kPBUl*;D<n(adIOuP*T;$Wop0gB@4ZVP>NNE;-C)y|mrmjN)tXeW
z^%84#>lr}OluO4uW?ngkiRfouK8a10RYXy+RCDFc%k<xI1vyye<Ybrdh~ng-#)$_H
z^yp~*wKEi+XJ3604@b8>a`qUWdA^mthn0;7-g+I+xpLa{&l8)bkk7~0RnQ(;rqxz2
zisL@Tdjm}!_Zc)#I9wvQb32BoM`k2jCkKN3WzlSm3U*kM-wESFn%vJ(=IY7R=9yOL
z)-zWoMb*V611;4UHbBL@G4k@@@PPPuVLA?D2|xf(bR<R|?l8AyK0x&}nbxC2MHuC5
zsiij0v2@Llu;na>jC{clnfI{_p!{r%)G7`S2>g%^7Mc%GSuRFNq(dQ*2s*U{Ale%v
zwuR-d#W_DA^>d=Ow`kj8miwTC`xo@?hC2Mc3Ht)HodaYIfWT8E#t860S=InZ99XQ#
z$7p-z3b4Ip$+Y0Y9HfWKj+q<2I6xx+Q29O~Y>Dt#4<I3o!P3{ft>?k^DQ1T;VR~QU
zlbPu%)oFibPV&qF8UcVbc^D<f^@Ycp0D+AmA3BipOEfp$QwU?`EcIZMrqL~jQ>C;b
zTI-C~a)8VS2*MT&y7q_1x&R4_1IzQV+m4N^X$oW3$h7bwS=_0nMhcLwOwR!tLx8~Z
zJPsbK14L4l>SF9#u;VoCKn)up7QTqc<IWy^U+_R04$xQu1Ub(@VQVA-sw=~)vb=vI
zWjhZ)jInvIpt8cKxbtmaz=<=K><rHVvH&0mTm2K}kp_tM##B{Be+$gYoJzykum%-b
z?<-hWxiS7i8yuTtu-c3@2gr1QV4TOet3Fx)34@9T_rqm4yl_tronXz(ln*!maST3I
z(<T69e)!@5nF$b#FpGnPrj%t}4@AS5dt(KTEHAuB7v7tk2SKdMqz|1bLfY%!;Q);R
zK;ra-sql;lKxKOMkwbWLb?FB*4+17k%7esJhiOZ^Lr&^`6Mw!HPU7PsY?J_+-daCA
z&ofd0HE0a#V>Nh6L*)bK*-1e{cixnBLV~MuK>M<%hn{MB!~p8%0F69APhCHU{pZXa
zK0G4=P+7OSwFbww)OI;-N?S~s$VqWDHG!5PP2PF}5GEmvo-xV+8d-p3By4$4OTrR!
z;28;kNFq%D>W(EI(PdlaPRfKSi8P!0kcTuMDu<)7H{9toEVy=-9#U(rz^XUclMot}
zTvv$|UY;BtSXAccgJ+#Nil-4Hxy_u4B~ppmWr0pXx1jIc_wHiNJNNLy>*m`HHV<9?
z!bL+`=Xo4fytfIMh&Kfwc9SCZMAI4AuW$G3cl7{3`t56G3+#ppOIl&2+>)d9*xB2Q
z14KmW?}wM2ZN)*eXApR#7L^4$1>J(a0Uq7=-l1OK61#1F<purbyEky`!QxI}!X$vu
z5}E@!OKMAA4LjY8lRDb;a5Of!LvsZd)5C&s2xShiYL166DiWm&c7WBH5{c#I5uJi=
zLErO9#DE_?ESR^%Zr*K&^~vX2v8re{EVg%HYzzeulF^$Fm;5X2@)>*Xn1Sa&BPbFp
zm1F&07*-#xHYAWvlxxYJACd2HV{8o4m9M3nFv^gprwY}T{+t6ej%0)YO1#j9UCZ`<
zf?QpFgo#x&NLOB%?~oB!<&WyhehUD_op0p;*(*TD2tXa}SgFl_fRd8J85^>p0CGf6
zKN&#^_!9?+0|WrMRuudh&6tru*)RbhIogyKLkjpC1Bj0U*)2eax&a`!gZsZksk2i|
z2WWG8B5Ke+<N$Gis0TV&^bhond2=Zng90QBRVz?d##92(KRG}gAPUf-qAs*_;e5(Q
zX1si8fHtn4#sT60^#D{=^vE=T1oxys>sBWro#yWxAPx}ig;f<kM2l$%Q=pW=CR9a$
z(pScj0{+T-VSF4&NTLh>hUU$jX*xhl7e%4^vOjWwcsHJP<3B^wrX>#z5L=0eW+nuq
zy3*fpfH*)DAWhx_6dfK-*$}2Ph5!g5FLb!{KloGz4`DEs;Zm~a6Y?FCgd`db`gDdA
zh0$FZJW=g|k2pZ~KABoWCsUP0yZ)VghYw?8&}FR>6cz?Id7wi@-=r%N&$sG1KqDlu
z#b0EY)s}Nu9iY}j`h>Gbu`+k-ThyrtYzzTVN{S14RlC=eo=v*gj-TkfpbtOYWVNHQ
zCzTgsnWvh=Lqz7|g@fy~*fS;B;ss@(Q_!u|jx;~1!zBOFFS>LR`{riDws&gA#-LAT
zNP_0l!&%*98Y(KEdhrU*y?58J{_YK{9gY2sV>;}@S0qw#o#cnpuARqEb)3M#3+7q`
z5$F_jYqcZI?_9@QUwzTA`Q}v|otJ$Sm<TWhAS3{!Qs!lEO6X{VEn~Zb360h|8rxTs
zj~zU?2NFHdq^2sWqkx8T>|?>AdeAB8)@nzZAFs!87h1dLoNB@DnX7Yw36ne!S~*!k
zSD&RXn@1|}kU!RA-;ec7X*~E3Me5w;!ivN&r=bB7`uR!}J}ES$z2Vmspa%Y6q1`=L
zST8(SIQdZ7rzpTXnlh0>&lVf<=~M^gM{Y*QFZf8!TY?ATk2c%oqs=W<IHGjl2XqW5
z0J$K9OxmGCisIv4$*Xr@t)`tn8*hi3E7Y^i6&kcSG&lPSu)vs*ng&ox0MO>?U$ASd
z01(fC>~MRRZdLUGJZa;aLOKQ{Fkuov5;U16((dXf7fp*hckDB^!IXgmWH%d3(X-%G
zn!L|FW=&rREU-aDiD>{qvgAp+Z3qR%wl};-0jlQ!+07Pr^`z5uxD>nPZG$cDLMRI+
zCeXc!bhNh{dG()MTi(n8vZGBl>**nM2B??I=5-y=nL?92Ri-A;y?IcQAN0h$1GaBU
zlQu#Utu=d}L=Mn++UB=R*sZ=KNAI+3(Pklm_AxnuHp+wOvJN$oFllwsk10U)e53I(
z1!y!j8i()&XUgx|{0mZU6lFkQK{7mm;3>qA5D&<Mr2BWaae(aLr~{+$g`Qb`8Emf#
z3i6~ZpyBUUPx7E>$b)=Q+On0XPV-NG*vdpdY=wod;+#il{>%+vd(X*}hn@fQ=0UIm
z&CSgV!WgP7_{dx@#E*L#C&xWC2)!?~V<YUw5sBQ87h9of))}hcvK*NU3q(6NRnW7f
z%$OJB2hNR~1Lq7#OLDCA<;~RQfq`E1ab|?fJ~PY#`Opm97lnmQMb-QNmxVEY<mH4s
z@=^oGJpBO$1<j^5_ohQR79D#jgfV}A*c&EPUby?R6C77Pj3d7XI`&)f?0PI!DC`;@
z2X_^A%H3+cW4}r0aU#7ZvyT04f}_7H^@{3ZEZ?-|7T6m3`T1HBzWVgWJU!_^Qb6>Y
z)hp7TyZBFQ9Q&QJdpmY?ak0<MH3>ZPHAS{_?Dy?!^w{qw+8Q5)KDlTu*xJLx!`<B8
z*Vn@sLe5HGUqA915#Lz#>I~v$hja9I|6{*FW^}aUDODxdeR(RD#zzZbZ3vN0iNL;7
z6R|2G)};Ff6E!KrH#reYq9QCR$0>FS_9Jyt#6%5wuR~%i_FTOj$JA9|szW0kS$yob
zkqqb9Z_$?1PanaN1#~aO2xe<%OT$;6WEusjAejzA-&mM|st<Gxr%T@_2eM#R-=aLB
zpIGb3g$d9$q3d3_Q;+6M-%M>B=w@;9+#ety(FJ+Cz{6#eNmu-3R99;9A#@xd8*Lj~
z_k*hTW3(ybU#M*b8;gs_tOAgjOv{mqdZ7?Bf7(h^Rrr;uUWfx^vuzW+PyV*QqiON$
zsBMLDKe?sJ^W(gb5_x$AQc`oaT%ltaCU_wZkPWs?^geLJ_qwNVQJZ>t22mSZDR~}j
zWI6-|`_Dw0eZQj>8Deyr17wQ;X$>$iEZMW=|4@MMeCB<;t<iNKe1a7S6-bRl8`CQ3
zoXil%L2-a=tZm|`bIBfzR;KExEl1e<^v#7}ir*Oplh+uMP=A+(vU+V72WT9$O_*`-
zf*-!**>yi4HjHJqRF6dN^Y|W_kJ2B;4AAuCRV0-CU8vZ=p^O7$Q*EO*lH_iCh>~K~
zQ5%j>&ucI*<VYWNRjb3uYqWIpnkHdZS<3;k<+h3IeGcSc>FTA&!FJ4sDrQqD8ih;r
zLc%^mPEN1|ejM7f^=(vBJYcVk17rhj6MJ3chc3xl^F3-a!FHa^mZRc*zMfFKQ1=&!
ze0}Gl;@zLp^(6fu;sA|t+eCN{mte{6tOv-)XA!lTi%Y<0B+f%6)b3&^b9i!bHY&?A
z^v{PlKx5uE`ka@fV244vV0Io2UGDDT)OMqgI1d%doavs5D%E6gi_(qhN9mef9UY<W
z<^YX#+vqaYZdk}i@}5&PbP2ZdGMX@zpfS37Lm4bUQYfHe3256hx9K7$7Roq4W7IZy
zo)1D-SuU1ju6m8yMzE3ZScb00g)%qN5e#6Df+V7y8}HMe8EF6qXbjr+;#DkbD%V3a
zkYuI5Pi&G*ZR3mrsjbE^bPeQ%q-+RWO)~pX8e<WfigGr83<FldCmXxg5an=yMyGAF
zubjeZx371}s*12=%etQsTcl8%2)0ohO;<>eja<h0kf)QodjyP9yOEw*!XeFnuIfCG
zE8l&y3w{-r93Q@zlmn~nV8N6n<yh-z?EXiZ+d|vehNfNnU%ibJOY;BA&Btc}*n-)_
z(-!icq4FUZ(ezgM_&}_U^^T5CO>b@fRqeOmfF-S6mK;M3n|;DkO;~MbNjcU$8r%3t
z^D%GRt*bcw&UFe;c6-bJ_(eoK2{s_Mh@y`u3$~HjB0POpFA52okJvMFjf_l9ZLI!f
zQ1c-gm(4wf8WxFz!C})*OOCU)=F!;3N19twj>T;w2{YAg)qWgblK+X90FT(?@?kb{
zv}JhuPjv{71F2L%f1F!@?|iR)*&oyOC&G?r-8=`fR@<PfPIRixgHh%mld!dr!4t)L
zT&|-zRbfqt-01coZf;Y^YrLbQ<8-t&^IfFLW#dFzanO+iWKP@adj<)+QR!YR*_i%a
zqT?B$YlXM>6smi{29CCtG@IHpld}f+D+Gw*NCT&$jp=vjS`>KF6@EGO9H3#hO`M*9
zWyM9iuw>m+uMpi%106G6`}gavj~jR%2az8e#EK;iO_pY?Xr)gA)Ep2)8VAVKwu$i6
zmS9QVcD;1v6DL8ZbZw8IW54kZ&p;5l(qzsFg(FvaJb9nwuyEEcl#}%vVbmIyf(#zg
z>>i-rkY#{eQj)#lQ|X+PTnZ29)ConfgxS@W1`4g26De7DG6cE00z`>2ACCnnYwbI*
zMuk2q)bRL~jdl%?xRMZFA!I$X`a3dj^<p~e@8Oz2bt>pqIUaK!Q$3L*8;gL6ykG)R
z9L&!^UL;+$?1*IFwl9V050Vttf886|B|!CT0X*mg*7EGx@}+de6Kyn?gt;x@hZxLs
z>M{}G8ECK(Mnhruvj7sary!*~5!|ptTy#3xvi5zt1q^*;h$e|WAlVf_J>iPz06a5z
zolO}ZI>bb+r6G&xjOq^2`9}|?Q`tlcTc)gNRI!9FjQo<o4FgEiq$`%xNOCs+mUj2W
zo?3&ZThTP}0h)gCID6oa^{_N~Sh91|@1#o?*0EkzBGXkE)17K8RutL_L}GI7MW4x5
zD58;E@J2EZkA>28X*VQ!+y08m^O=$lc4geUW?)L5SOAe92egg+IJ)T5qNHOX$=&)_
zX~xRuWoq?e>UD^2h{RA`2|5##WxIlBpuEVL%@X_f^F~u0Vk0w9X4-3#{Oo_o4;2X>
z=<-Q@PmWYSjsdFg&2bbhmHG@)PV$K+3~iOHPkV#3ea!$~$DirSd7|e#!}UfAHg@4H
zcq2q|BV`hF_d$scDT!IKjTzrcZK?Yz@mQVEV}ry}oEE7cM*!7pdc%}XctTW866Dn8
z!(T=2+4iQx^n@)8oFu9P(1qZ2yqS&^_Ud&^^+xV2zK2kktyIDwSu!Yf(#+{=!?QQv
zAUV>fbTqrV7z>*`uyG_4VH$OS>e-xCJ*y{#DHueBDG1UQ$MsJ?H)+PSbqt(j+GZhK
zg)&{ZbFVYJ+(^lK7yeX<a(OK6c`%P8b90+7UB0A&K3%yl`zyKucP)%+GnfR=WDtxt
z1^|h`h&?G08rUOJyAMO1q3+V9i*=+e3q+42S1J=}TLp0ZnGTfpoa>nDjbzMKyRwB)
z@c2-eoct=~y`gO?kraodm`&2v%PvT^Z}>4W%tP9Hqn=6A7byDc7oei6_F&nk&Z1NO
zaL5TAW~(i`=_V8P+P=UvFi!)}<nMS0b%eS)B*tVx-Pw2!4OMc%<Akxcda|}FjJoF>
z9xH$(cqBT0M1HNLcj73>G?<BYnvwjh>)NN!xMgqpKvl5o_p0&&>|RrX)r}R{<7hSZ
zXsxBP^o2`?tXE#pd$-r=$-ng;M{5k^{{=Z_^nSp<k@xT!B5*YJ*4J(sVlT7`Ws~nv
zlOC0OZ7FuID8z204sJWL-iJClr6g@5b)3oSnvCdpj#3=Y5j~CwjuQvR`XD(m<$ADn
zE|6G85SJfEy^>rmdL=N>bY*bxGQVZ1g+ZIwcZBZUem}A-|C6XgC11qo4&oITj^ho_
zUBXGHkKn|!M{yznAgQAbCtYkGT*y6eZ{oS5IN?+?o`1d#Z|Lm6vsxQ)RCVbW5vBQ`
zgznA058vsxbjf~Fhvm%EOrze0)REOSj@DghgD-0n_c)^jlAI0Ot60xu5}ON(q=o?l
z^?Ifrpoq+oPYKI#UOcD3f9<N4$Q@bNm0L3Jx$NBdk#g_0pDFXQf9+bh>r>aFoIki8
z*z=iNN$y|VN^}3>dSLHo^l$rjeX7jg{wuiGb!XN`PFvR9^T}F&J?xqEX4Mn(3ZQJ6
zOg5K&*EIIsqNfp|iDY%1#Om(O+9K!Rj4ntHtVbexC3hp3U~VX!{FbAUt2}`kPbnAk
zrv6Y(XC7iE7+<DVr^+TxTHz2F__RYvKpGYD9{xuEPXJ^VgiE8(_rgN+8M)B?hVNF;
zCse{&os6Lo!;~Xy3kPQmK<e+6jA8O(-QNKAiwB^hXb*=$<)~IqrQK!fC6MT`j6IjJ
z^!y*(%e+c5QY)v*MOdJ01${0qoPB2itAkfRX!?5_4vvk&<iZBt)GRsmVTo!W^9Z5L
z*by|efbqd&00@G_F^OexL^D7l*=NF88NsYffA$@o>^t399XK@O6eb5|G)I=4I<qkq
zSC&7CV0p37;=>YJKL&%b__6=<VfT6&fudq%D%p1^*muhMg(nWpI0woYDiJI>Gq@8o
zzBBV01Bv+mPV6&sBT$TC;lS7lRQ=(S_5;mW2D+zzId*sbKdo4;D-KJQE&u=k07*qo
IM6N<$f=X$hY5)KL

diff --git a/camera/MultiCameraApplication/res/mipmap-xxxhdpi/ic_launcher.png b/camera/MultiCameraApplication/res/mipmap-xxxhdpi/ic_launcher.png
index a4be31a79b6b6de0a12f911c48f2ef5dc0d8d49c..a0d56cc4052b14ccd3972636fadf1c3d410e9c79 100644
GIT binary patch
literal 4713
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
I*LJw~KhQaoX8-^I

literal 5778
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
KK@}>`-u@R+A(GAj

diff --git a/camera/MultiCameraApplication/res/mipmap-xxxhdpi/ic_launcher_foreground.png b/camera/MultiCameraApplication/res/mipmap-xxxhdpi/ic_launcher_foreground.png
new file mode 100644
index 0000000000000000000000000000000000000000..ced94266a34849195c4ec574a960388ccd638000
GIT binary patch
literal 13190
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

literal 0
HcmV?d00001

diff --git a/camera/MultiCameraApplication/res/mipmap-xxxhdpi/ic_launcher_round.png b/camera/MultiCameraApplication/res/mipmap-xxxhdpi/ic_launcher_round.png
index 747f16ef3f563f888f4c9cdcde9f39a4d245f845..957cb2812113b756b1b6aa672571c6271fe028ff 100644
GIT binary patch
literal 11021
zcmYjXWmr^Q*Pelq&Y`<I1*N-@E&=K8kZuO)E-9s3rMsm&r9m2`1?ismJlFT<`@z69
zu!nQjUi+?fqSaO9G0{lTKp+sNqJoSj@V)!LFBBx;Rr9waG6=*vrzj(-?Xz-fgzTfE
zv+!0zs+>lGnTF;w3Nyu%tX%&l2!R$YhWQgrI_;yW_UJ(rZHzX_p{(5}TbvXLoI{8d
z)DIhyqzaN1qAy+xt`>f@RHfv4z1Qf!(Yn$6Q$%Xrzq!J5a%J!2a+vN&JyK|{0L!yn
zn&SWc_)74N$|W_M%=^qr1xl3;?7XdlzvV)P6uY3xGEgN&mr_7tnGB9BmZyM|4A<w_
zTTn%pCD^jZ@_Hnf-a&C8rh>zO?PV?XiNEKGvSX1Kdsn?!J<>>SjaKkU1+|XUvU0>P
zIiB`0-4RnCLtkWBwvNnF(UQgT(2`^Yo`CUUga)6$3{n#b9wdDk*Lb3+ycbs5bv2ef
zc}w=K?<s$=$6^oOF+xdqEOo=OjBOb?T*U)(7vbUIadQfGE57um+;;D7^<exF>fYeC
zE>+0FQ%*OO+?ABJfv7DyY<+GUAZin5Q=D4T^J{jNgQIy!`fP8i-)6r*;W!|H_b&U`
z(p|;gT3!Cnu-?+P_rOT5b!%<($*p4&mP9Gf^he7YJ1@R}qKC?H+G0cwW%t4+eau~@
z+reJXN3Pg5O;IPzb@eORju^|Tb(U<VP*Wvuoaswx4Dw}M+N^3P43i%=s<$!}jA?>|
zKSSvRKeLab9fW`WsMEb4gR@Oqkwg<y-5HUlFF8V2KT1w{noDQUonYxz)M3q|MC3NI
z{iXV%(`VBBz4pa0#tb>S6ZVj6J;Bg?MLwLDNAIY3A|NrwAWUmM&Q$xGbhT0{Catik
zRf8IDc}H!D^1FH-woT(s=|4rq$vxQyhZ_vUck&!i)raBz!ThOojQ7^zMFH4KdgCag
z`d*SbXEaes>FEnOL4P&6r^IpDdFER(T!wG;?vbkmkBV}wb6%a#;-6otguRI+0pB*2
ze8DtCeBwEO7JR&y@Y5syN08)XDnb{v1Kw~5c9@c)z@ofX{Cia#oL39#BK>#D6yN_5
z>DG7x32Wiu*D-Y+6-S}aAzC>WYQd-mok%FP!;}JrSBl7+iw;$|s<zvZm8Ax4Zgh&w
zO{z%veIxcVJA=33d%_9ARzyLbGAuHM+_^bzd{+wXqOP$iB;>yvKjB0S(T>c%2aLC6
z!5g^U@;+MNskdWnEls<sZf+MKhG;aDAWnzO3c0|Y2_zp?78Vwh@Q4V)_w>WacP?vf
zI_b{lEwZ2GL&k~I85Jblm}zNf3OZ;dDZABXZECbfVPC)Xent8$V?OP7zS*;`l)*U<
zER}VOEuAR6dT99d_$Lbbk9W>iUD*BpVvkAZ7kebPjlKPm$>FsN#tS}!uksF2F*j;Z
zyWjQEC9Comf~RnS*7<1T4V_JXepCglH3q0h@+Wf2zhW0f0j<3JVVcR5{82bF%1JVA
z2X96En{!b0E)k!&SkK$3P=VXc^VsSQ*Uf~;{)Rpk-y4jea=r?>rR^~in#>lw>@Y}{
zfWg;0{Z$UG34r$*z(MP6p2zk90Z&@ak_fQ^aF)Gu)}c)L8n2zf_}NG-itiRjA|WWA
z>m9zc8Jq#l`rV1h%<L>IsC1;1<wh8J@n_VBwnEUSm&dcmCa2XuHlqka-*O_5jn2_{
zhbbvr8|dT{Y`3<yR+efl8iSv9s8%*!Zul#`&(`@GjXV7gBc>>METdkGaB*>0W{Tvm
zffGxd1?fikhH!eZH-;OQ+)J4GI;cepmdEM!X>MJ(ue_USLuIwbER@f@AEi>OOm)Qs
z{-7JV>OLh})_L_yX=ON>u2JPHpWUt&Nfye(3rb6b`~GAgW`&;V5dPMrnA?U5ofxx7
z{=`@Q<DxoViM-V7!&&*&IxF<vSUJwJ1*`RuRHlvB;acpn0WXQh8~6iGa^%<5hOLDv
zIYK&Ao<^8Yy{^u)WonC6#+~-V%OHpNkL!z7M(v)P-64b#j3KU;Q4=MHy*H%#x3h>d
z>;7k=mB8h2q6e8dtv1a^V3L(S{~Mx;z)TeLIhSbn`M2FOJw07VYv9<=gN&UnRv(8J
z6em}#=y~2Qbk1=aiY+!hnJ4ZtmqmR&nIpXNO{<KM8!UpchkgDBow9#-G4A^#nEYVo
zwZ))qr9m?vIoNg5B;a4T*W-;7U5dmlGWR8=kViRxYWJ+duc6S=O;B6ZrTG>A3iIcb
zl)}K<HSd+nDRCEpb99Hrs+=Z|L(S(8aRTU@9bASju695VEcN$=W<Sw#as}R5(U5wk
z6YJkni3b__-|uB$0{4_7?7g6xEnv3v1S-bKfxEGYZ*E;^P^E~i)j58(tszTvJT6vD
z#lQ|SGYPy-3sON^`w7xFKkW`d3^WvCr7xbE|DnqU{eu_B8fY4cO|{VGb!tzF&~dZk
z;J2_etWi*JGnI>mjg9T0&(eR&g;r8p8f3N0i8Y-A{DQA|=WD9;(**y<!CM)*3GCk;
zzFNXwCrgf|$_*br3Ld({U!JXh)yYX)`{N1)JYO%WAO@MOwR_7uuGQ$9C*A%kQMxTG
zDlz~&_}`rT^I#ZS45ipWp?gOa7t_*%(q7Ot<hV(6Qyu)Q)E@NQMq`7JOqQ>2N?}$R
zHH_U7bHgQ51ZR`;3;-kj%JfSs!L93jH3Cf}<5yMtOQMc;nAsL^Uq?trwu+wV?iZ1%
z^j=gUm7s`>)M9MLq^iC-BU%H#pBKFFaD8mUx|WwJKK(N|_%y>LXr|g|9O>qb!6X8+
zf=JNQUG7$2WX86Bx3AS~MIRai14F0N*bG&|0nnz6!@~+rgK;E&#8V4=X1$Qp=i7}%
zI(lM~39JBzdT<rRE$Fs4{nl&rGfUe<wxCvUM44(%oeq!cMjb|Y^v91MrI%=K+>Q=@
zT8*Wrc$hz;eK=&1Lofat{BX!r2^7AKTym|wJ!F<W!Y0z@Zo$CC&dkh=^i6=I%`2HO
zZghHjdh+{=F|I)U5PYwd12ra#)EO%NSO1LT?&LVd)zbs@2P^dJud?!CbqaZ}Hqm9|
z<*{EOQBdMSi{NE>K}RY?cn;{N*c>qfj9guJg$Qwqm_POl3k%UYN=fwk*j=v<W&*FW
zO31~~T^XxzRP6X-pG>p1e!`z!Ug4*%GUWvniaQv{gmD_Sz;s;82|0FaPHOOPxuld6
z8gzE|n>T`H(VOuV#+|CW9=;o|TEt2T-o+wgQ~s9GyK>Vrmav8Y(5)8Z;45t!xG5gi
z{33`{eG)uV*55Dl)iQERDO=E;k%5Qj!Z%VjOwWNpRaG_DdF*Xh=Hxhe<WOS|4vF3T
z_cTH%wD4!d*4v=SMe8Y9)1-Ef!<5R=lG&Oo0CaL<VT$dKV5vtcu>gT2)lKrmml)78
zaiRXf-X#D54#1zx<2n1^{++L%RFEp@Mn_VFZEV4D`15#e5?*qF8(8(geQf{*ElG<P
z><lHE6h0cDFBSXm+qod%GwwJ4Y?yp4jk_6KBvPmsij2L`^?YLxzgzfHgA1QjqD2Wt
z4@B2*@xOI;0>FDEUox~IfkK!SK@T-rO4Dhr&6Bvsj^8FzI*(h;EogD2?O@^nA`yk{
z$u~1IlXdL6SFC1izHzZJirRa++I+mRRbg$&sQ^>9xdYCw0m|2b7P<1IH90tN6K@$7
z*6PwO9Xt^7vq5&jZi6-dLUr=daf<8+zQ6uh`Sa!BN0&Bk#Nr*r3pQJG9UXd5;+a6;
zLxZuKX}_#+6C;Q_s-qVGw!cZ(=j`0}L?r!Ka>?!9X9*4Roj+$#rn>_DJ2|$x0v~xK
z*$|1aUyYDjvRjy&dypU+!T+|O9j$c9CsO*wi(yp%6Mot#*C@IgV5_aIeV9v_!ilEy
z<pXDJ@?ubl8Hy8mGk~TL4sDSL2?(wkxb59-?q=1*=l8JV1qKex9L=uETG_w=9hNS#
zfy2_>UYWi+nCT!i9qfI0n&aIP_2Ck;xIUWq17|XfoRdQIy8>Fp@PHMY7<8>o!SI(B
z>xnOENbgDNo6^MJ=)m(tcM~;GV3GVD2kJ&m`Ob<9_jld_0UgF?pDeNMO~Nc3V}(eE
zDP$t2E2ZXUhd1Ikii8_~>}#G#f|BtBd@pu$24acCZQM!vN2+Oe9Xps<sT>KOU!#GO
zx+PQDWvtmtu<DkQ1d@1f5_lvzX?nw^zjf51i+{wn+jX~tE=7Y5ICDa>ya5c)1OMP-
zOTxQAKC~vad%w(c<ART{*}?rlYwaR<QK%wh{+u9I2Gn=k%w|&N6GT9MT*_GvB+3$D
zI}H#UU$kwKie*xgIItyEk|rMOYbYS(OL6#pqH#9^B4&{oVSoTHeYErRfoaIHL~fdE
zRTQ+f(A|*>0hF2)K`)JWxN^LzjD&hGJv;WpEmh5%2DJS*old;;Kf-VCzuzXOo?y?h
z%;xnAZ9@mkh-*}MV_{>Tjm=P3e`5Tpewj$p9V?gi@y5}6+aA*0O6?fE)FE;~hlG8<
zW#8Q^WU@=Un+5XZp$fVyXvdKlVzidl<fw<~n>I@j6c(Pxj|&S5`WA`y=2g7|vG3r)
zpb=pNv>a6eT3gvT1$ADNuGtf+AVW4woKe+b>?oS?bcmNPh%4!ZOG-TS^c&nL9yERJ
z%DtCN6-`KYg&}oDb;oqkT5ZrgY4v_(*&PYQhf5;twyQv^xERsx9P$JTs%P@L{1bor
z#voGMC>f-e!Oqm0bQu1Jzt`_o_6`8~xh3p~i=R$&##KRBk>-TT@U2KHV`MKoq~T_&
z%^t`(EysOG=PE@T8km~Mm2<lT$J(&oI=+DLnA#?!OI*PFBZVv0hR+VB79J=JSx!Uh
z0wC~U@Ci?Z=mh~B8x=JKa>0mvXW)MntV;vpsbXfsDH&@i7)qevwX9aB--AM-b)WTS
z%MY%uU)?Z*EO8Ks44Rz>auL?MUAr#8Po=bK;?Eu|UsRjh5y45*Dg3!|A{1FVMd_4u
zA~7Fmz*sWj*_{JF=ult|3Gwl3TFuTzj&&I>2&PxJhE0z8)PXfd6sEe=AW94)2f}^a
z>)Wah4tr;)Rk=)BwcSVxgKC<)*A1A50-!Z)CM+tk4nFSR0QF5h33VGk-k!nH0}m+t
z8M+O_LBu4r>>BI%WWpSzfv*VPH4U(Xq$v?;jO(Ei^!*8d3i19ko^>inm1HBoWYP2K
z)%sQa!Tsfa`?BAC5gQa#g4k=<uMjO1tTAJEmEZ_y+0l-vC@ht1fthj0G@YdDgKmZ1
zYY=g%jRAXgLJc+SHjPd9<uEFJf09wc(9p0{8`cLLL(AE#{ilcH>U#F?J#{MeP#B#g
zNfbm@Mkb$UPS^zE14yXY!tV*$y(2f}aBl_#YIE9blfQ3ww6jdHeIs!-emlr0W)m#C
z;efAFq8c3*gAg%z(=X*<r7B;0k(oaNG+}k)1<O$Z$tY1{_GA8TuuCmSC;3xa=sA|o
zk;O}1HLpLzfs9Ly`88W!R#q0FFK+KQUOu4K%Hcg<-!U>UIMp;Go+u-13QJ2%*UP-4
zCK+Ey4}7>f)VB}og1`8e{dPgV1GRmSL=k3Wv_>`~R-zXrne{~r@tZH#=!+!pGZHHK
z^-Eb1H1})@Zp-F&8?aY1(2gDLj0U9C*5?Omd0fyQ+m#_UP_0^on(Q)lX1x3ZfPJ^s
z_&L_cA>HO~+R8DP5;F!FoJPv>FkNF`1|_WzC*3=7O{@vjAQ)QR*;@N8zL5oYO*RpN
zkL&M-gOlZYsuFA=8*7Aa$uLCrNee)!mHsXQ@lx=CG8WOUj^@W2Ah2;^pYzR<0_jLT
zg!Id86m$fiRK6-TDv$Yb$lc=xyh>LI__rh;z{V=egADQbsFU#mZJTZ1BW&6Lex@-|
z{G~;(CT_yeO$7$9%Ms0VO-)Vdl_dYTGU!cuO5^K?`^=BAjP(7}KDt$I14zEs^q`s;
z$Maf?A?J7!UPg%CBoTO_(qJ)8?0{2jyaLi)CohN)7Nf}fR|^KU({77#kToAC8DpSO
zgyAu%{>~HlXnrh$2ZOf=;DS6Q6s;LSO()3~!zkEa(m?53#x{<Md&~$DjY&m$B4)i|
zUfmY}hE5sUgo+Ay8fIUe^Fm(mdGSEhNs|9|62-r`ZI}+X5wN|t%mUX0{2GVklTdpC
zLXHbG_NJU@iUW*>itq%8FY0bYU=cyy#VE^xB`<!D{w26ZGLjlpl_e)zk4GI&pQH>k
ztVCz-hnDvr&HpgKxjXxs1&RtAZYOjG%&q@cIMILAn+41pPc_~eUJ^O4AUI_(fnpV`
zXN~$<7~z~ML$B4%%Kbq?OSp&GFBMM)VB5D>Nce&r36h9Lf?NA>UMvY7pYWj2zlkKg
zr5rWNmRz|u2<!$;C#VnI$3Pi`1jo81G{>XJ)OHzn;t^hF9Smau7xC}kKmL&+f6gh$
z!CHGWXNdJw?pl)ANnO?@C<!S^)UDaZQQM3ULE>!8XeSBZJz~z?lJ*3!cR#U7c#2=u
z#C399D1*L;*{9Zf430x!93L8(>*ob9gc~yBLFh!B<8_-h04i7;;il`O)dKt++v#_0
z|HTHO!DWLox&{h30ql3Gs$%wD2>Cl-4Y5Lw)OqI-CE;f)jcjAaR+AsjPM8s>M+u0C
zyi>TZiEGHA(Cr)tgs1^-%b?r8YpZs^x(7Vf0%Dq(XJ5elmC|$zpLG<O<PCdnKGZy?
z=%d2iY?A_3o17w1`gCA>fUxk}O9Q!*j;8K3^qfGtw}~7*XqcjF&|^vVu!8`mU6^zD
zBnb-h<#$>Md-Xb~o5w;(7b4MAf$|z@&2!A8-OK4)mTnkoA5^k65M==+lZG7aKJ@LR
z+Y{Bbnl%%s(AQz1LLU==m)PAld?}BxqP#s$;|_t5li2Nn$wb>w=4NaXVXulURBpgm
zj9*XEJ{^uzFi<oyQ<6onn{)+;agXaw;(^hA-v9Zkr=*|myoCIBn(!5$(@Fz-ffP<J
z^J?M;UXP%p$I$JSns3d~?b0?)vVy@cB8C38Nd`>-CW&=S$^J!^aOrK>BBP*qX2k2B
zi?8ixhuzS)bz<-h@or<?2-t+V?^&B9Nlh{~6p>ow2zjzv9L;?TMvhP%O&{e2uQWNu
zGOK3+KrXJtf0n*%Ko=7ks<K~`{{e=yS}0_(_nCuM9Q37Q2z(>z>h-O;=mQ<#a1U;x
zaOsQ@BBZ6H-u+1fg@569N$3xmT6Otp^!3fIoxl7iL#tp=t=Iehaa`P9Au~FHVVcN~
zKw!f@BKovS;6?@@6*LgAL`1?K2e9jIF~GAESmCt(#nfgN5NKh()&3T6`DcPd8TO_g
z55#9b#~e7*LM|lpXAZ?7TyhRjYBqx2hGX(nftC*x=DUHt3)Ln+zt$KK5Ldmg{7{u@
zngziL3^}kF=<n}$`E3>qYW1RY>fgh~XPC9k+#7uXO=2d9^tSSV)sMDVkFzNxK_|(C
zgoHPEHDkm#qu5{(yQA)}Y)SOQjIy7Uf65a>Eu!*@=%wDI5md@Bs(jf^VH<Q+jXKXi
zD+3`GgGfzVe^DZPF@nf9F&bK#HayAy`<QVy@UEf6J%A}5P`194J(Tusx#j1FYw0&M
zW43588u86{Idra^OVb9<=jhUxY$tv@_FwOoXOO3fddUUd=&b-l)(KntPvuT3VNs)l
zm;5<}ZKv~*c2VH=YVu1u-Z4}>mI~Ik+BjP`r>kuhuCIn#EQS)=4EqF8Q+m14+RXKv
zb8b-=VmHmr%{e<Bj(!A#y)M5%#-M1JC@2#2<rru&w!4o5xd}Btpdf4vGIhFo=0^x~
zlhiX#+YiAXBkWydITd>xMjsQHz4{{7tCrS!*U7BhQ6cuQPcWn4VEDE#YKS#zcwq^-
z%bWN2{n2<kCx^%_tl-_sh$K85dK`X=A0su9HM}3%=*HMw0zwvB68j=B-IpJ2<q-}Z
zs20_Dw+&6xYYpC1(@e7`=M!>#xa<9D+-R@k-5d11^9iKO1gcQW6SHmkGVq#kl98`S
zI=)jh5K*RVdIYO|c~jVmc01eaZ2k1gh&ty0G0NH14hUlgOii17FaKCw;(<q@sOC()
ziO!C6U+ho+AQOjx1jIipnc~^oIxB(9KZ*)*nL-Br3=9--0+1Fs5bu^6FIE~I^sQ;O
zQuFsvCnx653OZ4!KNQZ2wgI;2u`FcyNe)&g&^xVO@-B^4z8Vn^4^MaH2YoLJBq>#;
zyslqN+igykm=aPq;;OnOzRQFWeQQc_1|%Q2^TTuZbs;E8R#6}l1}!IS1QcXqM0FpZ
zJGp~k)AZ}$<fq|0WqINp&uGQH!!mJ|%RcUjr6TT01qe=k51C6xL8W1<rgzdFuD-Ep
zVln;;l@fHu8^2wnkc?s%It=b}m^+|LNW2M8;_<;=XB*?VcmD@JxQd8Tqg&$_o&Xhs
zRKEfadmH`|PsTqeMSS)o(4C%8qgx~wkAwO>Ott+@+p{$`iRBxF;WqLuxdxp`5lLcI
ztgH_S+T3&dbVk9Ke^l1aKXh=F`9szc&-8u<b*?Y0MNyob$bdRuB9Rh~fzCdLQ~>92
zL-!Z_o>roiYIA>IHzgxor^qh2Q?$20jsYe@NBuG43rz)M>M94Jhaa*TciTjsxXDJ>
z$nfpR0t9DE&GJyU+L%I`xDvI3$NI7oUVjI+<)R=b$3TF{$;$^1o7m5~md~J4XV9DW
z2tsYo!PJ3CpFb7Zv)EXQatY7g8FV0@$(oUwKinz9h7P{oE}J1u_vH=yO=Z5efO3!O
zalFTQb~!|j3V^`@YLiy@x)QKRT#wW3_Fe*&M=EtG4q=j&aMc12i+-lYljT2)%WnE#
z=+bz*?ysiimi6%mqcD!d)XU)D;LATCqVa^t9nXE!O4xyiqrZcV2S_Z}S>a+0B>2xy
zWee87``c}W-UsEY$E7Ya7k2oAwdkyb5Osk4p(`vr+{x@-t7ma>v5fj3{KQiI9}r0E
z$i#bETJE;H3OSNMWff-P0`JpA$=^so#?nW)*slP|vpv+!$ddN%_ph=j4mmjc)-((T
zGD2!}T&{a9NHOHJ{Dx=-GwkZW7zW_m#j#PRWw;Fhq&8mwR>4@R&@6e^`YA%ZK26fH
z#D1~r6q}?0$cF7i(3iqM3X}y4>qeGI!lbzzZWQJdjT|d^)Z0z2TfJv6#X)NpgVDT5
zOZAB_Z?}*kDZIb`0$PpVi6PWgayXZ?6*Ia{{HzU^iV9wKpYS_f%oRSh8u)k<NRU|p
z<j%4NV|kH<l2!-I06%6DDih%i8pM?nUKPrqxXypq`2eVL0#jw{gP&~x+C?5^qEQEH
zY9K*LN!!4B5XKM{1G(S|#)08??|;0<Opt5TueZML2z>PV!jWTELuy2<9u!B*t*uMz
zmOt(jk&l#1lgrSixx^|MHA6+eRBxm90Pw^WRt+&ezBb8HgY3nzTB>=8Qbq(Xxy1Wp
z0JRK!2^H#fY|)D#?;zCCHOYN|cDTCw$zws1OOZ?CRa!eR%w-dVtB8h<zA8&xfynOG
zWBuBHI4{yZbklb3yAHZjnFG6VhYvMRMuKhr59KW4XKZo-n5<+UtY>p`6NJ9M$O#$V
z#=zTAry)f_`o)gZH*4_4Phs@r_q`xyboKf9`Eyw3P)JV-gVMwD*!{!;iQG`-m$wd|
zKyUvO2i{dCL&knLr&Qm^PdO0jmzrHn1`hx?5AuI&KPPd?M&&Q`b6K#DA=6hNWJuxI
z>Cc_>7mkKp9;*ep;LjRi5fOtI2PSE+^?GwBU7E7YD%z?wOVF-#&%;ph)(gKKhEzI)
zeP+R1q3TIrT3SLr`w4%MFrD1k5Kn4P_Yt<g3TCE9L-O<Y*A3;uAtJiP)0{QW5WC*|
zyqp5EJ?pX@Nil)FHBFEY7Q8y-MnJLA%Y9{!Ma-SQwp?#h?KXt)7M;2NI@e?oDC)v1
zy?Wy3SOMr$I*mpkSM7J59}D?;jdXN$W%)Ijl&}37%OlGx@)NkQ-XLZ2Igvg*&tYL;
z$Sk}24(4VQ$p<@h!PHva_L7Lo^-GnrB0TCIr&X2-8K9%TgRa!}iWfDgsHhzMjOu~o
z04Bfx*mBd%haM#wJ{GMHBi~-%pUP9)!l+G=8ol5M#L@p<Yau^cW7ao)@}1A3B3pKM
zhy~)q%mtgj>(^9PO9bM5XPSqGZX)%1SY5!oJP+-}$*=re_?fImZ64g*e-2uLo#~{8
z`_rzkuVsxlHQY46kPEnOqIh$>Zv|WVCfpZ|a4F{DrLpSxK{IK6<0G1_NF1<YANRco
z&$s>J(7<4@seR6r*ki@*;cQuI%YHm?VQw6O)2J?hh8>Xxd=`Wqx0G`4?P1}cAqF{k
zB&)388=cmG`-{e;N;)L9oi(&sovg6B-|wjK+b1$#?--ay)oN$e>Wq_^O^FEiix_S7
zlO^HR$3KG^!aqNMyP}!T=P+o(D4E0zq3P9ptLqlvzJpT~{!Uh0T-*q)^Sl?m5}Q)Q
zhthNF=C_?@*1w)a%)hjBbX<*gv!#eNeZ=2~Gg*)9e+_++W>=!Q2!D34ASDwIdg=}f
z3w!*%r+1GyO8M(~m;!Lk4DsZG7lEb`wL2~}foP)Jy+hKPC_g+$)7T<)gs;=t^?4{~
z$*L*T>DALwgLdPl(cCU}N3=o+29;sB#cHaW3W;b1t|Mb(=tSDV06r+y9va%)+ef&?
zq(xKK>+y<s|NWiTjZ!0(`HfRH(9rl{SDU?zX;>ioA2IpY>*GZiDK2$d$+quAnz&Ra
z^>RnlUutHC-}R2I5)_H~CQB)N$k%NT2Bw3a!PEi*cPzjB{F4vVRcj3rU+iohuK_nm
zS*1}VhmPfowsz)_e9nUpuF#1)dI1UYB}sW2%mR)z0Z(t^o5E)9ro8knU~^}IZFKZE
zEp*!(O;l{#_?DJ?bAf!t@EO?rUbiMcQNJr6K~B!U2vR2fA=<AnZoi$&Xt7-&;{o~g
zrz+=bVmuuZx`?^w)_=${vDf+C-Q9k!J`cBN8*dpI88wo-o#bA$wUGcIeL%y6xga0{
zt#eIve>S*4KuotThvNH32QB&uhRwwH9Tkc}%)N=3A|2haoSh=gm@X=EVR8ykfg0-5
zJbjsN!mYoEd5W}GjBE-9kzuF#K#UOT10WtT{X5J(6jW4Hv}iPEW&MBQyd*?LDd5wI
zi$5O4y-Gg0ctdvQ9)nTP{Y@wl0n^z3v@xUEaoG)lpOt|@mS8GN`fP`!)FSmKAa<V~
zekpNDUh?PLtiyUtmN9Vi5W?k0?9VanrVC|b7Xa6?HYUtrT^?6k%iBTRUsJyKc=l6#
zsl)fu%V$vMyS8Mq0cNagS;lgY3x~*uPecL-^!Y5cVjKB?-sm`sd7Wf-Nw?Xz+K%_~
z%^dmzv)9$<=jXh^`bzZzDMZvKD-uL!#2|-QTT7_r10**$R|V*{i)SF!xcb{00~vJl
zni-_$<9q-0t;2$vPkP1uas5dxB-qRwAy}1uIuOCc#6<Fw958Rps{yX`QL|V1{uQUt
z5xNc0Ob0N-WCGNaGunRyBd%3&zef4AoGc+Qc<^xDl97?2`UzY7$@LsankIX=sQ2}N
zl@+(OW}bk^3or24T;3wt)^{t{66ipC5)>Gul_Aw`u$@^cCL#M3?|3)PJ0<cH=$})<
z6om;SPM)Kp^x&yn(G{R(<{z3Im%&rxQ&ZKrx?p6*0#)2ojm@bL2(5mpcc$skH}Klr
zAn##RbaX4zcg1<f&EFbSkA>8&vb<NFz}RZas*@{wP5z$b{jSXsVS%av!&pEICq$Gw
zR8e|?h@Kb#t<~h@Wcg`MY$x3$W8M0YKKbW4U`}%A9}G<92WNQ?BW*%$`lnbk^K$Y&
zZ|Q7KNiT=-6Ui1J7k5$M*^RW>cA_}x19278{>0bjDC^M2a@PJB+JyqN@*Bjipu}2S
zG;33VHlU~`@20j{MDRq&MCh>G-*4IIjutk_hlpd-Gml!;(n>+(zo(z0b8ll%inO@M
z$n=ZF$t;CrFOsp*E)hQ^34z4<xMUpRkyJqf(}3Lz@j;S06TjHtq@FKUP*V(wKzq8U
z4<V;v?famaA@k<f99}(m8P6p6`Fal6HRGNmS^-Pf@wqrtvYbT!Xv&<HX28F<@&MkP
z#A7P&v)r>^%I>$}sdoui%;!Yh%B)YHex=Y$DYrI>kTn3kFxwlBt_x_;je%`{kvBoG
z7!+SnC*;Y)(Z%oPMBnLnq0)PQJPU6INOm#?$`kz)ZMvtV6moy1tm`II3g5kA5KK3W
zro-qlHa7OOLvtRlmrMmCB0a^I9&i9Yn1#8*g0`H5=C)f6@x0)2Cd+rGP*wv_P^XFh
zvHo%X@&1!VK{`Q%T~Cgm*S%r%&;m_gzVf}}<JEkbXlOhHSL|*xv|ucQi;1$o#N3}^
zj$lMa-ROuCN$e9U3Tyx1U@0d+Tl>=m(i?c)L!ASn)|Fg|4`P~<UsFV|(9%ZhL(Vbn
ze+^#|d$8bv>!q}C%m5*~szA!XKu;evZ5P3w_&XXSohOp~H%8bSjXFSm-4vg7Jvs{`
z{`{6C+)~!k+%lB1kRcyPu<fz!2wKxmD8iOxkEN8il)6JE9{3N;yn%G+$FP2v*WI}p
z<`}o^op$lX#5)MsZze_thbp<gNIub?jL-4T0+^ruc%12>>x%j-@mFNhjVbEvqhQy*
z{hT)~DtliEt>*5K7H{vz#Jb?5a1;t)1T6w2CW62t4MTvI&B2PyvU#OXYo(C?8vWqf
zhf&V|PR`@>zfmfx79biH|2v+9-7ft?aE-1EoxAlIlte2Zt&ok8`j8U#@6`9mLb%-V
zsc#8os6`*IfRrQRztQ|DU~cecQpg@M`pUCvU5apeSC|tWy2HESJ#JdNO0Jb}@TwT>
z1Q2c|KvcI8B?+Le>3f2TVT!j$?Y70kv3;&3^l)m4aTLq8MD?zKd&U#?V@niN)I$O5
z@ysbjxHHrewiB>3h-t*Qg;P|{K$9(r7JD|CG=;ezvr)uIl}rxHrB~hF9*E_Srxf*b
z1fptT#iBsE-{`+n<zH4?)#C2J&~v4KqSu<Zlsm(;O0-cVG*Q=%PHvycBzE3m@k-1T
z>->11BUWPZ@^tS2L?oU(03T7NUl$ypr<J4NexL~xsKe>|b%ExLKK4ZG02>+)clLL^
z@;+VhbODBNOdl};r}z+8b;#gl@4312<$i_CmEFYliM18fh43>ZdUGg&e0#B6|Jy63
zL|Fb9of41skM|r97Pw+6qe|Jb8J$EU&@!vcV{&s4bk9w3(|f8h#vC$sQ67fR^d)X0
z>~P}%tl-ihz|II~`;2Qcqs0MmMnOX23*84?Pd^E;ngSmmf9{=OBuLbxC`qvKj#7Ki
zf4dCk5=8rXx5ZOXbrZ$6cnS@K1VYfKW>|#Kd_jUh!mfbun_q4ound7}^7zTLX23yR
z^!oeTm&&xi5Jw=3dI%5<o}aq^DXXe3?0s%r2EmbPB<T-4hlz%{PAWpPkS+Vz8-VHj
zqlSjYBFYKsopUzgWC;+;2D&;kqbKiSR)H6L^MegZPs7K*_22eJp2Z_{jYLytTj7eO
z*@R1EVNCZ+G3wu8#Fr#rM*|W_9C3N>XE3~{ID1ezSH$-ZF!>JZwe0|~KZm|3!PJA1
zA}FETKiN8o4QTB<Q9iyK(vcqyJ`@xbf#E^HxNI8>RYv|P3ZBGgMs=1W5v}g~oI^Ih
zY=RTcVA%y{jw~Ua(H_R}5MTXu5o_>+MC^=l7;m`y57-%!40HBGg?jq6i<O;q`AC8p
z1*zmQSeu^Cg9V&Kz-8P~OQ4D3FiIWxYjN>5OUUy`1U{#w)~NsrDgoj-qyL`u!2G|l
za&YL+J@a}d`nC0b=*fQtk#|Y@<^*%^Z@my){4Dn{8sKDAPjZURw%Kknr;tkk46;J0
zl)_jmQmv#8cp>z73!Qac&N6hDcp)JnYM@LpF)<Z(loX~u|9>QR>;a5oUqh;@8?7j~
z<a|iZb?&p-{=L=v)KxxUTU{t*|9&`|z>?>)X|#HTXB~BzxKcEALfWEbv_@=?USvpg
z`15rpHRkdR;lffcsT-=i^uqDA@0;Lk@gG>hUK}q~U!K+^12|uxn`8e3GyXW#KsrfJ
z=aU_Hd=$k(slzg9M(Zoe`=Lc>p|z}t^`xN<5i(G-#1ENI!Ef(H=kIwx-SHyc3$tE&
zzu$Dnq3Zy3OkWuT6BK4<k_ud@ahw7D_n*x{>1IQ9<cPD0k{^=6Y*Do1c`7eCckMAx
z#^Ns(ZcocrckS=~c@t&G`8dFI^K~OthD{Yw9E#7axd~IP<5HlC@056>-r~Vc-uaoJ
zqV5jd30H)yk!}(k%x`gP>OrNG`m|`HGh_%I7~%0x>$J-tqYxtsPWh;lVGU-oIz2?s
i0&<BekW1eV9Bke|HT=qs#0+@M6{IMuDpMt8`ssg4I`ZHE

literal 11835
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
BU3LHf

diff --git a/camera/MultiCameraApplication/res/values/arrays.xml b/camera/MultiCameraApplication/res/values/arrays.xml
index 7c64091..dd59803 100644
--- a/camera/MultiCameraApplication/res/values/arrays.xml
+++ b/camera/MultiCameraApplication/res/values/arrays.xml
@@ -18,12 +18,95 @@
         <item>480p</item>
     </string-array>
 
+
     <string-array name="pref_video_list_values" translatable="false">
-        <item>@string/pref_video_quality_large</item>
-        <item>@string/pref_video_quality_medium</item>
-        <item>@string/pref_video_quality_small</item>
+        <item>@string/pref_video_quality_entry_480p</item>
+        <item>@string/pref_video_quality_entry_720p</item>
+        <item>@string/pref_video_quality_entry_1080p</item>
+        <item>@string/pref_video_quality_entry_2160p</item>
+    </string-array>
+
+
+    <string-array name="pref_capture_list_entries_1">
+        <item>1920x1080</item>
+        <item>1280x720</item>
+        <item>640x480</item>
+    </string-array>
+
+    <string-array name="pref_capture_list_values_1">
+        <item>1</item>
+        <item>2</item>
+        <item>3</item>
+    </string-array>
+
+    <string-array name="pref_video_list_entries_1">
+        <item>1080p</item>
+        <item>720p</item>
+        <item>480p</item>
+    </string-array>
+
+    <string-array name="pref_video_list_values_1" translatable="false">
+        <item>@string/pref_video_quality_entry_480p</item>
+        <item>@string/pref_video_quality_entry_720p</item>
+        <item>@string/pref_video_quality_entry_1080p</item>
+        <item>@string/pref_video_quality_entry_2160p</item>
+    </string-array>
+
+
+    <string-array name="pref_capture_list_entries_2">
+        <item>1920x1080</item>
+        <item>1280x720</item>
+        <item>640x480</item>
+    </string-array>
+
+    <string-array name="pref_capture_list_values_2">
+        <item>1</item>
+        <item>2</item>
+        <item>3</item>
+    </string-array>
+
+    <string-array name="pref_video_list_entries_2">
+        <item>1080p</item>
+        <item>720p</item>
+        <item>480p</item>
+    </string-array>
+
+    <string-array name="pref_video_list_values_2" translatable="false">
+        <item>@string/pref_video_quality_entry_480p</item>
+        <item>@string/pref_video_quality_entry_720p</item>
+        <item>@string/pref_video_quality_entry_1080p</item>
+        <item>@string/pref_video_quality_entry_2160p</item>
+    </string-array>
+
+
+
+    <string-array name="pref_capture_list_entries_3">
+        <item>1920x1080</item>
+        <item>1280x720</item>
+        <item>640x480</item>
     </string-array>
 
+    <string-array name="pref_capture_list_values_3">
+        <item>1</item>
+        <item>2</item>
+        <item>3</item>
+    </string-array>
+
+    <string-array name="pref_video_list_entries_3">
+        <item>1080p</item>
+        <item>720p</item>
+        <item>480p</item>
+    </string-array>
+
+    <string-array name="pref_video_list_values_3" translatable="false">
+        <item>@string/pref_video_quality_entry_480p</item>
+        <item>@string/pref_video_quality_entry_720p</item>
+        <item>@string/pref_video_quality_entry_1080p</item>
+        <item>@string/pref_video_quality_entry_2160p</item>
+    </string-array>
+
+
+
     <string-array name="pref_multi_usb_cam_list_entries">
         <item>One</item>
         <item>Two</item>
diff --git a/camera/MultiCameraApplication/res/values/colors.xml b/camera/MultiCameraApplication/res/values/colors.xml
index 69b2233..61e5d14 100644
--- a/camera/MultiCameraApplication/res/values/colors.xml
+++ b/camera/MultiCameraApplication/res/values/colors.xml
@@ -3,4 +3,67 @@
     <color name="colorPrimary">#008577</color>
     <color name="colorPrimaryDark">#00574B</color>
     <color name="colorAccent">#D81B60</color>
+    <color name="photo_placeholder">#333</color>
+    <color name="recording_time_elapsed_text">#FFFFFFFF</color>
+    <color name="recording_time_remaining_text">#FFFF0033</color>
+    <color name="on_viewfinder_label_background_color">#77333333</color>
+    <color name="review_control_pressed_color">#FF33B5E5</color>
+    <color name="review_control_pressed_fan_color">#3F33B5E5</color>
+    <color name="review_background">#FF000000</color>
+    <color name="icon_disabled_color">#DD777777</color>
+    <color name="time_lapse_arc">#FFC5C5C5</color>
+    <color name="indicator_background">#40000000</color>
+    <color name="popup_title_color">#ff33b5e5</color>
+    <color name="popup_background">#ff282828</color>
+    <color name="pano_progress_empty">#FF2E2E2E</color>
+    <color name="pano_progress_done">#FF33525E</color>
+    <color name="pano_progress_indication">#FF0099CC</color>
+    <color name="pano_progress_indication_fast">#FFFF2222</color>
+    <color name="mode_selection_border">#33B5E5</color>
+    <color name="holo_blue_light">#ff33b5e5</color>
+    <color name="bright_foreground_disabled_holo_dark">#ff4c4c4c</color>
+    <color name="bright_foreground_holo_dark">#fff3f3f3</color>
+    <color name="face_detect_start">#ffffff00</color>
+    <color name="focus_color">#ffffffff</color>
+    <color name="focus_debug">#90ffffff</color>
+    <color name="focus_debug_text">#b0ffffff</color>
+    <color name="focus_debug_success">#9000ff00</color>
+    <color name="focus_debug_fail">#90ff0000</color>
+    <color name="gray">#FFAAAAAA</color>
+
+    <!-- Camera mode switcher -->
+    <color name="mode_selector_text_color">#fff</color>
+    <color name="transparent">#00000000</color>
+    <color name="mode_selector_background_dark">#e7e7e7</color>
+    <color name="mode_selector_text_highlight_color">#ffffffff</color>
+    <color name="mode_selector_icon_background">#4c000000</color>
+    <color name="mode_list_background">#00000000</color>
+    <color name="mode_list_settings_icon_background">#26000000</color>
+    <color name="mode_list_settings_icon_pressed_background">#99000000</color>
+
+    <color name="camera_mode_color">#4285f4</color>
+    <color name="video_mode_color">#db4437</color>
+    <color name="refocus_mode_color">#0f9d58</color>
+    <color name="photosphere_mode_color">#ab47bc</color>
+    <color name="panorama_mode_color">#ff9e00</color>
+    <color name="main_color_global">#00acc1</color>
+
+    <color name="bottombar_pressed">#262626</color>
+    <color name="mode_options_background">#4C000000</color>
+
+    <color name="camera_gray_background">#1b1b1b</color>
+
+    <color name="indicators_background_color">#4c000000</color>
+
+    <color name="grid_line">#33FFFFFF</color>
+    <color name="focus_outer_ring_color">#4CFFFFFF</color>
+    <color name="fullscreen_dialog_background_color">@color/main_color_global</color>
+    <color name="dialog_button_color">#FF76A7F9</color>
+    <color name="dialog_text_color">@android:color/black</color>
+
+    <color name="settings_cling_color">#2962FF</color>
+
+    <color name="mode_icon_hover_highlight">#2DFFFFFF</color>
+
+    <color name="blue_button_text_color">#00838F</color>
 </resources>
diff --git a/camera/MultiCameraApplication/res/values/dimens.xml b/camera/MultiCameraApplication/res/values/dimens.xml
index 59a0b0c..975b3c0 100644
--- a/camera/MultiCameraApplication/res/values/dimens.xml
+++ b/camera/MultiCameraApplication/res/values/dimens.xml
@@ -1,3 +1,18 @@
 <resources>
     <dimen name="fab_margin">16dp</dimen>
+    <!-- Mode selector icon width -->
+    <dimen name="mode_selector_icon_block_width">56dp</dimen>
+    <dimen name="mode_selector_icon_drawable_size">48dp</dimen>
+    <dimen name="mode_selector_item_height">60dp</dimen>
+
+    <dimen name="rounded_thumbnail_padding">12dp</dimen>
+    <dimen name="rounded_thumbnail_diameter_normal">48dp</dimen>
+    <dimen name="rounded_thumbnail_diameter_min">24dp</dimen>
+    <dimen name="rounded_thumbnail_diameter_max">54dp</dimen>
+    <dimen name="rounded_thumbnail_ripple_ring_diameter_min">40dp</dimen>
+    <dimen name="rounded_thumbnail_ripple_ring_diameter_max">70dp</dimen>
+    <dimen name="rounded_thumbnail_ripple_ring_thick_max">5dp</dimen>
+    <dimen name="rounded_thumbnail_ripple_ring_thick_min">1dp</dimen>
+
+    <dimen name="filmstrip_bottom_control_button_size">48dp</dimen>
 </resources>
diff --git a/camera/MultiCameraApplication/res/values/ic_launcher_background.xml b/camera/MultiCameraApplication/res/values/ic_launcher_background.xml
new file mode 100644
index 0000000..09a756b
--- /dev/null
+++ b/camera/MultiCameraApplication/res/values/ic_launcher_background.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="ic_launcher_background">#26A69A</color>
+</resources>
\ No newline at end of file
diff --git a/camera/MultiCameraApplication/res/values/strings.xml b/camera/MultiCameraApplication/res/values/strings.xml
index b97c7ef..9e47181 100644
--- a/camera/MultiCameraApplication/res/values/strings.xml
+++ b/camera/MultiCameraApplication/res/values/strings.xml
@@ -22,7 +22,7 @@
     <!-- Video quality setting entry. Videos will be recorded in 720p quality. [CHAR LIMIT=24] -->
     <string name="pref_video_quality_entry_720p">HD 720p</string>
     <!-- Video quality setting entry. Videos will be recorded in 1080p quality. [CHAR LIMIT=24] -->
-    <string name="pref_video_quality_entry_1080p">HD 1080p</string>
+    <string name="pref_video_quality_entry_1080p">FHD 1080p</string>
     <!-- Video quality setting entry. Videos will be recorded in quarter VGA quality. [CHAR LIMIT=24] -->
     <string name="pref_video_quality_entry_qvga">QVGA</string>
     <!-- Video quality setting entry. Videos will be recorded in 2160p quality. [CHAR LIMIT=24] -->
@@ -47,10 +47,10 @@
     <string name="pref_header_Camera_Capture_Resolution">Capture Resolution</string>
     <string name="pref_header_Camera_Video_Resolution">Video Quality</string>
 
-    <string name="setting_summary_width_and_height"> %1$dx%2$d </string>
+    <string name="setting_summary_width_and_height">%1$dx%2$d</string>
 
     <!-- Multi Preferences -->
-    <string name="pref_header_multi_usb_cam_list">Multi-USB Cameras</string>
+    <string name="pref_header_multi_usb_cam_list">USB Cameras</string>
     <string name="multi_usb_cam_list_default">One</string>
 
     <!-- Video Camera format string for new video files. Passed to java.text.SimpleDateFormat. -->
@@ -64,9 +64,38 @@
     <string name="camera_error_title">Camera error</string>
 
     <!-- message for the dialog showing that the app does not have sufficient permissions [CHAR LIMIT=NONE] -->
-    <string name="error_permissions">The app does not have critical permissions needed to run. Please check your permissions settings.</string>
+    <string name="error_permissions">The app does not have critical permissions needed to run.
+        Please check your permissions settings.
+    </string>
 
     <!-- Dialog "Dismiss" button. Closes the dialog [CHAR LIMIT=12]-->
     <string name="dialog_dismiss">Dismiss</string>
 
+    <!-- Strings for Camera Intents -->
+    <string name="read_me">READ ME</string>
+    <string name="info">
+        1. Use ItsCameraIntentsTest OPTION for testing CAMERA INTENTS \n\n
+        2. For MULTI CAMERA VIEW select 2nd option \n
+    </string>
+
+    <string name="ItsCameraIntentTest">CAMERA INTENTS TEST</string>
+    <string name="MultiCameraView">MULTI CAMERA VIEW</string>
+
+    <!-- Announcement telling users video recording has just started [CHAR LIMIT=NONE] -->
+    <string name="video_recording_started">Video recording has started.</string>
+    <!-- Announcement telling users video recording has just stopped [CHAR LIMIT=NONE] -->
+    <string name="video_recording_stopped">Video recording has stopped.</string>
+
+    <!-- Describes button on top of a video in filmstrip that is a play icon, pressing starts external video player [CHAR LIMIT=NONE] -->
+    <string name="video_control_play">Play Video</string>
+
+    <!-- String indicating an error when playing the video. [CHAR LIMIT=30] -->
+    <string name="video_err">Can\'t play video.</string>
+
+    <!-- Accessibility text for preview delete button [CHAR_LIMIT=NONE] -->
+    <string name="delete_button_description">Delete</string>
+
+
+
+
 </resources>
diff --git a/camera/MultiCameraApplication/res/values/styles.xml b/camera/MultiCameraApplication/res/values/styles.xml
index 96a6f8c..36a0645 100644
--- a/camera/MultiCameraApplication/res/values/styles.xml
+++ b/camera/MultiCameraApplication/res/values/styles.xml
@@ -10,12 +10,36 @@
     </style>
 
     <style name="AppTheme.NoActionBar">
-        <item name="windowActionBar">false</item>
-        <item name="windowNoTitle">true</item>
+        //<item name="windowActionBar">false</item>
+        //<item name="windowNoTitle">true</item>
     </style>
 
     <style name="AppTheme.AppBarOverlay" parent="ThemeOverlay.AppCompat.Dark.ActionBar" />
 
     <style name="AppTheme.PopupOverlay" parent="ThemeOverlay.AppCompat.Light" />
 
+    <style name="OnViewfinderLabel">
+        <item name="android:gravity">center</item>
+        <item name="android:layout_width">wrap_content</item>
+        <item name="android:layout_height">wrap_content</item>
+        <item name="android:singleLine">true</item>
+        <item name="android:layout_margin">10dp</item>
+        <item name="android:paddingLeft">15dp</item>
+        <item name="android:paddingRight">15dp</item>
+        <item name="android:paddingTop">3dp</item>
+        <item name="android:paddingBottom">3dp</item>
+        <item name="android:textColor">@android:color/white</item>
+        <item name="android:textSize">16dp</item>
+        <item name="android:background">@drawable/bg_text_on_preview</item>
+    </style>
+
+
+    <style name="FilmstripBottomControlButton">
+        <item name="android:layout_width">@dimen/filmstrip_bottom_control_button_size</item>
+        <item name="android:layout_height">@dimen/filmstrip_bottom_control_button_size</item>
+        <item name="android:background">@drawable/transparent_button_background</item>
+        <item name="android:scaleType">centerInside</item>
+        <item name="android:layout_gravity">center_vertical</item>
+    </style>
+
 </resources>
diff --git a/camera/MultiCameraApplication/res/xml/root_preferences.xml b/camera/MultiCameraApplication/res/xml/root_preferences.xml
index 72a8bf5..83ba094 100644
--- a/camera/MultiCameraApplication/res/xml/root_preferences.xml
+++ b/camera/MultiCameraApplication/res/xml/root_preferences.xml
@@ -1,17 +1,17 @@
 <!--
-  ~ Copyright (c) 2019 Intel Corporation.
-  ~
-  ~ Licensed under the Apache License, Version 2.0 (the "License");
-  ~ you may not use this file except in compliance with the License.
-  ~ You may obtain a copy of the License at
-  ~
-  ~      http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~ Unless required by applicable law or agreed to in writing, software
-  ~ distributed under the License is distributed on an "AS IS" BASIS,
-  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~ See the License for the specific language governing permissions and
-  ~ limitations under the License.
+ * Copyright (c) 2019 Intel Corporation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
   -->
 
 <androidx.preference.PreferenceScreen xmlns:app="http://schemas.android.com/apk/res-auto">
@@ -32,7 +32,7 @@
         <!-- NOTE: RingtonePreference's summary should be set to its value by the activity code. -->
         <!--app:entries="@array/pref_video_list_entries"-->
         <ListPreference
-            app:defaultValue="@string/pref_video_quality_medium"
+            app:defaultValue="@string/pref_video_quality_entry_720p"
             app:entryValues="@array/pref_video_list_values"
             app:key="video_list"
             app:negativeButtonText="@null"
@@ -41,17 +41,4 @@
 
     </PreferenceCategory>
 
-    <PreferenceCategory app:title="@string/Source"
-                        app:key="pref_Source">
-        <ListPreference
-            app:defaultValue="One"
-            app:entries="@array/pref_multi_usb_cam_list_entries"
-            app:entryValues="@array/pref_multi_usb_cam_list_values"
-            app:key="multi_usb_cam_list"
-            app:negativeButtonText="@null"
-            app:positiveButtonText="@null"
-            app:title="@string/pref_header_multi_usb_cam_list" />
-
-    </PreferenceCategory>
-
 </androidx.preference.PreferenceScreen>
diff --git a/camera/MultiCameraApplication/res/xml/root_preferences_1.xml b/camera/MultiCameraApplication/res/xml/root_preferences_1.xml
new file mode 100644
index 0000000..7e3aca4
--- /dev/null
+++ b/camera/MultiCameraApplication/res/xml/root_preferences_1.xml
@@ -0,0 +1,45 @@
+<!--
+ * Copyright (c) 2019 Intel Corporation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+  -->
+
+<androidx.preference.PreferenceScreen xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <PreferenceCategory
+        app:title="@string/Resolution"
+        app:key="pref_resolution_1">
+        <ListPreference
+            app:defaultValue="@string/pref_camera_picturesize_default"
+            app:entryValues="@array/pref_capture_list_values_1"
+            app:key="capture_list_1"
+            app:negativeButtonText="@null"
+            app:positiveButtonText="@null"
+            app:title="@string/pref_header_Camera_Capture_Resolution" />
+
+        <!-- Allows the user to choose a ringtone in the 'notification' category. -->
+        <!-- NOTE: This preference will be enabled only when the checkbox above is checked. -->
+        <!-- NOTE: RingtonePreference's summary should be set to its value by the activity code. -->
+        <!--app:entries="@array/pref_video_list_entries"-->
+        <ListPreference
+            app:defaultValue="@string/pref_video_quality_entry_720p"
+            app:entryValues="@array/pref_video_list_values_1"
+            app:key="video_list_1"
+            app:negativeButtonText="@null"
+            app:positiveButtonText="@null"
+            app:title="@string/pref_header_Camera_Video_Resolution" />
+
+    </PreferenceCategory>
+
+
+</androidx.preference.PreferenceScreen>
diff --git a/camera/MultiCameraApplication/res/xml/root_preferences_2.xml b/camera/MultiCameraApplication/res/xml/root_preferences_2.xml
new file mode 100644
index 0000000..c400f8b
--- /dev/null
+++ b/camera/MultiCameraApplication/res/xml/root_preferences_2.xml
@@ -0,0 +1,45 @@
+<!--
+ * Copyright (c) 2019 Intel Corporation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+  -->
+
+<androidx.preference.PreferenceScreen xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <PreferenceCategory
+        app:title="@string/Resolution"
+        app:key="pref_resolution_2">
+        <ListPreference
+            app:defaultValue="@string/pref_camera_picturesize_default"
+            app:entryValues="@array/pref_capture_list_values_2"
+            app:key="capture_list_2"
+            app:negativeButtonText="@null"
+            app:positiveButtonText="@null"
+            app:title="@string/pref_header_Camera_Capture_Resolution" />
+
+        <!-- Allows the user to choose a ringtone in the 'notification' category. -->
+        <!-- NOTE: This preference will be enabled only when the checkbox above is checked. -->
+        <!-- NOTE: RingtonePreference's summary should be set to its value by the activity code. -->
+        <!--app:entries="@array/pref_video_list_entries"-->
+        <ListPreference
+            app:defaultValue="@string/pref_video_quality_entry_720p"
+            app:entryValues="@array/pref_video_list_values_2"
+            app:key="video_list_2"
+            app:negativeButtonText="@null"
+            app:positiveButtonText="@null"
+            app:title="@string/pref_header_Camera_Video_Resolution" />
+
+    </PreferenceCategory>
+
+
+</androidx.preference.PreferenceScreen>
diff --git a/camera/MultiCameraApplication/res/xml/root_preferences_3.xml b/camera/MultiCameraApplication/res/xml/root_preferences_3.xml
new file mode 100644
index 0000000..20900ac
--- /dev/null
+++ b/camera/MultiCameraApplication/res/xml/root_preferences_3.xml
@@ -0,0 +1,48 @@
+<!--
+ * Copyright (c) 2019 Intel Corporation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+  -->
+
+<androidx.preference.PreferenceScreen xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <PreferenceCategory
+        app:title="@string/Resolution"
+        app:key="pref_resolution_3">
+        <ListPreference
+            app:defaultValue="@string/pref_camera_picturesize_default"
+            app:entryValues="@array/pref_capture_list_values_3"
+            app:key="capture_list_3"
+            app:negativeButtonText="@null"
+            app:positiveButtonText="@null"
+            app:title="@string/pref_header_Camera_Capture_Resolution" />
+
+        <!-- Allows the user to choose a ringtone in the 'notification' category. -->
+        <!-- NOTE: This preference will be enabled only when the checkbox above is checked. -->
+        <!-- NOTE: RingtonePreference's summary should be set to its value by the activity code. -->
+        <!--app:entries="@array/pref_video_list_entries"-->
+        <ListPreference
+            app:defaultValue="@string/pref_video_quality_entry_720p"
+            app:entryValues="@array/pref_video_list_values_3"
+            app:key="video_list_3"
+            app:negativeButtonText="@null"
+            app:positiveButtonText="@null"
+            app:title="@string/pref_header_Camera_Video_Resolution" />
+
+    </PreferenceCategory>
+
+
+</androidx.preference.PreferenceScreen>
+
+
+
diff --git a/camera/MultiCameraApplication/java/com/intel/multicamera/GlobalVariable.java b/camera/MultiCameraApplication/res/xml/settings.xml
similarity index 50%
rename from camera/MultiCameraApplication/java/com/intel/multicamera/GlobalVariable.java
rename to camera/MultiCameraApplication/res/xml/settings.xml
index e6e5415..3428df0 100644
--- a/camera/MultiCameraApplication/java/com/intel/multicamera/GlobalVariable.java
+++ b/camera/MultiCameraApplication/res/xml/settings.xml
@@ -1,4 +1,4 @@
-/*
+<!--
  * Copyright (c) 2019 Intel Corporation.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -12,16 +12,26 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */
+  -->
+
+<androidx.preference.PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
+                                      xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <PreferenceCategory app:title="@string/Source"
+                        app:key="pref_Source">
+
+
+        <Preference
+                app:defaultValue="none"
+                app:title="@string/pref_header_multi_usb_cam_list"
+                app:key="multi_usb_cam"
+                app:summary="Connected : Four"
+
+        />
+
+    </PreferenceCategory>
+
+</androidx.preference.PreferenceScreen>
 
-package com.intel.multicamera;
 
-import android.util.Size;
-import java.util.List;
 
-public class GlobalVariable {
-    public static String message;
-    public static int numOfCameras;
-    public static List<Size> SupportedSizes;
-    public static String camerId;
-}
-- 
2.17.1

